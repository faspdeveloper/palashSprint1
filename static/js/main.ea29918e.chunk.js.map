{"version":3,"sources":["components/common/AuthenticationService.js","components/common/AuthenticatedRoute.jsx","Js/validation.js","Constants.js","api/LoginService.js","components/home/LoginComponent.jsx","components/home/WelcomeComponent.jsx","components/common/ErrorComponent.jsx","api/RegistrationService.js","components/user/RegistrationComponent.jsx","components/user/UserApprovalComponent.jsx","api/UserService.js","components/user/AddUserComponent.jsx","Labels.js","components/user/UserListComponent.jsx","components/user/EditUserApprovalComponent.jsx","components/user/EditUserComponent.jsx","api/SignUpService.js","components/user/RoleListComponent.jsx","api/LanguageService.js","components/language/AddLanguageComponent.jsx","components/user/AddRoleComponent.jsx","components/language/LanguageListComponent.jsx","components/language/EditLanguageComponent.jsx","api/DataSourceTypeService.js","components/datasourceType/AddDataSourceTypeComponent.jsx","components/datasourceType/DataSourceTypeListComponent.jsx","components/datasourceType/UpdateDataSourceTypeComponent.jsx","api/DataSourceService.js","components/dataSource/AddDataSource.jsx","components/dataSource/DataSourceListComponent.jsx","components/dataSource/UpdateDataSourceComponent.jsx","components/common/Sidebar.jsx","App.js","serviceWorker.js","index.js"],"names":["localStorage","getItem","basicAuthHeader","axios","interceptors","request","use","config","headers","authorization","AuthenticatedRoute","AuthenticationService","isUserLoggedIn","console","log","this","props","to","Component","$","validator","addMethod","value","element","optional","test","API_URL","username","password","post","LoginComponent","state","message","loginClicked","bind","registration","validate","ignore","rules","emailId","required","errorPlacement","error","insertAfter","className","name","id","match","params","type","onClick","val","valid","navigator","onLine","LoginService","authenticate","then","response","setItem","data","token","setupAxiosInterceptors","history","push","catch","setState","alert","WelcomeComponent","listUserApproval","ErrorComponent","get","countryId","stateId","json","put","RegistrationComponent","registerClicked","dataChange","firstName","lastName","email","nofreeemail","event","target","onSubmit","onChange","preventDefault","RegistrationService","saveRegistration","UserApprovalComponent","updateUserApproval","getUserApprovalList","border","map","key","registrationId","createdDate","userId","user","AddUserComponent","realms","languages","roles","submitClicked","cancelClicked","UserService","getRealmList","getLanguageList","getRoleList","phoneNumber","number","languageId","roleId","realmList","length","item","i","realmId","realmCode","languagesList","languageName","roleList","roleName","maxLength","minLength","multiple","realm","role","language","countryIds","addNewUser","UserListComponent","userList","editUser","unlockAccount","getUserList","style","marginLeft","align","lastLoginDate","faildAttempts","active","toString","e","stopPropagation","pathname","window","location","reload","EditUserApprovalComponent","submitUserApproval","status","readOnly","checked","saveApproval","EditUserComponent","_isMounted","updateClicked","RoleListComponent","AddLanguageComponent","updateFieldData","submitForm","lettersonly","maxlength","LanguageService","addLanguage","AddRoleComponent","businessFunctions","getBusinessFunctionList","businessFunctionsList","businessFunctionId","businessFunctionDesc","LanguageListComponent","langaugeList","editLanguage","addNewLanguage","EditLanguageComponent","updateForm","AddDataSourceTypeComponent","DataSourceTypeService","addDataSourceType","DataSourceListComponent","dataSourceList","editDataSourceType","addNewDataSourceType","getDataSourceTypeList","dataSourceType","dataSourceTypeId","label","engLabel","freLabel","spaLabel","porLabel","UpdateDataSourceTypeComponent","labelId","AddDataSource","dataSourceTypeList","getDataSourceTypeListActive","dataSource","DataSourceService","addDataSource","dataSourceTypes","editDataSource","addNewDataSource","getDataSourceList","dataSourceId","UpdateDataSourceComponent","Sidebar","basename","path","exact","component","DataSourceTypeListComponent","App","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ea29918e.chunk.js","sourcesContent":["import axios from 'axios'\n\nclass AuthenticationService {\n\n    isUserLoggedIn() {\n        //console.log(\"hi m here\");\n        let user = localStorage.getItem('token');\n        if (user === null) return false\n        return true\n    }\n\n    setupAxiosInterceptors() {\n        //console.log(\"Inside interceptor setup\");\n        let token = localStorage.getItem('token');\n        let basicAuthHeader = 'Bearer ' + token\n        //console.log(\"headers=\"+basicAuthHeader);\n        axios.interceptors.request.use(\n            // if (this.isUserLoggedIn) {\n            (config) => {\n                config.headers.authorization = basicAuthHeader\n                return config;\n            }\n            // }\n        )\n        \n    }\n}\n\n\nexport default new AuthenticationService()","import React, { Component } from \"react\";\nimport AuthenticationService from \"./AuthenticationService.js\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nclass AuthenticatedRoute extends Component {\n\n    render() {\n        if (AuthenticationService.isUserLoggedIn()) {\n            console.log(\"in user logged in\");\n            //console.log(AuthenticationService.isUserLoggedIn);\n\n            return <Route {...this.props} />\n        } else {\n            console.log(\"in else\")\n            return <Redirect to=\"/login\"/>\n        }\n    }\n\n}\n\nexport default AuthenticatedRoute","import $ from 'jquery';\nimport 'jquery-validation';\n\n\n\n$.validator.addMethod('emailId', function (value, element) {\n\n    return this.optional(element) || /^[\\w][\\w.-]{0,127}$/.test(value)\n  \n  }, \"Please enter a valid Docker image tag, like 'latest' or '1.10.0'\");\n\n  $.validator.addMethod( \"lettersonly\", function( value, element ) {\n    return this.optional( element ) || /^[a-z]+$/i.test( value );\n  }, \"Letters only please\" );","//export const API_URL = 'http://localhost:8081'\nexport const API_URL = 'https://fasp.altius.cc/FASP'\n\n","import axios from \"axios\"\nimport {API_URL} from '../Constants.js'\n\nclass LoginService {\n\n\n\n    authenticate(username, password) {\n        return axios.post(`${API_URL}/authenticate`,{username, password},{});\n    }\n}\n\nexport default new LoginService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport LoginService from '../../api/LoginService'\nimport CryptoJS from 'crypto-js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\n\n\nexport default class LoginComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.loginClicked = this.loginClicked.bind(this);\n        this.registration = this.registration.bind(this);\n    }\n\n    componentDidMount() {\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                emailId: {\n                    required: true\n                },\n                password: {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"login\">\n                <form name=\"form1\" id=\"form1\">\n                    <h3>Login</h3>\n                    <p>{this.props.match.params.message}</p>\n                    Username : <input type=\"text\" id=\"emailId\" name=\"emailId\" /><br></br><br></br>\n                    Password : <input type=\"password\" id=\"password\" name=\"password\" /><br></br><br></br>\n                    <button type=\"button\" onClick={this.loginClicked}>Login</button><br></br><br></br>\n                    <Online><button type=\"button\" onClick={this.registration}>Sign Up</button><br></br><br></br></Online>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n\n    loginClicked() {\n        var username = $(\"#emailId\").val();\n        var password = $(\"#password\").val();\n        if ($(\"#form1\").valid()) {\n            \n            if (AuthenticationService.isUserLoggedIn()===false  && navigator.onLine) {\n               \n                LoginService.authenticate(username, password)\n                    .then(response => {\n                        console.log(\"in then\")\n                        localStorage.setItem('token', response.data.token);\n                        AuthenticationService.setupAxiosInterceptors();\n                       \n                        this.props.history.push(`/welcome`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            } else {\n                if (AuthenticationService.isUserLoggedIn()) {\n                    console.log(\"Offline authentication\");\n                    // let user = localStorage.getItem('authenticatedUser');\n                    // var userJson = JSON.parse(user);\n                    // var bytes = CryptoJS.AES.decrypt(userJson.password, 'my-secret-key@123');\n                    // var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n                    // if (userJson.emailId === username) {\n                        // this.props.history.push(`/welcome`)\n                    // } else {\n                        // this.setState({\n                            // message: \"Invalid Credentials.\"\n                        // })\n                    // }\n                } else {\n                    alert(\"You must be Online for a first time login.\")\n                }\n            }\n        }\n    }\n\n    registration() {\n        this.props.history.push(`/registration`)\n    }\n}\n\n","import React, { Component } from \"react\";\n\nclass WelcomeComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.listUserApproval=this.listUserApproval.bind(this);\n    }\n\n    render() {\n        return (\n            <>\n                <h1>Welcome!!</h1>\n                <button type=\"button\" onClick={this.listUserApproval}>User Approval</button><br></br><br></br>\n            </>\n        );\n    }\n\n    listUserApproval() {\n        this.props.history.push(`/listUserApproval`)\n    }\n}\n\nexport default WelcomeComponent","import React from \"react\";\n\nfunction ErrorComponent() {\n    return (\n        <div>An Error occurred</div>\n    )\n}\n\nexport default ErrorComponent","import axios from \"axios\"\nimport {API_URL} from '../Constants.js' \n\nclass RegistrationService {\n    getCountryList() {\n        return axios.get(`${API_URL}/api/getCountryList`, {\n        });\n    }\n\n    getStateList(countryId) {\n        return axios.get(`${API_URL}/api/getStateList/${countryId}`, {\n        });\n    }\n\n    getCityList(countryId, stateId) {\n        return axios.get(`${API_URL}/api/getCityList/${countryId}/${stateId}`, {\n        });\n    }\n\n    saveRegistration(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`${API_URL}/api/saveRegistration/`, json, {\n        });\n    }\n\n    getUserApprovalList() {\n        return axios.get(`${API_URL}/api/getUserApprovalList`, {\n        });\n    }\n\n    saveApproval(json) {\n        return axios.put(`${API_URL}/api/saveApproval`, json, {\n        });\n    }\n}\n\nexport default new RegistrationService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport RegistrationService from \"../../api/RegistrationService.js\";\n\n\nexport default class RegistrationComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.registerClicked = this.registerClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n    }\n\n    componentDidMount() {\n        $.validator.addMethod('nofreeemail', function (value) {\n            return /^([\\w-.]+@(?!gmail\\.com)(?!yahoo\\.com)(?!hotmail\\.com)([\\w-]+.)+[\\w-]{2,4})?$/.test(value);\n        }, 'Free email addresses are not allowed.');\n\n\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                firstName: {\n                    required: true\n                },\n                lastName: {\n                    required: true\n                },\n                emailId: {\n                    required: true,\n                    email: true,\n                    nofreeemail:true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    dataChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"register\">\n                <form name=\"form1\" id=\"form1\" onSubmit={this.registerClicked}>\n                    <h3>Sign Up</h3>\n                    First Name : <input type=\"text\" id=\"firstName\" name=\"firstName\" onChange={this.dataChange} /><br></br><br></br>\n                    Last Name : <input type=\"text\" id=\"lastName\" name=\"lastName\" onChange={this.dataChange} /><br></br><br></br>\n                    Email Id : <input type=\"text\" id=\"emailId\" name=\"emailId\" onChange={this.dataChange} /><br></br><br></br>\n                    <button type=\"submit\">Sign Up</button><br></br><br></br>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n\n    registerClicked(event) {\n        event.preventDefault();\n        if (navigator.onLine) {\n            var json = this.state\n            if ($(\"#form1\").valid()) {\n                RegistrationService.saveRegistration(json)\n                    .then(response => {\n                        this.props.history.push(`/login/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n\n}\n\n","import React, { Component } from \"react\";\nimport RegistrationService from '../../api/RegistrationService.js';\n\nclass UserApprovalComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listUserApproval: []\n        }\n        this.updateUserApproval = this.updateUserApproval.bind(this);\n    }\n\n\n    componentDidMount() {\n        RegistrationService.getUserApprovalList()\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    listUserApproval: response.data\n                })\n            })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    render() {\n        return (\n            <>\n                <h1>List User Approval</h1>\n                <p>{this.props.match.params.message}</p>\n                <div className=\"container\">\n                    <table border=\"1\">\n                        <thead>\n                            <tr>\n                                <th>First Name</th>\n                                <th>Last Name</th>\n                                <th>Email Id</th>\n                                <th>Created date</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.listUserApproval.map(\n                                    listUserApproval =>\n                                        <tr key={listUserApproval.registrationId} onClick={() => this.updateUserApproval(listUserApproval.registrationId, listUserApproval.emailId)}>\n                                            <td>{listUserApproval.firstName}</td>\n                                            <td>{listUserApproval.lastName}</td>\n                                            <td>{listUserApproval.emailId}</td>\n                                            <td>{listUserApproval.createdDate}</td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n            </>\n        );\n    }\n\n    updateUserApproval(id, emailId) {\n        console.log(id);\n        console.log(emailId);\n        this.props.history.push(`/editUserApproval/${id}/${emailId}`)\n    }\n}\n\nexport default UserApprovalComponent","import axios from \"axios\";\nimport { API_URL } from '../Constants';\n\n\nclass UserService {\n    getLanguageList() {\n        return axios.get(`http://localhost:8081/api/getLanguageList`, {\n        });\n    }\n    getRoleList() {\n        return axios.get(`http://localhost:8081/api/getRoleList`, {\n        });\n    }\n    getBusinessFunctionList() {\n        return axios.get(`http://localhost:8081/api/getBusinessFunctionList`, {\n        });\n    }\n    getRealmList() {\n        return axios.get(`http://localhost:8081/api/getRealmList`, {\n        });\n    }\n    addNewUser(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`http://localhost:8081/api/addNewUser/`, json, {\n        });\n    }\n    getUserList() {\n        return axios.get(`http://localhost:8081/api/getUserList`, {\n        });\n    }\n    getUserByUserId(userId) {\n        return axios.get(`http://localhost:8081/api/getUserByUserId/${userId}`, {\n        });\n    }\n    editUser(json) {\n        return axios.put(`http://localhost:8081/api/editUser/`, json, {\n        });\n    }\n    unlockAccount(user) {\n        return axios.put(`http://localhost:8081/api/unlockAccount/`, user, {\n        });\n    }\n}\n\nexport default new UserService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { COUNTRY,EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, ADDRESS, BTN_SUBMIT, BTN_CANCEL, TITLE_ADD_USER, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class AddUserComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            realms: [],\n            languages: [],\n            roles: []\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getRealmList()\n            .then(response => {\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getLanguageList()\n            .then(response => {\n                this.setState({\n                    languages: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#userForm\").validate({\n            ignore: [],\n            rules: {\n                emailId: {\n                    required: true,\n                    email: true\n                },\n                phoneNumber: {\n                    required: true,\n                    number: true\n                },\n                languageId: {\n                    required: true\n                },\n                roleId: {\n                    required: true\n                },\n                username:{\n                    required:true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { realms } = this.state;\n        const { languages } = this.state;\n        const { roles } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>{item.realmCode}</option>\n                )\n            }, this);\n        let languagesList = languages.length > 0\n            && languages.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>{item.languageName}</option>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>{item.roleName}</option>\n                )\n            }, this);\n        return (\n            <div className=\"addUser\">\n                <form name=\"userForm\" id=\"userForm\">\n                    <h3>{TITLE_ADD_USER}</h3>\n                    {REALM} : <select id=\"realmId\" name=\"realmId\">\n                        <option value=\"\">-Nothing Selected-</option>\n                        {realmList}\n                    </select><br></br><br></br>\n                    {USERNAME} : <input type=\"text\" id=\"username\" name=\"username\" /><br></br><br></br>\n                    {EMAIL_ID} : <input type=\"text\" id=\"emailId\" name=\"emailId\" /><br></br><br></br>\n                    {PHONE_NO} : <input type=\"text\" id=\"phoneNumber\" name=\"phoneNumber\" maxLength=\"15\" minLength=\"4\" /><br></br><br></br>\n                    {ROLE} : <select id=\"roleId\" name=\"roleId\">\n                        <option value=\"\">-Nothing Selected-</option>\n                        {roleList}\n                    </select><br></br><br></br>\n                    {PREFERRED_LANGUAGE} : <select id=\"languageId\" name=\"languageId\">\n                        <option value=\"\">-Nothing Selected-</option>\n                        {languagesList}\n                    </select><br></br><br></br>\n                    {COUNTRY} : <select id=\"countryIds\" name=\"countryIds\" multiple={true}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {languagesList}\n                    </select><br></br><br></br>\n\n                    <button type=\"button\" onClick={this.submitClicked}>{BTN_SUBMIT}</button>\n                    <button type=\"button\" onClick={this.cancelClicked}>{BTN_CANCEL}</button><br></br><br></br>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n    submitClicked() {\n        console.log($(\"#countryIds\").val())\n        if (navigator.onLine) {\n            var json = {\n                username: $(\"#username\").val(),\n                emailId: $(\"#emailId\").val(),\n                phoneNumber: $(\"#phoneNumber\").val(),\n                realm: {\n                    realmId: $(\"#realmId\").val()\n                },\n                role: {\n                    roleId: $(\"#roleId\").val()\n                },\n                language: {\n                    languageId: $(\"#languageId\").val()\n                },\n                countryIds:$(\"#countryIds\").val()\n            }\n            if ($(\"#userForm\").valid()) {\n                UserService.addNewUser(json)\n                    .then(response => {\n                        this.props.history.push(`/userList/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/userList/` + \"Action Canceled\")\n    }\n\n}\n\n","export const TITLE_ADD_USER = 'Create new user'\nexport const TITLE_USER_LIST = 'User List'\nexport const TITLE_EDIT_USER = 'Update user - '\nexport const TITLE_ADD_ROLE = 'Add new role'\nexport const TITLE_ROLE_LIST = 'Role List'\nexport const TITLE_EDIT_ROLE = 'Update role - '\nexport const USERNAME = 'Username'\nexport const EMAIL_ID = 'Email Id'\nexport const PHONE_NO = 'Phone No'\nexport const ADDRESS = 'Address'\nexport const COUNTRY = 'Country'\nexport const REALM = 'Realm'\nexport const STATE = 'State/Province'\nexport const CITY = 'City'\nexport const ROLE = 'Role'\nexport const ACTIVE = 'Status'\nexport const LAST_LOGIN_DATE = 'Last Login Date'\nexport const FAILED_ATTEMPTS = 'Failed Attempts'\nexport const PREFERRED_LANGUAGE = 'Preferred Language'\nexport const BTN_SUBMIT = 'Submit'\nexport const BTN_CANCEL = 'Cancel'\nexport const BTN_UPDATE = 'Update'\nexport const BTN_EDIT = 'Update'\nexport const BTN_FAILED_ATTEMPTS = 'Unlock account'\nexport const LANGUAGE_NAME = 'Language name'\nexport const HEALTH_AREA = 'Health Area'\nexport const ORGANISATION = 'Organisation'\nexport const REGION = 'Region'\nexport const ROLE_NAME = 'Role Name'\nexport const ROLE_ID = 'Role Id'\nexport const BUSINESS_FUNCTION = 'Business function'\nexport const CAN_CREATE_ROLE = 'Can create role'\nexport const IS_ACTIVE = 'Active'\nexport const ADD_LANGUAGE = 'Add Language'\nexport const UPDATE_LANGUAGE = 'Update Language'\nexport const SUBMIT_BUTTON = 'Submit'\nexport const UPDATE_BUTTON = 'Update'\nexport const ADD_NEW_LANGUAGE_TITLE = 'Add New Language'\nexport const ADD_DATASOURCE_TYPE = 'Add Data Source Type'\nexport const DATASOURCE_TYPE_NAME_EN = 'Data source type name (English)'\nexport const DATASOURCE_TYPE_NAME_FR = 'Data source  type name (French)'\nexport const DATASOURCE_TYPE_NAME_SP = 'Data source type  name (Spanish)'\nexport const DATASOURCE_TYPE_NAME_PO = 'Data source type name (Portugese)'\nexport const DATA_SOURCE_TYPE_LIST = 'Data Source Type List'\nexport const DATA_SOURCE_TYPE_ACTIVE = 'Active'\nexport const UPDATE_DATA_SOURCE_TYPE = \"Update Data Source Type\"\nexport const ADD_NEW_DATA_SOURCE_TYPE = \"Add New Data Source Type\"\nexport const ADD_DATASOURCE = 'Add Data Source'\nexport const DATASOURCE_NAME_EN = 'Data source name (English)'\nexport const DATASOURCE_NAME_FR = 'Data source name (French)'\nexport const DATASOURCE_NAME_SP = 'Data source name (Spanish)'\nexport const DATASOURCE_NAME_PO = 'Data source name (Portugese)'\nexport const DATASOURCE_ACTIVE = 'Active'\nexport const DATA_SOURCE_LIST = 'Data Source  List'\nexport const SELECT_DATA_SOURCE_TYPE='Select Data Source Type'\nexport const ADD_NEW_DATA_SOURCE = \"Add New Data Source\"\n\n\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, TITLE_USER_LIST, TITLE_ADD_USER, ACTIVE, LAST_LOGIN_DATE, FAILED_ATTEMPTS, BTN_EDIT, BTN_FAILED_ATTEMPTS, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\nconst cache = {}\nexport default class UserListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userList: []\n        }\n        this.editUser = this.editUser.bind(this);\n        this.unlockAccount = this.unlockAccount.bind(this);\n        this.addNewUser = this.addNewUser.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getUserList()\n            .then(response => {\n                this.setState({\n                    userList: response.data\n                })\n            })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n    render() {\n        return (\n            <div className=\"userList\">\n                <p>{this.props.match.params.message}</p>\n                <h1>{TITLE_USER_LIST}</h1>\n                <div className=\"container\">\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewUser}>{TITLE_ADD_USER}</button><br /><br />\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{REALM}</th>\n                                <th>{USERNAME}</th>\n                                <th>{EMAIL_ID}</th>\n                                <th>{PHONE_NO}</th>\n                                <th>{ROLE}</th>\n                                <th>{PREFERRED_LANGUAGE}</th>\n                                <th>{LAST_LOGIN_DATE}</th>\n                                <th>{FAILED_ATTEMPTS}</th>\n                                <th>{ACTIVE}</th>\n                                <th>{BTN_EDIT}</th>\n                                <th>{BTN_FAILED_ATTEMPTS}</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.userList.map(\n                                    user =>\n                                        // <tr key={user.userId} onClick={() => this.editUser(user.userId)}>\n                                        <tr key={user.userId} onClick={() => this.editUser(user)}>\n                                            <td>{user.realm.realmCode}</td>\n                                            <td>{user.username}</td>\n                                            <td>{user.emailId}</td>\n                                            <td>{user.phoneNumber}</td>\n                                            <td>{user.role.roleName}</td>\n                                            <td>{user.language.languageName}</td>\n                                            <td>{user.lastLoginDate}</td>\n                                            <td>{user.faildAttempts}</td>\n                                            <td>{user.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}\n                                            </td>\n                                            <td><button type=\"button\" onClick={() => this.editUser(user)}>{BTN_EDIT}</button></td>\n                                            <td><button type=\"button\" onClick={(e) => { e.stopPropagation(); this.unlockAccount(user) }}>{BTN_FAILED_ATTEMPTS}</button></td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n            </div>\n        )\n    }\n    editUser(user) {\n        this.props.history.push({\n            pathname: \"/editUser\",\n            state: { user: user }\n        });\n    }\n    unlockAccount(user) {\n        if (navigator.onLine) {\n            UserService.unlockAccount(user)\n                .then(response => {\n                    this.props.history.push(`/userList/${response.data.message}`)\n                    window.location.reload();\n                })\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.response.data.message\n                                })\n                                break\n                        }\n                    }\n                );\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    addNewUser() {\n        if (navigator.onLine) {\n            this.props.history.push(`/addUser`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n}\n\n","import React, { Component } from 'react';\nimport RegistrationService from '../../api/RegistrationService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\n\nexport default class EditUserApprovalComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.dataChange = this.dataChange.bind(this);\n        this.submitUserApproval = this.submitUserApproval.bind(this);\n        this.state = {\n            registrationId: this.props.match.params.registrationId,\n            status:true\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    dataChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"editUserApproval\">\n                <form name=\"form1\" id=\"form1\" onSubmit={this.submitUserApproval}>\n                    <h3>User Approval</h3>\n                    <input type=\"hidden\" id=\"registrationId\" name=\"registrationId\" value={this.props.match.params.registrationId}></input>\n                    Email Id : <input type=\"text\" id=\"emailId\" name=\"emailId\" readOnly value={this.props.match.params.emailId} /><br></br><br></br>\n                    Status:\n                    <input type=\"radio\" id=\"status\" name=\"status\" value=\"TRUE\" onChange={this.dataChange} checked/> Approve\n                    <input type=\"radio\" id=\"status\" name=\"status\" onChange={this.dataChange} value=\"FALSE\" /> Reject\n                    <br></br><br></br>\n                    Notes : <textarea id=\"notes\" name=\"notes\" onChange={this.dataChange}></textarea><br></br><br></br>\n                    <button type=\"submit\">Submit</button><br></br><br></br>\n                </form>\n            </div>\n        )\n    }\n\n    submitUserApproval(event) {\n        event.preventDefault();\n        if (navigator.onLine) {\n            if($(\"#form1\").valid()){\n            var json = this.state\n            console.log(json);\n            RegistrationService.saveApproval(json)\n                .then(response => {\n                    this.props.history.push(`/listUserApproval/Approval updated successfully`)\n                })\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.response.data.message\n                                })\n                                break\n                        }\n                    }\n                );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport SignUpService from \"../../api/SignUpService\";\nimport UserService from \"../../api/UserService\";\nimport { EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, ACTIVE, BTN_UPDATE, BTN_CANCEL, TITLE_EDIT_USER, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class EditUserComponent extends Component {\n    _isMounted = false;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            realms: [],\n            languages: [],\n            roles: [],\n            user: '',\n            'user.active': true\n        }\n        this.updateClicked = this.updateClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n\n    }\n    dataChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            user: this.props.location.state.user\n        });\n        UserService.getRealmList()\n            .then(response => {\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getLanguageList()\n            .then(response => {\n                this.setState({\n                    languages: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#userForm\").validate({\n            ignore: [],\n            rules: {\n                'user.emailId': {\n                    required: true,\n                    email: true\n                },\n                'user.phoneNumber': {\n                    required: true,\n                    number: true\n                },\n                'username': {\n                    required: true\n                },\n                'user.language.languageId': {\n                    required: true\n                },\n                'user.role.roleId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    dataChange(event) {\n        let { user } = this.state\n        if (event.target.name === \"user.realm.realmId\") {\n            user.realm.realmId = event.target.value\n        }\n        else if (event.target.name === \"user.realm.realmId\") {\n            user.realm.realmId = event.target.value\n        }\n        else if (event.target.name === \"user.role.roleId\") {\n            user.role.roleId = event.target.value\n        }\n        else if (event.target.name === \"user.language.languageId\") {\n            user.language.languageId = event.target.value\n        }\n        else if (event.target.name === \"user.emailId\") {\n            user.emailId = event.target.value\n        }\n        else if (event.target.name === \"user.username\") {\n            user.username = event.target.value\n        }\n        else if (event.target.name === \"user.phoneNumber\") {\n            user.phoneNumber = event.target.value\n        }\n        else if (event.target.name === \"user.active\") {\n            user.active = event.target.id === \"user.active2\" ? false : true\n        }\n\n        this.setState({\n            user\n        }, (\n        ) => {\n            // console.log(\"state after update---\",this.state.user)\n        })\n    }\n\n    render() {\n        const { realms } = this.state;\n        const { languages } = this.state;\n        const { roles } = this.state;\n        const { user } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>{item.realmCode}</option>\n                )\n            }, this);\n        let languagesList = languages.length > 0\n            && languages.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>{item.languageName}</option>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>{item.roleName}</option>\n                )\n            }, this);\n        return (\n            <div className=\"addUser\">\n                <form name=\"userForm\" id=\"userForm\">\n                    <h3>{TITLE_EDIT_USER}{this.state.user.userId}</h3>\n                    {REALM} : <select id=\"user.realm.realmId\" name=\"user.realm.realmId\" value={this.state.user.realm ? this.state.user.realm.realmId : ''} onChange={this.dataChange}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {realmList}\n                    </select><br></br><br></br>\n                    {USERNAME} : <input type=\"text\" id=\"user.username\" name=\"user.username\" value={this.state.user.username} onChange={this.dataChange} /><br></br><br></br>\n                    {EMAIL_ID} : <input type=\"text\" id=\"user.emailId\" name=\"user.emailId\" value={this.state.user.emailId} onChange={this.dataChange} /><br></br><br></br>\n                    {PHONE_NO} : <input type=\"text\" id=\"user.phoneNumber\" name=\"user.phoneNumber\" value={this.state.user.phoneNumber} onChange={this.dataChange} maxLength=\"15\" minLength=\"4\" /><br></br><br></br>\n                    {ROLE} : <select id=\"user.role.roleId\" name=\"user.role.roleId\" value={this.state.user.role ? this.state.user.role.roleId : ''} onChange={this.dataChange}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {roleList}\n                    </select><br></br><br></br>\n                    {PREFERRED_LANGUAGE} : <select id=\"user.language.languageId\" name=\"user.language.languageId\" value={this.state.user.language ? this.state.user.language.languageId : ''} onChange={this.dataChange}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {languagesList}\n                    </select><br></br><br></br>\n                    {ACTIVE}:\n                    <input type=\"radio\" id=\"user.active1\" name=\"user.active\" value={true} checked={this.state.user.active === true} onChange={this.dataChange} /> Active\n                    <input type=\"radio\" id=\"user.active2\" name=\"user.active\" value={false} checked={this.state.user.active === false} onChange={this.dataChange} /> Disabled\n                    <br></br><br></br>\n\n                    <button type=\"button\" onClick={this.updateClicked}>{BTN_UPDATE}</button>\n                    <button type=\"button\" onClick={this.cancelClicked}>{BTN_CANCEL}</button><br></br><br></br>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n    updateClicked() {\n        if (navigator.onLine) {\n            var json = this.state.user;\n            if ($(\"#userForm\").valid()) {\n                UserService.editUser(json)\n                    .then(response => {\n                        this.props.history.push(`/userList/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/userList/` + \"Action Canceled\")\n    }\n\n}\n\n","import axios from \"axios\"\n\nclass SignUpService {\n    getCountryList() {\n        return axios.get(`http://localhost:8081/api/getCountryList`, {\n        });\n    }\n\n    getStateListByCountryId(countryId) {\n        return axios.get(`http://localhost:8081/api/getStateListByCountryId/${countryId}`, {\n        });\n    }\n    getStateList() {\n        return axios.get(`http://localhost:8081/api/getStateList`, {\n        });\n    }\n\n    getCityListByStateIdAndCountryId(countryId, stateId) {\n        return axios.get(`http://localhost:8081/api/getCityList/${countryId}/${stateId}`, {\n        });\n    }\n    getCityList() {\n        return axios.get(`http://localhost:8081/api/getCityList`, {\n        });\n    }\n\n    saveRegistration(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`http://localhost:8081/api/saveRegistration/`, json, {\n        });\n    }\n}\n\nexport default new SignUpService()","import React, { Component } from 'react';\nimport UserService from \"../../api/UserService.js\";\n\n\nexport default class RoleListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            roles: [],\n            message: \"Initial message\"\n        }\n    }\n\n    componentDidMount() {\n        console.log(\"Going to call axios setup\");\n        \n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    render() {\n        return (\n            <>\n                <div>Hi this is the Role list page</div>\n                <table border=\"1\" align=\"center\">\n                    <thead>\n                        <tr>\n                            <th>Role Id</th>\n                            <th>Role name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.roles.map(role =>\n                                <tr key={role.roleId}>\n                                    <td>{role.roleId}</td>\n                                    <td>{role.roleName}</td>\n                                </tr>)\n                        }\n                    </tbody>\n                </table>\n                <br />\n                <h3>{this.state.message}</h3>\n            </>\n        );\n    }\n\n}","import axios from \"axios\";\nimport {API_URL} from '../Constants.js'\nclass LanguageService{\n\naddLanguage(json){\n    return axios.put(`${API_URL}/api/addLanguage/`, json, {\n    });\n}\n\ngetLanguageList() {\n    return axios.get(`${API_URL}/api/getLanguageListAll/`, {\n    });\n}\neditLanguage(json) {\n    return axios.put(`${API_URL}/api/editLanguage/`, json, {\n    });\n}\n\n}\n\nexport default new LanguageService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport * as myConst from '../../Labels.js';\nimport LanguageService from '../../api/LanguageService.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nclass AddLanguageComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            languageName: ''\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n    }\n    updateFieldData(event) {\n        this.setState(\n            {\n                [event.target.name]: event.target.value\n            }\n        )\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        $(\"#languageForm\").validate({\n            ignore: [],\n            rules: {\n                languageName: {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 100\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    submitForm(event) {\n        if (navigator.onLine) {\n            console.log(\"user in online-----\");\n            if ($(\"#languageForm\").valid()) {\n                LanguageService.addLanguage(this.state).then(response => {\n                    this.props.history.push(`/languageList/${response.data.message}`)\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n        } else {\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <h3>{myConst.ADD_LANGUAGE}</h3>\n                <form name=\"languageForm\" id=\"languageForm\">\n                    <div>\n                        <label>{myConst.LANGUAGE_NAME}:-</label>\n                        <input type=\"text\" name=\"languageName\" value={this.state.languageName} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n        );\n    }\n}\nexport default AddLanguageComponent;","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { ROLE_NAME,ROLE_ID,BUSINESS_FUNCTION,CAN_CREATE_ROLE,TITLE_ADD_ROLE,BTN_SUBMIT, BTN_CANCEL} from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class AddRoleComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            businessFunctions: [],\n            roles: []\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getBusinessFunctionList()\n            .then(response => {\n                this.setState({\n                    businessFunctions: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n            UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n       \n\n        $(\"#userForm\").validate({\n            ignore: [],\n            rules: {\n                languageId: {\n                    required: true\n                },\n                roleId: {\n                    required: true\n                },\n                username:{\n                    required:true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { businessFunctions } = this.state;\n        const { roles } = this.state;\n\n        let businessFunctionsList = businessFunctions.length > 0\n            && businessFunctions.map((item, i) => {\n                return (\n                    <option key={i} value={item.businessFunctionId}>{item.businessFunctionDesc}</option>\n                )\n            }, this);\n            let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>{item.roleName}</option>\n                )\n            }, this);\n        return (\n            <div className=\"addRole\">\n                <form name=\"roleForm\" id=\"roleForm\">\n                    <h3>{TITLE_ADD_ROLE}</h3>\n                    {ROLE_NAME} : <input type=\"text\" id=\"username\" name=\"username\" /><br></br><br></br>\n                    {ROLE_ID} : <input type=\"text\" id=\"emailId\" name=\"emailId\" /><br></br><br></br>\n                    {BUSINESS_FUNCTION} : <select id=\"businessFunctionIds\" name=\"businessFunctionIds\" multiple={true}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {businessFunctionsList}\n                    </select><br></br><br></br>\n                    {CAN_CREATE_ROLE} : <select id=\"canCreateRoleIds\" name=\"canCreateRoleIds\" multiple={true}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {roleList}\n                    </select><br></br><br></br>\n\n                    <button type=\"button\" onClick={this.submitClicked}>{BTN_SUBMIT}</button>\n                    <button type=\"button\" onClick={this.cancelClicked}>{BTN_CANCEL}</button><br></br><br></br>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n    submitClicked() {\n        // console.log($(\"#countryIds\").val())\n        if (navigator.onLine) {\n            var json = {\n                username: $(\"#username\").val(),\n                emailId: $(\"#emailId\").val(),\n                phoneNumber: $(\"#phoneNumber\").val(),\n                realm: {\n                    realmId: $(\"#realmId\").val()\n                },\n                role: {\n                    roleId: $(\"#roleId\").val()\n                },\n                language: {\n                    languageId: $(\"#languageId\").val()\n                },\n                countryIds:$(\"#countryIds\").val()\n            }\n            if ($(\"#userForm\").valid()) {\n                UserService.addNewUser(json)\n                    .then(response => {\n                        this.props.history.push(`/userList/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/userList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport LanguageService from '../../api/LanguageService.js'\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\n\nexport default class LanguageListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            langaugeList: []\n        }\n        this.editLanguage = this.editLanguage.bind(this);\n        this.addNewLanguage = this.addNewLanguage.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        LanguageService.getLanguageList()\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    langaugeList: response.data\n                })\n            })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n    }\n\n    editLanguage(language) {\n        this.props.history.push({\n            pathname: \"/editLanguage\",\n            state: { language: language }\n        });\n    }\n\n    addNewLanguage(){\n        if (navigator.onLine) {\n            this.props.history.push(`/addLanguage`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n    }\n\n    render() {\n        return (\n            <>\n            <div>\n             <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewLanguage}>{myConst.ADD_NEW_LANGUAGE_TITLE}</button><br /><br />\n            </div>  \n              <div className=\"langaugeList\">\n\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.LANGUAGE_NAME}</th>\n                                <th>{myConst.IS_ACTIVE}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.langaugeList.map(language =>\n\n                                    <tr key={language.languageId} onClick={() => this.editLanguage(language)}>\n                                        <td>{language.languageName}</td>\n                                        <td>{language.active.toString()}</td>\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </>\n        );\n    }\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport LanguageService from '../../api/LanguageService.js'\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\n\nexport default class EditLanguageComponent extends Component {\n\n    constructor(props) {\n\n        super(props);\n        this.state = { language: '' }\n\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n    }\n    componentDidMount() {\n       AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            language: this.props.location.state.language\n        });\n        console.log(this.state);\n        $(\"#updateLanguageForm\").validate({\n            ignore: [],\n            rules: {\n                'language.languageName': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 100\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    updateFieldData(event) {\n\n        let { language } = this.state\n\n        if (event.target.name === \"language.languageName\") {\n            console.log(\"inside if\")\n            language.languageName = event.target.value\n        } else if (event.target.name === \"language.active\") {\n            language.active = event.target.id === \"language.active2\" ? false : true\n        }\n\n        this.setState(\n            {\n                language\n            }\n        );\n    }\n\n    updateForm() {\n        if (navigator.onLine) {\n            if ($(\"#updateLanguageForm\").valid()) {\n\n                LanguageService.editLanguage(this.state.language).then(response => {\n                    this.props.history.push(`/languageList/${response.data.message}`)\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n\n            }\n        } else { alert(\"To perform this action you must be online.\"); }\n    }\n\n    render() {\n\n        return (\n            <>\n                <h3>{myConst.UPDATE_LANGUAGE}</h3>\n                <form name=\"updatyeLanguageForm\" id=\"updateLanguageForm\">\n                    <div>\n                        <label>{myConst.LANGUAGE_NAME}:-</label>\n                        <input type=\"text\" name=\"language.languageName\" value={this.state.language.languageName} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <div>\n                            {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"language.active1\" name=\"language.active\" value={true} checked={this.state.language.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"language.active2\" name=\"language.active\" value={false} checked={this.state.language.active === false} onChange={this.updateFieldData} /> Disabled\n        </div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n\n        );\n    }\n}","import axios from \"axios\";\nimport {API_URL} from '../Constants.js';\n\nclass DataSourceTypeService{\n\naddDataSourceType(json){\nreturn axios.put(`${API_URL}/api/addDataSourceType/`,json,{}\n);\n}\n\ngetDataSourceTypeList() {\n    return axios.get(`${API_URL}/api/getDataSourceTypeList/`, {\n    });\n}\n\ngetDataSourceTypeListActive() {\n    return axios.get(`${API_URL}/api/getDataSourceTypeListActive/`, {\n    });\n}\n\neditDataSourceType(json) {\n    return axios.put(`${API_URL}/api/editDataSourceType/`, json, {\n    });\n}\n}\nexport default new DataSourceTypeService();","import React,{Component} from 'react';\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport DataSourceTypeService from '../../api/DataSourceTypeService.js'\n\nexport default class AddDataSourceTypeComponent extends Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            \n         }\n\n         this.updateFieldData=this.updateFieldData.bind(this);\n         this.submitForm=this.submitForm.bind(this);\n\n    }\n\n    componentDidMount(){\n        AuthenticationService.setupAxiosInterceptors();\n        $(\"#dataSourceTypeForm\").validate({\n            ignore: [],\n            rules: {\n                'engLabel': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'freLabel': {\n                   \n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'spaLabel': {\n                    \n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'porLabel': {\n                    \n                    lettersonly: true,\n                    maxlength: 255\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n\n    }\n\n    updateFieldData(event){\n       //console.log(event.target.name); \n        this.setState(\n           {\n                [event.target.name]: event.target.value      \n            }\n        )\n\n    }\n\n    submitForm(){\n        if (navigator.onLine) {\n            if ($(\"#dataSourceTypeForm\").valid()) {\n                console.log(this.state);\n                DataSourceTypeService.addDataSourceType(this.state).then(response => {\n                    this.props.history.push(`/dataSourceTypeList/${response.data.message}`)\n                    console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n               \n\n\n            }\n        }else{\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\nrender(){\n        return(\n         <>\n        <h3>{myConst.ADD_DATASOURCE_TYPE}</h3>\n                <form name=\"dataSourceTypeForm\" id=\"dataSourceTypeForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"engLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"freLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"spaLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"porLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n        </>);\n    }\n}","import React, { Component } from 'react';\nimport DataSourceTypeService from '../../api/DataSourceTypeService'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\n\nexport default class DataSourceListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSourceList: []\n\n        }\n\n        this.editDataSourceType = this.editDataSourceType.bind(this);\n        this.addNewDataSourceType = this.addNewDataSourceType.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        DataSourceTypeService.getDataSourceTypeList().then(response => {\n            //console.log(response.data)\n            this.setState({\n                dataSourceList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    editDataSourceType(dataSourceType) {\n        this.props.history.push({\n            pathname: \"/editDataSourceType\",\n            state: { dataSourceType: dataSourceType }\n        });\n\n    }\n\n    addNewDataSourceType() {\n\n        if (navigator.onLine) {\n            this.props.history.push(`/addDataSourceType`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n\n    }\n    render() {\n        return (\n            <>\n\n\n                <div>\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewDataSourceType}>{myConst.ADD_NEW_DATA_SOURCE_TYPE}</button><br /><br />\n                </div>\n\n                <div className=\"dataSourceTypeList\">\n\n                    <h1>{myConst.DATA_SOURCE_TYPE_LIST}</h1>\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_EN}</th>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_FR}</th>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_SP}</th>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_PO}</th>\n                                <th>{myConst.DATA_SOURCE_TYPE_ACTIVE}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.dataSourceList.map(dataSourceType =>\n\n                                    <tr key={dataSourceType.dataSourceTypeId} onClick={() => this.editDataSourceType(dataSourceType)}>\n                                        <td>{dataSourceType.label.engLabel}</td>\n                                        <td>{dataSourceType.label.freLabel}</td>\n                                        <td>{dataSourceType.label.spaLabel}</td>\n                                        <td>{dataSourceType.label.porLabel}</td>\n                                        <td>{dataSourceType.active.toString()}</td>\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n            </>\n        );\n    }\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport DataSourceTypeService from '../../api/DataSourceTypeService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class UpdateDataSourceTypeComponent extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSourceType:\n            {\n                active: '',\n                labelId: '',\n                label: {\n                    engLabel: '',\n                    spaLabel: '',\n                    freLabel: '',\n                    porLabel: ''\n                }\n            }\n        }\n\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        console.log(this.props.location.state.dataSourceType);\n        this.setState({\n            dataSourceType: this.props.location.state.dataSourceType\n        });\n\n\n        $(\"#updatyeDataSourceTypeForm\").validate({\n            ignore: [],\n            rules: {\n                'dataSourceType.label.engLabel': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSourceType.label.freLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSourceType.label.spaLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSourceType.label.porLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n\n    updateFieldData(event) {\n        let { dataSourceType } = this.state\n\n        if (event.target.name === \"dataSourceType.label.engLabel\") {\n            console.log(\"inside if\")\n            dataSourceType.label.engLabel = event.target.value\n        } if (event.target.name === \"dataSourceType.label.freLabel\") {\n            console.log(\"inside if\")\n            dataSourceType.label.freLabel = event.target.value\n        } if (event.target.name === \"dataSourceType.label.spaLabel\") {\n            console.log(\"inside if\")\n            dataSourceType.label.spaLabel = event.target.value\n        } if (event.target.name === \"dataSourceType.label.porLabel\") {\n            console.log(\"inside if\")\n            dataSourceType.label.porLabel = event.target.value\n        } else if (event.target.name === \"dataSourceType.active\") {\n            dataSourceType.active = event.target.id === \"dataSourceType.active2\" ? false : true\n        }\n\n\n        this.setState(\n            {\n                dataSourceType\n            }\n        )\n    }\n\n    updateForm() {\n\n        if (navigator.onLine) {\n\n            if ($(\"#updatyeDataSourceTypeForm\").valid()) {\n\n                DataSourceTypeService.editDataSourceType(this.state.dataSourceType).then(response => {\n                    //this.props.history.push(`/languageList/${response.data.message}`)\n                    this.props.history.push(`/dataSourceTypeList/${response.data.message}`)\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n\n            }\n        }else{\n\n            alert(\"To perform this action you must be online.\");\n        }\n\n    }\n\n    render() {\n\n        return (\n            <>\n\n                <h3>{myConst.UPDATE_DATA_SOURCE_TYPE}</h3>\n                <form name=\"updatyeDataSourceTypeForm\" id=\"updatyeDataSourceTypeForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.engLabel\" value={this.state.dataSourceType.label.engLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.freLabel\" value={this.state.dataSourceType.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.spaLabel\" value={this.state.dataSourceType.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.porLabel\" value={this.state.dataSourceType.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"dataSourceType.active1\" name=\"dataSourceType.active\" value={true} checked={this.state.dataSourceType.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"dataSourceType.active2\" name=\"dataSourceType.active\" value={false} checked={this.state.dataSourceType.active === false} onChange={this.updateFieldData} /> Disabled\n                     </div>\n                    <input type=\"hidden\" name=\"dataSourceType.labelId\" value={this.state.dataSourceType.labelId} />\n                    <div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                    </div>\n                </form>\n\n\n\n            </>\n        );\n    }\n\n\n}\n\n","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass DataSourceService {\n\n    addDataSource(json) {\n        return axios.put(`${API_URL}/api/addDataSource/`, json, {}\n        );\n    }\n\n    getDataSourceList() {\n        return axios.get(`${API_URL}/api/getDataSourceList/`, {\n        });\n    }\n\n    editDataSource(json) {\n        return axios.put(`${API_URL}/api/editDataSource/`,json,{}\n            );\n        }\n    \n}\nexport default new DataSourceService();","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport DataSourceService from '../../api/DataSourceService';\nimport DataSourceTypeService from '../../api/DataSourceTypeService';\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class AddDataSource extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            label: {\n                engLabel: '',\n                freLabel: '',\n                spaLabel: '',\n                porLabel: ''\n            },\n            dataSourceType: {\n                dataSourceTypeId: ''\n            },\n            dataSourceTypeList: []\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        DataSourceTypeService.getDataSourceTypeListActive().then(response => {\n            //console.log(response.data)\n            this.setState({\n                dataSourceTypeList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n        $(\"#dataSourceForm\").validate({\n            ignore: [],\n            rules: {\n                'label.engLabel': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'label.freLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'label.spaLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'label.porLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSourceType.dataSourceTypeId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    updateFieldData(event) {\n        if (event.target.name === \"label.engLabel\") {\n            //console.log(\"inside if\")\n            this.state.label.engLabel = event.target.value\n        }\n        if (event.target.name === \"label.freLabel\") {\n            //console.log(\"inside if\")\n            this.state.label.freLabel = event.target.value\n        } if (event.target.name === \"label.spaLabel\") {\n            //console.log(\"inside if\")\n            this.state.label.spaLabel = event.target.value\n        } if (event.target.name === \"label.porLabel\") {\n            //console.log(\"inside if\")\n            this.state.label.porLabel = event.target.value\n        }\n        else if (event.target.name === \"dataSourceType.dataSourceTypeId\") {\n            this.state.dataSourceType.dataSourceTypeId = event.target.value\n        }\n\n        let { dataSource } = this.state\n        this.setState(\n            {\n                dataSource\n            }\n        )\n\n\n    }\n\n    submitForm() {\n\n        if (navigator.onLine) {\n            if ($(\"#dataSourceForm\").valid()) {\n                console.log(this.state);\n                delete this.state[\"dataSourceTypeList\"];\n                DataSourceService.addDataSource(this.state).then(response => {\n                    this.props.history.push(`/dataSourceList/${response.data.message}`)\n                    //console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n               \n\n            }\n        } else {\n            alert(\"To perform this action you must be online.\");\n\n        }\n\n    }\n\n\n    render() {\n        const { dataSourceTypeList } = this.state;\n        let dataSourceTypes = dataSourceTypeList.length > 0\n            && dataSourceTypeList.map((item, i) => {\n                return (\n                    <option key={i} value={item.dataSourceTypeId}>{item.label.engLabel}</option>\n                )\n            }, this);\n        return (\n            <>\n\n                <h3>{myConst.ADD_DATASOURCE}</h3>\n                <form name=\"dataSourceForm\" id=\"dataSourceForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"label.engLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"label.freLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"label.spaLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"label.porLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n\n                    <div>\n                        {myConst.SELECT_DATA_SOURCE_TYPE} : <select id=\"dataSourceTypeId\" name=\"dataSourceType.dataSourceTypeId\" onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {dataSourceTypes}\n                        </select>\n                    </div>\n                    <br></br>\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n        );\n\n    }\n\n}","import React,{Compoent, Component} from 'react';\nimport DataSourceService from '../../api/DataSourceService';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\n\n\nexport default class DataSourceListComponent extends Component{\n\nconstructor(props){\nsuper(props);\nthis.state={\ndataSourceList:[]\n\n}\nthis.editDataSource=this.editDataSource.bind(this);\nthis.addNewDataSource=this.addNewDataSource.bind(this);\n}\n\ncomponentDidMount() {\n    AuthenticationService.setupAxiosInterceptors();\n    DataSourceService.getDataSourceList().then(response => {        \n        this.setState({\n            dataSourceList: response.data\n        })\n    })\n        .catch(\n            error => {\n                switch (error.message) {\n                    case \"Network Error\":\n                        this.setState({\n                            message: error.message\n                        })\n                        break\n                    default:\n                        this.setState({\n                            message: error.message\n                        })\n                        break\n                }\n            }\n        );\n}\n\neditDataSource(dataSource) {\n    this.props.history.push({\n        pathname: \"/editDataSource\",\n        state: { dataSource: dataSource }\n    });\n\n}\n\naddNewDataSource(){\n\n    if (navigator.onLine) {\n        this.props.history.push(`/addDataSource`)\n    } else {\n        alert(\"You must be Online.\")\n    }\n\n}\n\nrender() {\n    return (\n        <>\n\n\n            <div>\n                <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewDataSource}>{myConst.ADD_NEW_DATA_SOURCE}</button><br /><br />\n            </div>\n\n            <div className=\"dataSourceList\">\n\n                <h1>{myConst.DATA_SOURCE_LIST}</h1>\n                <table border=\"1\" align=\"center\">\n                    <thead>\n                        <tr>\n                            <th>{myConst.DATASOURCE_NAME_EN}</th>\n                            <th>{myConst.DATASOURCE_NAME_FR}</th>\n                            <th>{myConst.DATASOURCE_NAME_SP}</th>\n                            <th>{myConst.DATASOURCE_NAME_PO}</th>\n                            <th>{myConst.DATASOURCE_ACTIVE}</th>\n\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.dataSourceList.map(dataSource =>\n\n                                <tr key={dataSource.dataSourceId} onClick={() => this.editDataSource(dataSource)}>\n                                    <td>{dataSource.label.engLabel}</td>\n                                    <td>{dataSource.label.freLabel}</td>\n                                    <td>{dataSource.label.spaLabel}</td>\n                                    <td>{dataSource.label.porLabel}</td>\n                                    <td>{dataSource.active.toString()}</td>\n                                </tr>\n                            )\n\n                        }\n                    </tbody>\n                </table>\n            </div>\n\n        </>\n    );\n}\n\n}","import React, { Component } from 'react';\nimport DataSourceTypeService from '../../api/DataSourceTypeService';\nimport DataSourceService from '../../api/DataSourceService';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class UpdateDataSourceComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            dataSource: {\n                active: '',\n                dataSourceId: '',\n                label: {\n                    engLabel: '',\n                    spaLabel: '',\n                    freLabel: '',\n                    porLabel: '',\n                    labelId: '',\n                },\n                dataSourceType: {\n                    dataSourceTypeId: ''\n                }\n            },\n            dataSourceTypeList: []\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n    }\n\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            dataSource: this.props.location.state.dataSource\n        });\n\n        DataSourceTypeService.getDataSourceTypeListActive().then(response => {\n            //console.log(response.data)\n            this.setState({\n                dataSourceTypeList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#updatyeDataSourceForm\").validate({\n            ignore: [],\n            rules: {\n                'dataSource.label.engLabel': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSource.label.freLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSource.label.spaLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSource.label.porLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSource.dataSourceType.dataSourceTypeId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n\n    updateFieldData(event) {\n\n        let { dataSource } = this.state\n\n        if (event.target.name === \"dataSource.label.engLabel\") {\n            // console.log(\"inside if\")\n            dataSource.label.engLabel = event.target.value\n        } if (event.target.name === \"dataSource.label.freLabel\") {\n            //onsole.log(\"inside if\")\n            dataSource.label.freLabel = event.target.value\n        } if (event.target.name === \"dataSource.label.spaLabel\") {\n            //console.log(\"inside if\")\n            dataSource.label.spaLabel = event.target.value\n        } if (event.target.name === \"dataSource.label.porLabel\") {\n            //console.log(\"inside if\")\n            dataSource.label.porLabel = event.target.value\n        } if (event.target.name === \"dataSource.dataSourceType.dataSourceTypeId\") {\n            this.state.dataSource.dataSourceType.dataSourceTypeId = event.target.value\n        } else if (event.target.name === \"dataSource.active\") {\n            dataSource.active = event.target.id = \"dataSource.active2\" ? false : true\n        }\n\n\n        this.setState(\n            {\n                dataSource\n            }\n        )\n\n\n    }\n    updateForm() {\n\n        if (navigator.onLine) {\n            if ($(\"#updatyeDataSourceForm\").valid()) {\n                //console.log(this.state);\n                DataSourceService.editDataSource(this.state.dataSource).then(response => {\n                    this.props.history.push(`/dataSourceList/${response.data.message}`)\n                    //console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n\n        } else {\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\n    render() {\n        const { dataSourceTypeList } = this.state;\n        let dataSourceTypes = dataSourceTypeList.length > 0\n            && dataSourceTypeList.map((item, i) => {\n                return (\n                    <option key={i} value={item.dataSourceTypeId}>{item.label.engLabel}</option>\n                )\n            }, this);\n        return (\n\n            <>\n\n                <h3>{myConst.ADD_DATASOURCE}</h3>\n                <form name=\"updatyeDataSourceForm\" id=\"updatyeDataSourceForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.engLabel\" value={this.state.dataSource.label.engLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.freLabel\" value={this.state.dataSource.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.spaLabel\" value={this.state.dataSource.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.porLabel\" value={this.state.dataSource.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"dataSource.active1\" name=\"dataSource.active\" value={true} checked={this.state.dataSource.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"dataSource.active2\" name=\"dataSource.active\" value={false} checked={this.state.dataSource.active === false} onChange={this.updateFieldData} /> Disabled\n                     </div>\n                    <br /><br />\n                    <div>\n                        {myConst.SELECT_DATA_SOURCE_TYPE} : <select id=\"dataSourceTypeId\" name=\"dataSource.dataSourceType.dataSourceTypeId\" value={this.state.dataSource.dataSourceType ? this.state.dataSource.dataSourceType.dataSourceTypeId : ''} onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {dataSourceTypes}\n                        </select>\n                    </div>\n                    <br /><br />\n                    <input type=\"hidden\" name=\"dataSource.dataSourceId\" value={this.state.dataSource.dataSourceId} />\n                    <input type=\"hidden\" name=\"dataSource.label.labelId\" value={this.state.dataSource.label.labelId} />\n                    <div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n\n        );\n\n\n    }\n\n}","import React, { Component } from 'react'\n// import { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { BrowserRouter as Router, Route, HashRouter } from 'react-router-dom'\nimport AuthenticatedRoute from \"./AuthenticatedRoute.jsx\";\nimport LoginComponent from \"../home/LoginComponent.jsx\";\nimport WelcomeComponent from \"../home/WelcomeComponent\";\nimport ErrorComponent from \"../common/ErrorComponent\";\nimport RegistrationComponent from \"../user/RegistrationComponent\";\nimport UserApprovalComponent from \"../user/UserApprovalComponent\";\nimport AddUserComponent from \"../user/AddUserComponent.jsx\";\nimport UserListComponent from \"../user/UserListComponent.jsx\";\nimport EditUserApprovalComponent from \"../user/EditUserApprovalComponent\";\nimport EditUserComponent from \"../user/EditUserComponent.jsx\";\nimport RoleListComponent from \"../user/RoleListComponent.jsx\";\nimport AddLanguageComponent from \"../language/AddLanguageComponent.jsx\"\nimport AddRoleComponent from \"../user/AddRoleComponent.jsx\";\nimport LanguageListComponent from \"../language/LanguageListComponent.jsx\"\nimport EditLanguageComponent from \"../language/EditLanguageComponent.jsx\"\nimport AddDataSourceTypeComponent from \"../datasourceType/AddDataSourceTypeComponent.jsx\"\nimport DataSourceTypeListComponent from \"../datasourceType/DataSourceTypeListComponent.jsx\"\nimport UpdateDataSourceTypeComponent from \"../datasourceType/UpdateDataSourceTypeComponent.jsx\"\nimport AddDataSource from \"../dataSource/AddDataSource.jsx\"\nimport DataSourceListComponent from \"../dataSource/DataSourceListComponent.jsx\"\nimport UpdateDataSourceComponent from \"../dataSource/UpdateDataSourceComponent.jsx\"\n\nclass Sidebar extends Component {\n    render() {\n        return (\n            <div className=\"Sidebar\">\n                <Router>\n                    <>\n                            <HashRouter basename='/'>\n                            <Route path=\"/\" exact component={LoginComponent} />\n                            <Route path=\"/login\" exact component={LoginComponent} />\n                            <Route path=\"/login/:message\" component={LoginComponent} />\n                            <Route path=\"/addUser\" component={AddUserComponent} />\n                            <Route path=\"/userList\" exact component={UserListComponent} />\n                            <Route path=\"/userList/:message\" component={UserListComponent} />\n                            <Route path=\"/editUser\" component={EditUserComponent} />\n                            <Route path=\"/addRole\" component={AddRoleComponent} />\n                            <Route path=\"/roleList\" component={RoleListComponent} />\n                            \n                            <Route path=\"/addLanguage\" component={AddLanguageComponent} />\n                            <Route path=\"/editLanguage\" component={EditLanguageComponent} />\n                            <Route path=\"/languageList/:message\" component={LanguageListComponent} />\n                            <Route path=\"/addDataSourceType\" component={AddDataSourceTypeComponent} />\n                            <Route path=\"/dataSourceTypeList/:message\" component={DataSourceTypeListComponent} />\n                            <Route path=\"/editDataSourceType\" component={UpdateDataSourceTypeComponent} />\n                            \n                            <Route path=\"/addDataSource\" component={AddDataSource} />\n                            <Route path=\"/dataSourceList/:message\" component={DataSourceListComponent} />\n                            <Route path=\"/editDataSource\" component={UpdateDataSourceComponent} />\n                            {/* <AuthenticatedRoute path=\"/addLanguage\" component={LanguageComponent}/> */}\n                            <Route path=\"/roleList/:message\" component={RoleListComponent} />\n                            {/* <Route path=\"/editRole\" component={RoleListComponent} /> */}\n                            <AuthenticatedRoute path=\"/welcome\" component={WelcomeComponent} />\n                            <AuthenticatedRoute path=\"/registration\" component={RegistrationComponent} />\n                            <AuthenticatedRoute path=\"/listUserApproval/:message\" component={UserApprovalComponent} />\n                            <AuthenticatedRoute path=\"/listUserApproval\" component={UserApprovalComponent} />\n                            <AuthenticatedRoute path=\"/editUserApproval/:registrationId/:emailId\" component={EditUserApprovalComponent} />\n                            <Route component={ErrorComponent} />\n                            </HashRouter>\n                        \n                    </>\n                </Router>\n            </div>\n        );\n    }\n\n}\n\nexport default Sidebar;","import React from 'react';\nimport './App.css';\nimport Sidebar from './components/common/Sidebar';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Sidebar></Sidebar>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}