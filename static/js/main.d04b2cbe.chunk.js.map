{"version":3,"sources":["Constants.js","components/common/AuthenticationService.js","components/common/AuthenticatedRoute.jsx","Js/validation.js","api/LoginService.js","components/home/LoginComponent.jsx","components/home/WelcomeComponent.jsx","components/common/ErrorComponent.jsx","api/RegistrationService.js","api/UserService.js","components/user/RegistrationComponent.jsx","components/user/UserApprovalComponent.jsx","components/user/AddUserComponent.jsx","Labels.js","components/user/UserListComponent.jsx","components/user/EditUserComponent.jsx","components/user/EditUserApprovalComponent.jsx","api/SignUpService.js","components/user/RoleListComponent.jsx","api/LanguageService.js","components/language/AddLanguageComponent.jsx","components/user/AddRoleComponent.jsx","components/home/UpdateExpiredPasswordComponent.jsx","components/home/ChangePasswordComponent.jsx","components/home/ForgotPasswordComponent.jsx","components/user/EditRoleComponent.jsx","components/language/LanguageListComponent.jsx","components/language/EditLanguageComponent.jsx","api/DataSourceTypeService.js","components/datasourceType/AddDataSourceTypeComponent.jsx","components/datasourceType/DataSourceTypeListComponent.jsx","components/datasourceType/UpdateDataSourceTypeComponent.jsx","api/DataSourceService.js","components/dataSource/AddDataSource.jsx","components/dataSource/DataSourceListComponent.jsx","components/dataSource/UpdateDataSourceComponent.jsx","api/CurrencyService.js","components/currency/AddCurrencyComponent.jsx","components/currency/CurrencyListComponent.jsx","components/currency/UpdateCurrencyComponent.jsx","api/CountryService.js","components/country/AddCountryComponent.jsx","components/country/CountryListComponent.jsx","components/country/UpdateCountryComponent.jsx","api/ShipmentStatusService.js","components/shipmentStatus/AddShipmentStatusComponent.jsx","components/shipmentStatus/ShipmentStatusListComponent.jsx","components/shipmentStatus/UpdateShipmentStatusComponent.jsx","api/ProgramService.js","components/program/DownloadProgramDataComponent.jsx","components/program/ImportProgramDataComponent.jsx","components/program/ExportProgramDataComponent.jsx","components/common/Layout.js","components/common/Sidebar.jsx","App.js","serviceWorker.js","index.js"],"names":["API_URL","SECRET_KEY","localStorage","getItem","token","jwt_decode","userId","user","language","languageId","typeOfSession","console","log","navigator","onLine","decoded","Date","exp","curDate","sessionExpiresOn","this","setupAxiosInterceptors","axios","get","then","response","catch","error","basicAuthHeader","interceptors","request","use","config","headers","authorization","Component","$","validator","addMethod","value","element","optional","test","username","password","post","LoginComponent","props","state","message","loginClicked","bind","forgotPassword","validate","ignore","rules","emailId","required","errorPlacement","insertAfter","className","name","id","match","params","type","onClick","val","valid","AuthenticationService","isUserLoggedIn","LoginService","authenticate","data","setItem","CryptoJS","AES","encrypt","toString","sub","history","push","status","setState","JSON","parse","decryptedUsername","decrypt","enc","Utf8","decryptedPassword","bcrypt","compare","err","res","alert","WelcomeComponent","listUserApproval","ErrorComponent","countryId","stateId","json","put","oldPassword","newPassword","AddUserComponent","getLanguageId","realms","languages","roles","submitClicked","cancelClicked","checkTypeOfSession","UserService","getRealmList","getLanguageList","getRoleList","email","phoneNumber","number","roleId","realmList","length","map","item","i","key","realmId","label","porLabel","engLabel","freLabel","spaLabel","languagesList","languageName","roleList","style","margin","border","background","maxLength","minLength","realm","role","countryIds","addNewUser","UserListComponent","userList","editUser","unlockAccount","getUserList","marginLeft","align","lastLoginDate","faildAttempts","active","e","stopPropagation","pathname","window","location","reload","EditUserComponent","_isMounted","updateClicked","dataChange","event","target","onChange","checked","RoleListComponent","editRole","addNewRole","AddLanguageComponent","updateFieldData","submitForm","lettersonly","maxlength","LanguageService","addLanguage","AddRoleComponent","businessFunctions","getBusinessFunctionList","businessFunctionsList","businessFunctionId","class","href","data-live-search","data-actions-box","multiple","canCreateRole","UpdateExpiredPasswordComponent","logoutClicked","confirmNewPassword","checkPassword","updateExpiredPassword","getLoggedInUserId","text","ChangePasswordComponent","statusText","ForgotPasswordComponent","Array","from","selectedOptions","readOnly","placeholder","LanguageListComponent","langaugeList","editLanguage","addNewLanguage","EditLanguageComponent","updateForm","AddDataSourceTypeComponent","DataSourceTypeService","addDataSourceType","DataSourceListComponent","dataSourceList","editDataSourceType","addNewDataSourceType","getDataSourceTypeList","dataSourceType","dataSourceTypeId","UpdateDataSourceTypeComponent","labelId","AddDataSource","dataSourceTypeList","getDataSourceTypeListActive","dataSource","DataSourceService","addDataSource","dataSourceTypes","editDataSource","addNewDataSource","getDataSourceList","dataSourceId","UpdateDataSourceComponent","AddCurrencyComponent","currencyCode","currencySymbol","conversionRateToUsd","integer","currency","CurrencyService","addCurrency","CurrencyListComponent","currencyList","editCurrency","addNewCurrency","getCurrencyList","currencyId","UpdateCurrencyComponent","AddCountryComponent","languageList","getLanguageListActive","getCurrencyListActive","CountryService","addCountry","languageItems","currencyItems","itemOne","CountryListComponent","countryList","addNewCountry","editCountry","getCountryListAll","country","UpdateCountryComponent","curencyId","AddShipmentStatusComponent","shipmentStatus","ShipmentStatusService","getShipmentStatusListActive","shipmentStatusList","addShipmentStatus","ShipmentStatusListComponent","editShipmentStatus","addNewShipmentStatus","getShipmentStatusListAll","shipmentStatusId","UpdateShipmentStatusComponent","programId","DownloadProgramDataComponent","programData","downloadClicked","programArr","split","j","ProgramService","getProgramData","openRequest","indexedDB","open","onupgradeneeded","db1","result","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","onsuccess","program","transaction","objectStore","encryptedText","stringify","getRequest","add","onerror","ImportProgramDataComponent","programList","importClicked","programSubmitClicked","hide","show","programItems","File","FileReader","FileList","Blob","undefined","document","querySelector","files","file","JSZip","loadAsync","zip","fileName","size","Object","keys","forEach","filename","async","fileData","programDataJson","plaintext","programDataJsonDecrypted","labelEn","selectedPrgArr","clear","addProgramDataRequest","ExportProgramDataComponent","exportClicked","getAll","proList","myResult","programJson","txt","parseInt","generateAsync","content","FileSaver","saveAs","Layout","timeout","checkSessionTimeOut","showModal","userLoggedIn","isTimedOut","idleTimer","onAction","_onAction","onActive","_onActive","onIdle","_onIdle","handleClose","handleLogout","reset","ref","debounce","path","exact","component","render","React","Sidebar","basename","App","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","getElementById","URL","process","origin","addEventListener","fetch","contentType","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d04b2cbe.chunk.js","sourcesContent":["//export const API_URL = 'http://localhost:8081'\nexport const API_URL = 'https://fasp.altius.cc/FASP'\n\n// export const API_URL='http://localhost:8084/FASP'\n//export const API_URL = 'http://localhost:8081'\nexport const SECRET_KEY = 'afhghggrehreqiuhrjhjdbfjehgfuoerhfjhfyguayaegrf'\n","import axios from 'axios'\nimport { Online } from \"react-detect-offline\";\nimport jwt_decode from 'jwt-decode'\nimport { API_URL } from '../../Constants.js'\n\nclass AuthenticationService {\n\n    isUserLoggedIn() {\n        let user = localStorage.getItem('userId');\n        if (user === null) return false\n        return true\n    }\n    getLoggedInUserId() {\n        let token = localStorage.getItem('token');\n        var decoded = jwt_decode(token);\n        return decoded.userId;\n    }\n\n    getLanguageId() {\n        let token = localStorage.getItem('token');\n        var decoded = jwt_decode(token);\n        return decoded.user.language.languageId;\n    }\n\n    checkTypeOfSession() {\n        let typeOfSession = localStorage.getItem('typeOfSession');\n        console.log(\"typeofsession---\"+typeOfSession);\n        console.log(\"network----\"+navigator.onLine);\n        if ((typeOfSession === 'Online') && navigator.onLine) {\n            console.log(\"true\");\n            return true;\n        } else {\n            console.log(\"false\");\n            return false;\n        }\n    }\n\n    checkIfTokenExpired() {\n        let token = localStorage.getItem('token');\n        var decoded = jwt_decode(token);\n        console.log(decoded);\n        let tokenExpiryTime = new Date(decoded.exp * 1000);\n        var curDate = new Date();\n        console.log(new Date(decoded.exp * 1000));\n        console.log(\"cur date---\" + curDate);\n\n        if (new Date(decoded.exp * 1000) > new Date()) {\n            console.log(\"Token not expired\");\n            return true;\n        } else {\n            console.log(\"Token expired\");\n            return false;\n        }\n    }\n\n    checkSessionTimeOut(){\n        let token = localStorage.getItem('token');\n        var decoded = jwt_decode(token);\n        console.log(\"decoded---\",decoded);\n        console.log(\"Session expires on---\"+decoded.user.sessionExpiresOn);\n        return decoded.user.sessionExpiresOn;   \n    }\n\n    refreshToken() {\n        let token = localStorage.getItem('token');\n        console.log(\"token---\" + token);\n        this.setupAxiosInterceptors();\n        return axios.get(`${API_URL}/refresh`, {}).then(response => {\n            console.log(\"response----------------\", response)\n        }).catch(\n            error => {\n                console.log(\"error----------\", error);\n            })\n    }\n\n    setupAxiosInterceptors() {\n        //console.log(\"Inside interceptor setup\");\n        let token = localStorage.getItem('token');\n        let basicAuthHeader = 'Bearer ' + token\n        console.log(\"headers=\" + basicAuthHeader);\n        axios.interceptors.request.use(\n            // if (this.isUserLoggedIn) {\n            (config) => {\n                config.headers.authorization = basicAuthHeader\n                return config;\n            }\n            // }\n        )\n\n    }\n}\n\n\nexport default new AuthenticationService()","import React, { Component } from \"react\";\nimport AuthenticationService from \"./AuthenticationService.js\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nclass AuthenticatedRoute extends Component {\n\n    render() {\n        if (AuthenticationService.isUserLoggedIn()) {\n            console.log(\"in user logged in\");\n            //console.log(AuthenticationService.isUserLoggedIn);\n\n            return <Route {...this.props} />\n        } else {\n            console.log(\"in else\")\n            return <Redirect to=\"/login\"/>\n        }\n    }\n\n}\n\nexport default AuthenticatedRoute","import $ from 'jquery';\nimport 'jquery-validation';\n\n\n\n$.validator.addMethod('emailId', function (value, element) {\n\n    return this.optional(element) || /^[\\w][\\w.-]{0,127}$/.test(value)\n  \n  }, \"Please enter a valid Docker image tag, like 'latest' or '1.10.0'\");\n\n  $.validator.addMethod( \"lettersonly\", function( value, element ) {\n    return this.optional( element ) || /^[a-z]+$/i.test( value );\n  }, \"Letters only please\" );\n\n  $.validator.addMethod( \"integer\", function( value, element ) {\n    return this.optional( element ) || /^-?\\d+$/.test( value );\n  }, \"A positive or negative non-decimal number please\" );\n  ","import axios from \"axios\"\nimport {API_URL} from '../Constants.js'\n\nclass LoginService {\n\n\n\n    authenticate(username, password) {\n        console.log(\"username---\"+username);\n        console.log(\"password---\"+password);\n        return axios.post(`${API_URL}/authenticate`,{username, password},{});\n    }\n\n    \n}\n\nexport default new LoginService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport LoginService from '../../api/LoginService'\nimport CryptoJS from 'crypto-js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\nimport moment from 'moment';\nimport bcrypt from 'bcryptjs';\nimport jwt_decode from 'jwt-decode'\nimport { SECRET_KEY } from '../../Constants.js'\n\n\nexport default class LoginComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.loginClicked = this.loginClicked.bind(this);\n        this.forgotPassword = this.forgotPassword.bind(this);\n    }\n\n    componentDidMount() {\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                emailId: {\n                    required: true\n                },\n                password: {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"login\">\n                <form name=\"form1\" id=\"form1\">\n                    <h3>Login</h3>\n                    <p>{this.props.match.params.message}</p>\n                    Username : <input type=\"text\" id=\"emailId\" name=\"emailId\" /><br></br><br></br>\n                    Password : <input type=\"password\" id=\"password\" name=\"password\" /><br></br><br></br>\n                    <button className=\"btn btn-success\" type=\"button\" onClick={this.loginClicked}>Login</button><br></br><br></br>\n                    <Online><button className=\"btn btn-danger\" type=\"button\" onClick={this.forgotPassword}>Forgot Password</button><br></br><br></br></Online>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n\n    loginClicked() {\n        var username = $(\"#emailId\").val();\n        var password = $(\"#password\").val();\n        if ($(\"#form1\").valid()) {\n            console.log(\"Going to perform login----\" + AuthenticationService.isUserLoggedIn());\n\n            if (navigator.onLine) {\n                console.log(\"Inside Authentication not found\");\n                LoginService.authenticate(username, password)\n                    .then(response => {\n                        var decoded = jwt_decode(response.data.token);\n\n                        // console.log(new Date(decoded.iat*1000));\n                        // console.log(new Date(decoded.exp*1000));\n                        console.log(\"username---\", decoded);\n\n                        localStorage.setItem('token', response.data.token);\n                        localStorage.setItem('typeOfSession', \"Online\");\n                        localStorage.setItem('userId', CryptoJS.AES.encrypt((decoded.userId).toString(), `${SECRET_KEY}`));\n                        localStorage.setItem('username', CryptoJS.AES.encrypt((decoded.sub).toString(), `${SECRET_KEY}`));\n                        localStorage.setItem('password', CryptoJS.AES.encrypt((decoded.user.password).toString(), `${SECRET_KEY}`));\n                        localStorage.setItem('languageId', CryptoJS.AES.encrypt((decoded.user.language.languageId).toString(), `${SECRET_KEY}`));\n\n                        // response.data.password = CryptoJS.AES.encrypt(JSON.stringify(password), 'my-secret-key@123').toString();\n\n                        AuthenticationService.setupAxiosInterceptors();\n                       \n                        this.props.history.push(`/welcome`)\n\n                    })\n                    .catch(\n                        error => {\n                            // console.log(\"response in catch---\"+error.response);\n                            if (error.response != null && error.response.status === 401) {\n                                switch (error.response.data) {\n                                    case \"Account Expired\":\n                                        this.setState({\n                                            message: error.response.data\n                                        })\n                                        this.props.history.push(`/updateExpiredPassword`);\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data\n                                        })\n                                        break\n                                }\n                            } else {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        }\n                    );\n            }\n            else {\n                if (AuthenticationService.isUserLoggedIn()) {\n                    let userOff = JSON.parse(localStorage.getItem('user'));\n\n                    var usernameBytes = CryptoJS.AES.decrypt(localStorage.getItem('username').toString(), 'my-secret-key@123');\n                    var decryptedUsername = usernameBytes.toString(CryptoJS.enc.Utf8);\n\n                    var passWordBytes = CryptoJS.AES.decrypt(localStorage.getItem('password').toString(), 'my-secret-key@123');\n                    var decryptedPassword = passWordBytes.toString(CryptoJS.enc.Utf8);\n\n                    if (username === decryptedUsername) {\n                        bcrypt.compare(password, decryptedPassword, function (err, res) {\n                            if (err) {\n                                console.log(\"error---\" + err);\n                            }\n                            if (res) {\n                                localStorage.setItem('typeOfSession', \"Offline\");\n                                console.log(\"Offline authentication\");\n                                this.props.history.push(`/welcome`)\n                            } else {\n                                this.setState({ message: 'Bad credentials' });\n                                console.log(\"Password do not match\");\n                            }\n                        }.bind(this));\n                    } else {\n                        this.setState({ message: 'Username does not match' });\n                        console.log(\"Username do not match\");\n                    }\n                    // bcrypt.compare(password, userOff.password, function (err, res) {\n                    //     if (err) {\n                    //         console.log(\"error---\" + err);\n                    //     }\n                    //     if (res && username == userOff.username) {\n                    //         userOff.sessionExpiresOn = moment(new Date(new Date().getTime() + 30 * 60000)).format('YYYY-MM-DD HH:mm');\n                    //         localStorage.setItem('user', JSON.stringify(userOff));\n                    //         this.props.history.push(`/welcome`)\n                    //     } else {\n                    //         this.setState({ message: 'Password do not match' });\n                    //         console.log(\"Password do not match\");\n                    //     }\n                    // }.bind(this));\n                } else {\n                    alert(\"You must be Online for a first time login.\")\n                }\n            }\n        }\n    }\n\n    forgotPassword() {\n        this.props.history.push(`/forgotPassword`)\n    }\n}\n\n","import React, { Component } from \"react\";\n\nclass WelcomeComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.listUserApproval=this.listUserApproval.bind(this);\n    }\n\n    render() {\n        return (\n            <>\n                <h1>Welcome!!</h1>\n                <button type=\"button\" onClick={this.listUserApproval}>User Approval</button><br></br><br></br>\n            </>\n        );\n    }\n\n    listUserApproval() {\n        this.props.history.push(`/listUserApproval`)\n    }\n}\n\nexport default WelcomeComponent","import React from \"react\";\n\nfunction ErrorComponent() {\n    return (\n        <div>An Error occurred</div>\n    )\n}\n\nexport default ErrorComponent","import axios from \"axios\"\nimport {API_URL} from '../Constants.js' \n\nclass RegistrationService {\n    getCountryList() {\n        return axios.get(`${API_URL}/api/getCountryList`, {\n        });\n    }\n\n    getStateList(countryId) {\n        return axios.get(`${API_URL}/api/getStateList/${countryId}`, {\n        });\n    }\n\n    getCityList(countryId, stateId) {\n        return axios.get(`${API_URL}/api/getCityList/${countryId}/${stateId}`, {\n        });\n    }\n\n    saveRegistration(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`${API_URL}/api/saveRegistration/`, json, {\n        });\n    }\n\n    getUserApprovalList() {\n        return axios.get(`${API_URL}/api/getUserApprovalList`, {\n        });\n    }\n\n    saveApproval(json) {\n        return axios.put(`${API_URL}/api/saveApproval`, json, {\n        });\n    }\n}\n\nexport default new RegistrationService()","import axios from \"axios\";\nimport { API_URL } from '../Constants';\n\n\nclass UserService {\n    getLanguageList() {\n        return axios.get(`${API_URL}/api/getLanguageList`, {\n        });\n    }\n    getRoleList() {\n        return axios.get(`${API_URL}/api/getRoleList`, {\n        });\n    }\n    getBusinessFunctionList() {\n        return axios.get(`${API_URL}/api/getBusinessFunctionList`, {\n        });\n    }\n    getRealmList() {\n        return axios.get(`${API_URL}/api/getRealmList`, {\n        });\n    }\n    addNewUser(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`${API_URL}/api/addNewUser/`, json, {\n        });\n    }\n    addNewRole(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`${API_URL}/api/addNewRole/`, json, {\n        });\n    }\n\n    getUserList() {\n        return axios.get(`${API_URL}/api/getUserList`, {\n        });\n    }\n    getUserByUserId(userId) {\n        return axios.get(`${API_URL}/api/getUserByUserId/${userId}`, {\n        });\n    }\n    editUser(json) {\n        return axios.put(`${API_URL}/api/editUser/`, json, {\n        });\n    }\n\n    editRole(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`${API_URL}/api/editRole/`, json, {\n        });\n    }\n    unlockAccount(user) {\n        return axios.put(`${API_URL}/api/unlockAccount/`, user, {\n        });\n    }\n    updateExpiredPassword(userId, oldPassword, newPassword) {\n        return axios.post(`${API_URL}/api/updateExpiredPassword/`, { userId, oldPassword, newPassword }, {});\n    }\n    forgotPassword(username) {\n        return axios.get(`${API_URL}/api/forgotPassword/${username}`, {});\n    }\n}\n\nexport default new UserService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport RegistrationService from \"../../api/RegistrationService.js\";\n\n\nexport default class RegistrationComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.registerClicked = this.registerClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n    }\n\n    componentDidMount() {\n        $.validator.addMethod('nofreeemail', function (value) {\n            return /^([\\w-.]+@(?!gmail\\.com)(?!yahoo\\.com)(?!hotmail\\.com)([\\w-]+.)+[\\w-]{2,4})?$/.test(value);\n        }, 'Free email addresses are not allowed.');\n\n\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                firstName: {\n                    required: true\n                },\n                lastName: {\n                    required: true\n                },\n                emailId: {\n                    required: true,\n                    email: true,\n                    nofreeemail:true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    dataChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"register\">\n                <form name=\"form1\" id=\"form1\" onSubmit={this.registerClicked}>\n                    <h3>Sign Up</h3>\n                    First Name : <input type=\"text\" id=\"firstName\" name=\"firstName\" onChange={this.dataChange} /><br></br><br></br>\n                    Last Name : <input type=\"text\" id=\"lastName\" name=\"lastName\" onChange={this.dataChange} /><br></br><br></br>\n                    Email Id : <input type=\"text\" id=\"emailId\" name=\"emailId\" onChange={this.dataChange} /><br></br><br></br>\n                    <button type=\"submit\">Sign Up</button><br></br><br></br>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n\n    registerClicked(event) {\n        event.preventDefault();\n        if (navigator.onLine) {\n            var json = this.state\n            if ($(\"#form1\").valid()) {\n                RegistrationService.saveRegistration(json)\n                    .then(response => {\n                        this.props.history.push(`/login/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n\n}\n\n","import React, { Component } from \"react\";\nimport RegistrationService from '../../api/RegistrationService.js';\n\nclass UserApprovalComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listUserApproval: []\n        }\n        this.updateUserApproval = this.updateUserApproval.bind(this);\n    }\n\n\n    componentDidMount() {\n        RegistrationService.getUserApprovalList()\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    listUserApproval: response.data\n                })\n            })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    render() {\n        return (\n            <>\n                <h1>List User Approval</h1>\n                <p>{this.props.match.params.message}</p>\n                <div className=\"container\">\n                    <table border=\"1\">\n                        <thead>\n                            <tr>\n                                <th>First Name</th>\n                                <th>Last Name</th>\n                                <th>Email Id</th>\n                                <th>Created date</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.listUserApproval.map(\n                                    listUserApproval =>\n                                        <tr key={listUserApproval.registrationId} onClick={() => this.updateUserApproval(listUserApproval.registrationId, listUserApproval.emailId)}>\n                                            <td>{listUserApproval.firstName}</td>\n                                            <td>{listUserApproval.lastName}</td>\n                                            <td>{listUserApproval.emailId}</td>\n                                            <td>{listUserApproval.createdDate}</td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n            </>\n        );\n    }\n\n    updateUserApproval(id, emailId) {\n        console.log(id);\n        console.log(emailId);\n        this.props.history.push(`/editUserApproval/${id}/${emailId}`)\n    }\n}\n\nexport default UserApprovalComponent","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { COUNTRY, EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, ADDRESS, BTN_SUBMIT, BTN_CANCEL, TITLE_ADD_USER, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class AddUserComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            languageId: AuthenticationService.getLanguageId(),\n            realms: [],\n            languages: [],\n            roles: []\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        console.log(\"check---\"+AuthenticationService.checkTypeOfSession());\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You are offline.Please login again to continue in offline mode.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getRealmList()\n            .then(response => {\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getLanguageList()\n            .then(response => {\n                this.setState({\n                    languages: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#userForm\").validate({\n            ignore: [],\n            rules: {\n                emailId: {\n                    required: true,\n                    email: true\n                },\n                phoneNumber: {\n                    required: true,\n                    number: true\n                },\n                languageId: {\n                    required: true\n                },\n                roleId: {\n                    required: true\n                },\n                username: {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { realms } = this.state;\n        const { languages } = this.state;\n        const { roles } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.porLabel != null && item.label.porLabel != \"\" ? item.label.porLabel : item.label.engLabel);\n                                case 3: return (item.label.freLabel != null && item.label.freLabel != \"\" ? item.label.freLabel : item.label.engLabel);\n                                case 4: return (item.label.spaLabel != null && item.label.spaLabel != \"\" ? item.label.spaLabel : item.label.engLabel);\n                                default: return item.label.engLabel;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n        let languagesList = languages.length > 0\n            && languages.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>\n                        {item.languageName}\n                    </option>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.porLabel != null && item.label.porLabel != \"\" ? item.label.porLabel : item.label.engLabel);\n                                case 3: return (item.label.freLabel != null && item.label.freLabel != \"\" ? item.label.freLabel : item.label.engLabel);\n                                case 4: return (item.label.spaLabel != null && item.label.spaLabel != \"\" ? item.label.spaLabel : item.label.engLabel);\n                                default: return item.label.engLabel;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n        return (\n            <div className=\"addUser\">\n                <div className=\"page-navigation-toggled page-container-wide\">\n                    <div className=\"page-content\">\n                        <div className=\"page-content-wrap\">\n\n                            <div className=\"row\">\n                                <div className=\"col-md-offset-3 col-md-6\" style={{ margin: '40px', border: '5px solid black' }} >\n                                    <form name=\"userForm\" id=\"userForm\">\n                                        <div className=\"panel panel-default\" style={{ background: '#ffffffad' }}>\n                                            <div className=\"panel-heading\"> <h3>{TITLE_ADD_USER}</h3> </div>\n                                            <div className=\"col-md-offset-1 panel-body\">\n                                                <div className=\"form-group\">\n                                                    <label className=\"req col-md-3 col-xs-12 control-label\"> {REALM}</label>\n                                                    <div className=\"col-md-6 col-xs-12\">\n                                                        <select className=\"form-control select\" id=\"realmId\" name=\"realmId\">\n                                                            <option value=\"\">-Nothing Selected-</option>\n                                                            {realmList}\n                                                        </select>\n                                                    </div>\n                                                </div><br />\n                                                <div className=\"form-group\">\n                                                    <label className=\"req col-md-3 col-xs-12 control-label\">{USERNAME} </label>\n                                                    <div className=\"col-md-6 col-xs-12\"> <input className=\"form-control\" type=\"text\" id=\"username\" name=\"username\" />\n                                                    </div>\n                                                </div><br />\n                                                <div className=\"form-group\">\n                                                    <label className=\"req col-md-3 col-xs-12 control-label\">{EMAIL_ID} </label>\n                                                    <div className=\"col-md-6 col-xs-12\">\n                                                        <input className=\"form-control\" type=\"text\" id=\"emailId\" name=\"emailId\" />\n                                                    </div>\n                                                </div><br />\n                                                <div className=\"form-group\">\n                                                    <label className=\"req col-md-3 col-xs-12 control-label\">{PHONE_NO}</label>\n                                                    <div className=\"col-md-6 col-xs-12\">\n                                                        <input className=\"form-control\" type=\"text\" id=\"phoneNumber\" name=\"phoneNumber\" maxLength=\"15\" minLength=\"4\" />\n                                                    </div>\n                                                </div><br />\n                                                <div className=\"form-group\">\n                                                    <label className=\"req col-md-3 col-xs-12 control-label\">{ROLE} </label><div className=\"col-md-6 col-xs-12\"> <select className=\"form-control select\" id=\"roleId\" name=\"roleId\">\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {roleList}\n                                                    </select></div>\n                                                </div><br />\n                                                {/* <div className=\"form-group\">\n                                                <label className=\"req col-md-3 col-xs-12 control-label\">{COUNTRY} </label><div className=\"col-md-6 col-xs-12\"> <select className=\" form-control mdb-select colorful-select dropdown-primary md-form\" id=\"countryIds\" name=\"countryIds\">\n                                                    <option value=\"\">-Nothing Selected-</option>\n                                                    {roleList}\n                                                </select></div>\n                                                </div><br /> */}\n                                                <div className=\"form-group\">\n                                                    <label className=\"req col-md-3 col-xs-12 control-label\">{PREFERRED_LANGUAGE} </label> <div className=\"col-md-6 col-xs-12\"><select className=\"form-control select\" id=\"languageId\" name=\"languageId\">\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {languagesList}\n                                                    </select></div>\n                                                </div><br />\n                                                <div className=\"form-group\">\n                                                    <div className=\"col-md-6 col-xs-12\"><button className=\"btn btn-success\" type=\"button\" onClick={this.submitClicked}>{BTN_SUBMIT}</button>\n                                                        <button className=\"btn btn-primary\" type=\"button\" onClick={this.cancelClicked}>{BTN_CANCEL}</button></div>\n\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </form>\n                                </div></div></div></div></div></div>\n        )\n    }\n    submitClicked() {\n        console.log($(\"#countryIds\").val())\n        if (navigator.onLine) {\n            console.log(\"check---\"+AuthenticationService.checkTypeOfSession());\n            if (AuthenticationService.checkTypeOfSession()) {\n                var json = {\n                    username: $(\"#username\").val(),\n                    emailId: $(\"#emailId\").val(),\n                    phoneNumber: $(\"#phoneNumber\").val(),\n                    realm: {\n                        realmId: $(\"#realmId\").val()\n                    },\n                    role: {\n                        roleId: $(\"#roleId\").val()\n                    },\n                    language: {\n                        languageId: $(\"#languageId\").val()\n                    },\n                    countryIds: $(\"#countryIds\").val()\n                }\n                if ($(\"#userForm\").valid()) {\n                    UserService.addNewUser(json)\n                        .then(response => {\n                            this.props.history.push(`/userList/${response.data.message}`)\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline.Please login again to continue.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/userList/` + \"Action Canceled\")\n    }\n\n}\n\n","export const TITLE_ADD_USER = 'Create new user'\nexport const TITLE_USER_LIST = 'User List'\nexport const TITLE_EDIT_USER = 'Update user - '\nexport const TITLE_ADD_ROLE = 'Add new role'\nexport const TITLE_ROLE_LIST = 'Role List'\nexport const TITLE_EDIT_ROLE = 'Update role'\nexport const USERNAME = 'Username'\nexport const EMAIL_ID = 'Email Id'\nexport const PHONE_NO = 'Phone No'\nexport const ADDRESS = 'Address'\nexport const COUNTRY = 'Country'\nexport const REALM = 'Realm'\nexport const STATE = 'State/Province'\nexport const CITY = 'City'\nexport const ROLE = 'Role'\nexport const ACTIVE = 'Status'\nexport const LAST_LOGIN_DATE = 'Last Login Date'\nexport const FAILED_ATTEMPTS = 'Failed Attempts'\nexport const PREFERRED_LANGUAGE = 'Preferred Language'\nexport const BTN_SUBMIT = 'Submit'\nexport const BTN_CANCEL = 'Cancel'\nexport const BTN_UPDATE = 'Update'\nexport const BTN_EDIT = 'Update'\nexport const BTN_FAILED_ATTEMPTS = 'Unlock account'\nexport const LANGUAGE_NAME = 'Language name'\nexport const HEALTH_AREA = 'Health Area'\nexport const ORGANISATION = 'Organisation'\nexport const REGION = 'Region'\nexport const ROLE_NAME = 'Role Name'\nexport const ROLE_NAME_ENG = 'Role Name[English]'\nexport const ROLE_NAME_SPA = 'Role Name[Spanish]'\nexport const ROLE_NAME_FRE = 'Role Name[French]'\nexport const ROLE_NAME_POR = 'Role Name[Portuguese]'\nexport const ROLE_ID = 'Role Id'\nexport const BUSINESS_FUNCTION = 'Business function'\nexport const CAN_CREATE_ROLE = 'Can create role'\nexport const BTN_DOWNLOAD='DOWNLOAD'\nexport const BTN_EXPORT='EXPORT'\nexport const EXPORT_TITLE='Export Program Data'\nexport const PROGRAM='Program'\nexport const NOTHING_SELECTED='-Nothing Selected-'\nexport const DOWNLOAD_TITLE='Download Program Data'\nexport const IMPORT_TITLE='Import Program Data'\nexport const BTN_IMPORT='Import'\nexport const DATA_DOWNLOAD_SUCCESS='Data downloaded successfully.'\nexport const DATA_EXPORT_SUCCESS='Data exported successfully.'\nexport const DATA_IMPORT_SUCCESS='DATA imported successfully'\nexport const IMPORT_PROGRAM='Select programs to import'\nexport const IS_ACTIVE = 'Active'\nexport const ADD_LANGUAGE = 'Add Language'\nexport const UPDATE_LANGUAGE = 'Update Language'\nexport const SUBMIT_BUTTON = 'Submit'\nexport const UPDATE_BUTTON = 'Update'\nexport const ADD_NEW_LANGUAGE_TITLE = 'Add New Language'\nexport const ADD_DATASOURCE_TYPE = 'Add Data Source Type'\nexport const DATASOURCE_TYPE_NAME_EN = 'Data source type name (English)'\nexport const DATASOURCE_TYPE_NAME_FR = 'Data source  type name (French)'\nexport const DATASOURCE_TYPE_NAME_SP = 'Data source type  name (Spanish)'\nexport const DATASOURCE_TYPE_NAME_PO = 'Data source type name (Portugese)'\nexport const DATA_SOURCE_TYPE_LIST = 'Data Source Type List'\nexport const DATA_SOURCE_TYPE_ACTIVE = 'Active'\nexport const UPDATE_DATA_SOURCE_TYPE = \"Update Data Source Type\"\nexport const ADD_NEW_DATA_SOURCE_TYPE = \"Add New Data Source Type\"\nexport const ADD_DATASOURCE = 'Add Data Source'\nexport const UPDATE_DATASOURCE = 'Update Data Source'\nexport const DATASOURCE_NAME_EN = 'Data source name (English)'\nexport const DATASOURCE_NAME_FR = 'Data source name (French)'\nexport const DATASOURCE_NAME_SP = 'Data source name (Spanish)'\nexport const DATASOURCE_NAME_PO = 'Data source name (Portugese)'\nexport const DATASOURCE_ACTIVE = 'Active'\nexport const DATA_SOURCE_LIST = 'Data Source  List'\nexport const SELECT_DATA_SOURCE_TYPE='Select Data Source Type'\nexport const ADD_NEW_DATA_SOURCE = \"Add New Data Source\"\n\nexport const ADD_CURRENCY = 'Add Currency'\nexport const UPDATE_CURRENCY = 'Update Currency'\nexport const CURRENCY_NAME_EN = 'Currency name (English)'\nexport const CURRENCY_NAME_FR = 'Currency name (French)'\nexport const CURRENCY_NAME_SP = 'Currency name (Spanish)'\nexport const CURRENCY_NAME_PO = 'Currency name (Portugese)'\nexport const CURRENCY_CODE = 'Currency code'\nexport const CURRENCY_SYMBOL = 'Currency symbol'\nexport const CONVERSIONRATE_TO_USD = 'Conversion rate to usd'\nexport const CURRENCY_LIST=\"Currency List\"\nexport const ADD_NEW_CURRENCY=\"Add New Currency\"\n\nexport const COUNTRY_NAME_EN = 'Country name (English)'\nexport const COUNTRY_NAME_FR = 'Country name (French)'\nexport const COUNTRY_NAME_SP = 'Country name (Spanish)'\nexport const COUNTRY_NAME_PO = 'Country name (Portugese)'\nexport const SELECT_LANGUAGE='Select language'\nexport const SELECT_CURRENCY='Select currency'\nexport const ADD_COUNTRY='Add Country'\nexport const ADD_NEW_COUNTRY='Add New Country'\nexport const COUNTRY_LIST='Country List'\nexport const COUNTRY_ACTIVE=\"Active\"\nexport const UPDATE_COUNTRY=\"Update Country\"\n\nexport const ADD_SHIPMENT_STATUS=\"Add Shipment Status\"\nexport const UPDATE_SHIPMENT_STATUS=\"Update Shipment Status\"\nexport const SHIPMENTSTATUS_NAME_EN = 'Shipment status name (English)'\nexport const SHIPMENTSTATUS_NAME_FR = 'Shipment status name (French)'\nexport const SHIPMENTSTATUS_NAME_SP = 'Shipment status name (Spanish)'\nexport const SHIPMENTSTATUS_NAME_PO = 'Shipment status name (Portugese)'\nexport const SHIPMENT_STATUS_LIST='Shipment Status List'\nexport const ADD_NEW_SHIPMENT_STATUS='Add New Shipment Status'\nexport const SELECT_NEXT_SHIPMENT_STATUS='Select next shipment status'\n\n\n\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, TITLE_USER_LIST, TITLE_ADD_USER, ACTIVE, LAST_LOGIN_DATE, FAILED_ATTEMPTS, BTN_EDIT, BTN_FAILED_ATTEMPTS, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\nconst cache = {}\nexport default class UserListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userList: []\n        }\n        this.editUser = this.editUser.bind(this);\n        this.unlockAccount = this.unlockAccount.bind(this);\n        this.addNewUser = this.addNewUser.bind(this);\n    }\n\n    componentDidMount() {\n        if(!AuthenticationService.checkTypeOfSession()){\n            alert(\"You are offline.Please login again to continue in offline mode.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getUserList()\n            .then(response => {\n                this.setState({\n                    userList: response.data\n                })\n            })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n    render() {\n        return (\n            <div className=\"userList\">\n                <p>{this.props.match.params.message}</p>\n                <h1>{TITLE_USER_LIST}</h1>\n                <div className=\"container\">\n                    <button className=\"btn btn-add\" type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewUser}>{TITLE_ADD_USER}</button><br /><br />\n                    <div className=\"row\">\n                        <div className=\"col-md-12 scrollable\"></div>\n                        <table className=\"table table-responsive\" border=\"1\" align=\"center\">\n                            <thead>\n                                <tr>\n                                    <th>{REALM}</th>\n                                    <th>{USERNAME}</th>\n                                    <th>{EMAIL_ID}</th>\n                                    <th>{PHONE_NO}</th>\n                                    <th>{ROLE}</th>\n                                    <th>{PREFERRED_LANGUAGE}</th>\n                                    <th>{LAST_LOGIN_DATE}</th>\n                                    <th>{FAILED_ATTEMPTS}</th>\n                                    <th>{ACTIVE}</th>\n                                    <th>{BTN_EDIT}</th>\n                                    <th>{BTN_FAILED_ATTEMPTS}</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    this.state.userList.map(\n                                        user =>\n                                            // <tr key={user.userId} onClick={() => this.editUser(user.userId)}>\n                                            <tr key={user.userId} onClick={() => this.editUser(user)}>\n                                                <td>\n                                                    {user.realm.label.engLabel}\n                                                </td>\n                                                <td>{user.username}</td>\n                                                <td>{user.emailId}</td>\n                                                <td>{user.phoneNumber}</td>\n                                                <td>{user.role.label.engLabel}</td>\n                                                <td>{user.language.languageName}</td>\n                                                <td>{user.lastLoginDate}</td>\n                                                <td>{user.faildAttempts}</td>\n                                                <td>{user.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}\n                                                </td>\n                                                <td><button type=\"button\" onClick={() => this.editUser(user)}>{BTN_EDIT}</button></td>\n                                                <td><button type=\"button\" onClick={(e) => { e.stopPropagation(); this.unlockAccount(user) }}>{BTN_FAILED_ATTEMPTS}</button></td>\n                                            </tr>\n                                    )\n                                }\n                            </tbody>\n                        </table></div>\n                </div>\n\n            </div>\n        )\n    }\n    editUser(user) {\n        this.props.history.push({\n            pathname: \"/editUser\",\n            state: { user: user }\n        });\n    }\n    unlockAccount(user) {\n        if (navigator.onLine) {\n            UserService.unlockAccount(user)\n                .then(response => {\n                    this.props.history.push(`/userList/${response.data.message}`)\n                    window.location.reload();\n                })\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.response.data.message\n                                })\n                                break\n                        }\n                    }\n                );\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    addNewUser() {\n        if (navigator.onLine) {\n            this.props.history.push(`/addUser`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport SignUpService from \"../../api/SignUpService\";\nimport UserService from \"../../api/UserService\";\nimport { EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, ACTIVE, BTN_UPDATE, BTN_CANCEL, TITLE_EDIT_USER, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class EditUserComponent extends Component {\n    _isMounted = false;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            languageId: AuthenticationService.getLanguageId(),\n            realms: [],\n            languages: [],\n            roles: [],\n            user: '',\n            'user.active': true\n        }\n        this.updateClicked = this.updateClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n\n    }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You are offline.Please login again to continue in offline mode.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            user: this.props.location.state.user\n        });\n        UserService.getRealmList()\n            .then(response => {\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getLanguageList()\n            .then(response => {\n                this.setState({\n                    languages: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#userForm\").validate({\n            ignore: [],\n            rules: {\n                'user.emailId': {\n                    required: true,\n                    email: true\n                },\n                'user.phoneNumber': {\n                    required: true,\n                    number: true\n                },\n                'username': {\n                    required: true\n                },\n                'user.language.languageId': {\n                    required: true\n                },\n                'user.role.roleId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    dataChange(event) {\n        let { user } = this.state\n        if (event.target.name === \"user.realm.realmId\") {\n            user.realm.realmId = event.target.value\n        }\n        else if (event.target.name === \"user.realm.realmId\") {\n            user.realm.realmId = event.target.value\n        }\n        else if (event.target.name === \"user.role.roleId\") {\n            user.role.roleId = event.target.value\n        }\n        else if (event.target.name === \"user.language.languageId\") {\n            user.language.languageId = event.target.value\n        }\n        else if (event.target.name === \"user.emailId\") {\n            user.emailId = event.target.value\n        }\n        else if (event.target.name === \"user.username\") {\n            user.username = event.target.value\n        }\n        else if (event.target.name === \"user.phoneNumber\") {\n            user.phoneNumber = event.target.value\n        }\n        else if (event.target.name === \"user.active\") {\n            user.active = event.target.id === \"user.active2\" ? false : true\n        }\n\n        this.setState({\n            user\n        }, (\n        ) => {\n            // console.log(\"state after update---\",this.state.user)\n        })\n    }\n\n    render() {\n        const { realms } = this.state;\n        const { languages } = this.state;\n        const { roles } = this.state;\n        const { user } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.porLabel != null && item.label.porLabel != \"\" ? item.label.porLabel : item.label.engLabel);\n                                case 3: return (item.label.freLabel != null && item.label.freLabel != \"\" ? item.label.freLabel : item.label.engLabel);\n                                case 4: return (item.label.spaLabel != null && item.label.spaLabel != \"\" ? item.label.spaLabel : item.label.engLabel);\n                                default: return item.label.engLabel;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n        let languagesList = languages.length > 0\n            && languages.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>\n                        {item.languageName}\n                    </option>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.porLabel != null && item.label.porLabel != \"\" ? item.label.porLabel : item.label.engLabel);\n                                case 3: return (item.label.freLabel != null && item.label.freLabel != \"\" ? item.label.freLabel : item.label.engLabel);\n                                case 4: return (item.label.spaLabel != null && item.label.spaLabel != \"\" ? item.label.spaLabel : item.label.engLabel);\n                                default: return item.label.engLabel;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n        return (\n            <div className=\"addUser\">\n                <form name=\"userForm\" id=\"userForm\">\n                    <h3>{TITLE_EDIT_USER}{this.state.user.userId}</h3>\n                    {REALM} : <select id=\"user.realm.realmId\" name=\"user.realm.realmId\" value={this.state.user.realm ? this.state.user.realm.realmId : ''} onChange={this.dataChange}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {realmList}\n                    </select><br></br><br></br>\n                    {USERNAME} : <input type=\"text\" id=\"user.username\" name=\"user.username\" value={this.state.user.username} onChange={this.dataChange} /><br></br><br></br>\n                    {EMAIL_ID} : <input type=\"text\" id=\"user.emailId\" name=\"user.emailId\" value={this.state.user.emailId} onChange={this.dataChange} /><br></br><br></br>\n                    {PHONE_NO} : <input type=\"text\" id=\"user.phoneNumber\" name=\"user.phoneNumber\" value={this.state.user.phoneNumber} onChange={this.dataChange} maxLength=\"15\" minLength=\"4\" /><br></br><br></br>\n                    {ROLE} : <select id=\"user.role.roleId\" name=\"user.role.roleId\" value={this.state.user.role ? this.state.user.role.roleId : ''} onChange={this.dataChange}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {roleList}\n                    </select><br></br><br></br>\n                    {PREFERRED_LANGUAGE} : <select id=\"user.language.languageId\" name=\"user.language.languageId\" value={this.state.user.language ? this.state.user.language.languageId : ''} onChange={this.dataChange}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {languagesList}\n                    </select><br></br><br></br>\n                    {ACTIVE}:\n                    <input type=\"radio\" id=\"user.active1\" name=\"user.active\" value={true} checked={this.state.user.active === true} onChange={this.dataChange} /> Active\n                    <input type=\"radio\" id=\"user.active2\" name=\"user.active\" value={false} checked={this.state.user.active === false} onChange={this.dataChange} /> Disabled\n                    <br></br><br></br>\n\n                    <button type=\"button\" onClick={this.updateClicked}>{BTN_UPDATE}</button>\n                    <button type=\"button\" onClick={this.cancelClicked}>{BTN_CANCEL}</button><br></br><br></br>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n    updateClicked() {\n        if (navigator.onLine) {\n            if (AuthenticationService.checkTypeOfSession()) {\n                var json = this.state.user;\n                if ($(\"#userForm\").valid()) {\n                    UserService.editUser(json)\n                        .then(response => {\n                            this.props.history.push(`/userList/${response.data.message}`)\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline.Please login again to continue.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/userList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport RegistrationService from '../../api/RegistrationService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\n\nexport default class EditUserApprovalComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.dataChange = this.dataChange.bind(this);\n        this.submitUserApproval = this.submitUserApproval.bind(this);\n        this.state = {\n            registrationId: this.props.match.params.registrationId,\n            status:true\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    dataChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"editUserApproval\">\n                <form name=\"form1\" id=\"form1\" onSubmit={this.submitUserApproval}>\n                    <h3>User Approval</h3>\n                    <input type=\"hidden\" id=\"registrationId\" name=\"registrationId\" value={this.props.match.params.registrationId}></input>\n                    Email Id : <input type=\"text\" id=\"emailId\" name=\"emailId\" readOnly value={this.props.match.params.emailId} /><br></br><br></br>\n                    Status:\n                    <input type=\"radio\" id=\"status\" name=\"status\" value=\"TRUE\" onChange={this.dataChange} checked/> Approve\n                    <input type=\"radio\" id=\"status\" name=\"status\" onChange={this.dataChange} value=\"FALSE\" /> Reject\n                    <br></br><br></br>\n                    Notes : <textarea id=\"notes\" name=\"notes\" onChange={this.dataChange}></textarea><br></br><br></br>\n                    <button type=\"submit\">Submit</button><br></br><br></br>\n                </form>\n            </div>\n        )\n    }\n\n    submitUserApproval(event) {\n        event.preventDefault();\n        if (navigator.onLine) {\n            if($(\"#form1\").valid()){\n            var json = this.state\n            console.log(json);\n            RegistrationService.saveApproval(json)\n                .then(response => {\n                    this.props.history.push(`/listUserApproval/Approval updated successfully`)\n                })\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.response.data.message\n                                })\n                                break\n                        }\n                    }\n                );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n\n}\n\n","import axios from \"axios\";\nimport {API_URL} from '../Constants.js' \n\nclass SignUpService {\n    getCountryList() {\n        return axios.get(`${API_URL}/api/getCountryList`, {\n        });\n    }\n\n    getStateListByCountryId(countryId) {\n        return axios.get(`${API_URL}/api/getStateListByCountryId/${countryId}`, {\n        });\n    }\n    getStateList() {\n        return axios.get(`${API_URL}/api/getStateList`, {\n        });\n    }\n\n    getCityListByStateIdAndCountryId(countryId, stateId) {\n        return axios.get(`${API_URL}/api/getCityList/${countryId}/${stateId}`, {\n        });\n    }\n    getCityList() {\n        return axios.get(`${API_URL}/api/getCityList`, {\n        });\n    }\n\n    saveRegistration(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`${API_URL}/api/saveRegistration/`, json, {\n        });\n    }\n}\n\nexport default new SignUpService()","import React, { Component } from 'react';\nimport UserService from \"../../api/UserService.js\";\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as labels from '../../Labels.js'\n\n\nexport default class RoleListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            roles: [],\n            message: \"\"\n        }\n        this.editRole = this.editRole.bind(this);\n        this.addNewRole = this.addNewRole.bind(this);\n    }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You are offline.Please login again to continue in offline mode.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getRoleList()\n            .then(response => {\n                console.log(\"rol list---\" + response.data);\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    render() {\n        return (\n            <div className=\"roleList\">\n                <p>{this.props.match.params.message}</p>\n                <h3>{this.state.message}</h3>\n                <div>{labels.TITLE_ROLE_LIST}</div>\n                <button className=\"btn btn-add\" type=\"button\" style={{ marginLeft: '-736px' }} onClick={this.addNewRole}>{labels.TITLE_ADD_ROLE}</button><br /><br />\n                <table border=\"1\" align=\"center\">\n                    <thead>\n                        <tr>\n                            <th>{labels.ROLE_ID}</th>\n                            <th>{labels.ROLE_NAME_ENG}</th>\n                            <th>{labels.ROLE_NAME_POR}</th>\n                            <th>{labels.ROLE_NAME_FRE}</th>\n                            <th>{labels.ROLE_NAME_SPA}</th>\n                            <th>{labels.BTN_EDIT}</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.roles.map(role =>\n                                <tr key={role.roleId} onClick={() => this.editRole(role)}>\n                                    <td>{role.roleId}</td>\n                                    <td>{role.label.engLabel}</td>\n                                    <td>{role.label.porLabel}</td>\n                                    <td>{role.label.freLabel}</td>\n                                    <td>{role.label.spaLabel}</td>\n                                    <td><button type=\"button\" onClick={() => this.editRole(role)}>{labels.BTN_EDIT}</button></td>\n                                </tr>)\n                        }\n                    </tbody>\n                </table>\n                <br />\n            </div>\n        );\n    }\n    editRole(role) {\n        this.props.history.push({\n            pathname: \"/editRole\",\n            state: { role: role }\n        });\n    }\n    addNewRole() {\n        if (navigator.onLine) {\n            this.props.history.push(`/addRole`);\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n\n}","import axios from \"axios\";\nimport {API_URL} from '../Constants.js'\nclass LanguageService{\n\naddLanguage(json){\n    return axios.put(`${API_URL}/api/addLanguage/`, json, {\n    });\n}\n\ngetLanguageList() {\n    return axios.get(`${API_URL}/api/getLanguageListAll/`, {\n    });\n}\ngetLanguageListActive() {\n    return axios.get(`${API_URL}/api/getLanguageList/`, {\n    });\n}\neditLanguage(json) {\n    return axios.put(`${API_URL}/api/editLanguage/`, json, {\n    });\n}\n\n}\n\nexport default new LanguageService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport * as myConst from '../../Labels.js';\nimport LanguageService from '../../api/LanguageService.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nclass AddLanguageComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            languageName: ''\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n    }\n    updateFieldData(event) {\n        this.setState(\n            {\n                [event.target.name]: event.target.value\n            }\n        )\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        $(\"#languageForm\").validate({\n            ignore: [],\n            rules: {\n                languageName: {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 100\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    submitForm(event) {\n        if (navigator.onLine) {\n            console.log(\"user in online-----\");\n            if ($(\"#languageForm\").valid()) {\n                LanguageService.addLanguage(this.state).then(response => {\n                    this.props.history.push(`/languageList/${response.data.message}`)\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n        } else {\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <h3>{myConst.ADD_LANGUAGE}</h3>\n                <form name=\"languageForm\" id=\"languageForm\">\n                    <div>\n                        <label>{myConst.LANGUAGE_NAME}:-</label>\n                        <input type=\"text\" name=\"languageName\" value={this.state.languageName} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n        );\n    }\n}\nexport default AddLanguageComponent;","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport * as labels from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport '../../css/bootstrap/bootstrap.min.css';\nimport '../../App.css'\n\n\nexport default class AddRoleComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            businessFunctions: [],\n            roles: [],\n            message: '',\n            languageId: AuthenticationService.getLanguageId(),\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        // this.dataChange = this.dataChange.bind(this);\n        // this.handleChange = this.handleChange.bind(this);\n    }\n\n    // dataChange(event) {\n    //     let { role } = this.state\n    //     // console.log(\"business function---\", event.target.value);\n    //     console.log(\"name---------------\" + event.target.name);\n    //     switch (event.target.name) {\n    //         case \"role.label.engLabel\": role.label.engLabel = event.target.value;\n    //         case \"role.label.porLabel\": role.label.porLabel = event.target.value;\n    //         case \"role.label.freLabel\": role.label.freLabel = event.target.value;\n    //         case \"role.label.spaLabel\": role.label.spaLabel = event.target.value;\n    //         case \"role.businessFunctions\": role.businessFunctions = Array.from(event.target.selectedOptions, (item) => item.value);\n    //         case \"role.canCreateRole\": role.canCreateRole = event.target.value;\n    //         default: [event.target.name] = event.target.value;\n    //     }\n\n    //     this.setState({\n    //         role\n    //     }, (\n    //     ) => {\n    //         console.log(\"state after update---\", this.state.role)\n    //     })\n    // }\n\n    // handleChange(event) {\n    //     this.setState({\n    //         role: {\n    //             label: {\n    //                 engLabel: ''\n    //             },\n    //             businessFunctions: Array.from(event.target.selectedOptions, (item) => item.value)\n    //         }\n    //     }, (\n    //     ) => {\n    //         console.log(\"state after update---\", this.state.role)\n    //     });\n    // }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You are offline.Please login again to continue in offline mode.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getBusinessFunctionList()\n            .then(response => {\n                console.log(\"business functions---\", response.data);\n                this.setState({\n                    businessFunctions: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                console.log(\"role list---\", response.data);\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n\n\n        $(\"#roleForm\").validate({\n            ignore: [],\n            rules: {\n                'role.label.engLabel': {\n                    required: true,\n                    // lettersonly: true,\n                    maxlength: 255\n\n                },\n                'role.label.porLabel': {\n                    // lettersonly: true,\n                    maxlength: 255\n                },\n                'role.label.freLabel': {\n                    // lettersonly: true,\n                    maxlength: 255\n                },\n                'role.label.spaLabel': {\n                    // lettersonly: true,\n                    maxlength: 255\n                },\n                'role.businessFunctions': {\n                    required: true\n                },\n                'role.canCreateRole': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { businessFunctions } = this.state;\n        const { roles } = this.state;\n\n        let businessFunctionsList = businessFunctions.length > 0\n            && businessFunctions.map((item, i) => {\n                return (\n                    <>\n                        <option key={i} value={item.businessFunctionId}>\n                            {(() => {\n                                switch (this.state.languageId) {\n                                    case 2: return (item.label.porLabel != null && item.label.porLabel != \"\" ? item.label.porLabel : item.label.engLabel);\n                                    case 3: return (item.label.freLabel != null && item.label.freLabel != \"\" ? item.label.freLabel : item.label.engLabel);\n                                    case 4: return (item.label.spaLabel != null && item.label.spaLabel != \"\" ? item.label.spaLabel : item.label.engLabel);\n                                    default: return item.label.engLabel;\n                                }\n                            })()}\n                        </option>\n                    </>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.porLabel != null && item.label.porLabel != \"\" ? item.label.porLabel : item.label.engLabel);\n                                case 3: return (item.label.freLabel != null && item.label.freLabel != \"\" ? item.label.freLabel : item.label.engLabel);\n                                case 4: return (item.label.spaLabel != null && item.label.spaLabel != \"\" ? item.label.spaLabel : item.label.engLabel);\n                                default: return item.label.engLabel;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n        return (\n            <div class=\"page-container page-navigation-toggled page-container-wide\">\n                <div class=\"page-content\">\n                    <ul class=\"breadcrumb\">\n                        <li><a href=\"#\">Home</a></li>\n                        <li><a href=\"#\">Admin</a></li>\n                        <li><a href=\"#\">Role</a></li>\n                        <li><a href=\"#\">Add Role</a></li>\n                    </ul>\n                    <div class=\"page-content-wrap\">\n                        <div><h5>{this.state.message}</h5></div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n\n                                <form name=\"roleForm\" id=\"roleForm\" class=\"form-horizontal\">\n                                    <div class=\"panel panel-default\">\n                                        <div class=\"panel-heading\">\n                                            <h3 class=\"panel-title\">{labels.TITLE_ADD_ROLE}</h3>\n                                        </div>\n                                        <div class=\"panel-body\">\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_ENG}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.engLabel\" class=\"form-control\" name=\"role.label.engLabel\" />\n                                                    \n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_POR}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.porLabel\" name=\"role.label.porLabel\" class=\"form-control\" />\n                                                    \n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_FRE}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.freLabel\" name=\"role.label.freLabel\" class=\"form-control\" />\n                                                    \n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_SPA}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.spaLabel\" name=\"role.label.spaLabel\" class=\"form-control\" />\n                                                    \n                                                </div>\n                                            </div>\n\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.BUSINESS_FUNCTION}[Spanish]</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"role.businessFunctions\" class=\"form-control select\" data-live-search=\"true\" data-actions-box=\"true\" name=\"role.businessFunctions\" multiple={true}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {businessFunctionsList}\n                                                    </select>\n                                                    \n                                                </div>\n                                            </div>\n\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.CAN_CREATE_ROLE}[Spanish]</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"role.canCreateRole\" className=\"form-control select\" data-live-search=\"true\" data-actions-box=\"true\" name=\"role.canCreateRole\" multiple={true} onChange={this.dataChange}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {roleList}\n                                                    </select>\n                                                    \n                                                </div>\n                                            </div>\n                                            <button type=\"button\" className=\"btn btn-success\" onClick={this.submitClicked}>{labels.BTN_SUBMIT}</button>\n                                            <button type=\"button\" className=\"btn btn-danger\" onClick={this.cancelClicked}>{labels.BTN_CANCEL}</button><br></br><br></br>\n\n                                        </div>\n                                        <div class=\"panel-footer\">\n                                            <div class=\"pull-right\">\n\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    submitClicked() {\n        console.log($(\"#role\\\\.businessFunctions\").val())\n        if (navigator.onLine) {\n            if (AuthenticationService.checkTypeOfSession()) {\n                if ($(\"#roleForm\").valid()) {\n                    var json = {\n                        label: {\n                            engLabel: $(\"#role\\\\.label\\\\.engLabel\").val(),\n                            porLabel: $(\"#role\\\\.label\\\\.porLabel\").val(),\n                            freLabel: $(\"#role\\\\.label\\\\.freLabel\").val(),\n                            spaLabel: $(\"#role\\\\.label\\\\.spaLabel\").val()\n                        },\n                        businessFunctions: $(\"#role\\\\.businessFunctions\").val(),\n                        canCreateRole: $(\"#role\\\\.canCreateRole\").val()\n                    }\n                    UserService.addNewRole(json)\n                        .then(response => {\n                            this.props.history.push(`/roleList/${response.data.message}`)\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline.Please login again to continue.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/roleList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from '../../api/UserService'\nimport CryptoJS from 'crypto-js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\nimport bcrypt from 'bcryptjs';\nimport { SECRET_KEY } from '../../Constants.js'\n\n\nexport default class UpdateExpiredPasswordComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.logoutClicked = this.logoutClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        $.validator.addMethod('checkPassword', function () {\n            if ($('#newPassword').val() === $('#confirmNewPassword').val()) {\n                return true;\n            } else {\n                return false;\n            }\n        }, 'The New passwords do not match.');\n\n        // $.validator.addMethod('checkOldPassword', function () {\n        //     let userOff = JSON.parse(localStorage.getItem('user'));\n        //     let val;\n        //     console.log(\"password---\"+$('#oldPassword').val())\n        //     bcrypt.compare($('#oldPassword').val(), userOff.password, function (err, res) {\n        //         console.log(\"res---\"+res);\n        //             val = res; \n        //     });\n        //     if (val === true) {\n        //         return true;\n        //     } \n        //     if(val === false) {\n        //         return false;\n        //     }\n        //     // return val;\n        // }, 'Old password is incorrect.');\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                oldPassword: {\n                    required: true\n                },\n                newPassword: {\n                    required: true\n                },\n                confirmNewPassword: {\n                    required: true,\n                    checkPassword: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"login\">\n                <form name=\"form1\" id=\"form1\">\n                    <h3>Update Password</h3>\n                    Old password : <input type=\"password\" id=\"oldPassword\" name=\"oldPassword\" /><br></br><br></br>\n                    New password : <input type=\"password\" id=\"newPassword\" name=\"newPassword\" /><br></br><br></br>\n                    Confirm new password : <input type=\"password\" id=\"confirmNewPassword\" name=\"confirmNewPassword\" /><br></br><br></br>\n                    <Online><button type=\"button\" onClick={this.submitClicked}>Submit</button></Online>\n                    <Online><button type=\"button\" onClick={this.logoutClicked}>Logout</button><br></br><br></br></Online>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n\n    submitClicked() {\n        if ($(\"#form1\").valid()) {\n            if (navigator.onLine) {\n                UserService.updateExpiredPassword(AuthenticationService.getLoggedInUserId(),$('#oldPassword').val(),$('#newPassword').val())\n                    .then(response => {\n                        console.log(response.data.data)\n                        localStorage.setItem('password', CryptoJS.AES.encrypt((response.data.data).toString(), `${SECRET_KEY}`));\n                        this.props.history.push(`/welcome/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            console.log(error.message);\n                            console.log(error.text);\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            } else {\n                alert(\"You must be Online to update the password.\")\n            }\n        }\n    }\n\n    logoutClicked() {\n        this.props.history.push(`/login/You are logged out.`)\n    }\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from '../../api/UserService'\nimport CryptoJS from 'crypto-js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\nimport bcrypt from 'bcryptjs';\nimport { SECRET_KEY } from '../../Constants.js'\n\n\nexport default class ChangePasswordComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.logoutClicked = this.logoutClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        $.validator.addMethod('checkPassword', function () {\n            if ($('#newPassword').val() === $('#confirmNewPassword').val()) {\n                return true;\n            } else {\n                return false;\n            }\n        }, 'The New passwords do not match.');\n\n        // $.validator.addMethod('checkOldPassword', function () {\n        //     let userOff = JSON.parse(localStorage.getItem('user'));\n        //     let val;\n        //     console.log(\"password---\"+$('#oldPassword').val())\n        //     bcrypt.compare($('#oldPassword').val(), userOff.password, function (err, res) {\n        //         console.log(\"res---\"+res);\n        //             val = res; \n        //     });\n        //     if (val === true) {\n        //         return true;\n        //     } \n        //     if(val === false) {\n        //         return false;\n        //     }\n        //     // return val;\n        // }, 'Old password is incorrect.');\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                oldPassword: {\n                    required: true\n                },\n                newPassword: {\n                    required: true\n                },\n                confirmNewPassword: {\n                    required: true,\n                    checkPassword: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"login\">\n                <form name=\"form1\" id=\"form1\">\n                    <h3>Update Password</h3>\n                    Old password : <input type=\"password\" id=\"oldPassword\" name=\"oldPassword\" /><br></br><br></br>\n                    New password : <input type=\"password\" id=\"newPassword\" name=\"newPassword\" /><br></br><br></br>\n                    Confirm new password : <input type=\"password\" id=\"confirmNewPassword\" name=\"confirmNewPassword\" /><br></br><br></br>\n                    <Online><button type=\"button\" onClick={this.submitClicked}>Submit</button></Online>\n                    <Online><button type=\"button\" onClick={this.logoutClicked}>Logout</button><br></br><br></br></Online>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n\n    submitClicked() {\n        if ($(\"#form1\").valid()) {\n            if (navigator.onLine) {\n                UserService.updateExpiredPassword(AuthenticationService.getLoggedInUserId(),$('#oldPassword').val(),$('#newPassword').val())\n                    .then(response => {\n                        console.log(response.statusText)\n                        localStorage.setItem('password', CryptoJS.AES.encrypt((response.data.data).toString(), `${SECRET_KEY}`));\n                        this.props.history.push(`/welcome/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            console.log(error.message);\n                            console.log(error.text);\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            } else {\n                alert(\"You must be Online to update the password.\")\n            }\n        }\n    }\n\n    logoutClicked() {\n        this.props.history.push(`/login/You are logged out.`)\n    }\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from '../../api/UserService'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\n\nexport default class ForgotPasswordComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                username: {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"login\">\n                <form name=\"form1\" id=\"form1\">\n                    <h3>Forgot Password</h3>\n                    Username : <input type=\"text\" id=\"username\" name=\"username\" /><br></br><br></br>\n                    <Online><button type=\"button\" onClick={this.submitClicked}>Submit</button></Online>\n                    <Online><button type=\"button\" onClick={this.cancelClicked}>Cancel</button><br></br><br></br></Online>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n\n    submitClicked() {\n        if ($(\"#form1\").valid()) {\n            if (navigator.onLine) {\n                UserService.forgotPassword($('#username').val())\n                    .then(response => {\n                        // console.log(response.statusText)\n                        this.props.history.push(`/login/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            console.log(error.message);\n                            console.log(error.text);\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            } else {\n                alert(\"You must be Online to update the password.\")\n            }\n        }\n    }\n\n    cancelClicked() {\n        this.props.history.push(`/login/Action Canceled.`)\n    }\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport * as labels from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport '../../css/bootstrap/bootstrap.min.css';\nimport '../../App.css'\n\n\nexport default class AddRoleComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            businessFunctions: [],\n            roles: [],\n            message: '',\n            languageId: AuthenticationService.getLanguageId(),\n            role: this.props.location.state.role\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n        // this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You are offline.Please login again to continue in offline mode.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        // this.setState({\n        //     role: this.props.location.state.role\n        // });\n        UserService.getBusinessFunctionList()\n            .then(response => {\n                console.log(\"business functions---\", response.data);\n                this.setState({\n                    businessFunctions: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                console.log(\"role list---\", response.data);\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n\n\n        $(\"#roleForm\").validate({\n            ignore: [],\n            rules: {\n                'role.label.engLabel': {\n                    required: true,\n                    // lettersonly: true,\n                    maxlength: 255\n\n                },\n                'role.label.porLabel': {\n                    // lettersonly: true,\n                    maxlength: 255\n                },\n                'role.label.freLabel': {\n                    // lettersonly: true,\n                    maxlength: 255\n                },\n                'role.label.spaLabel': {\n                    // lettersonly: true,\n                    maxlength: 255\n                },\n                'role.businessFunctions': {\n                    required: true\n                },\n                'role.canCreateRole': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    dataChange(event) {\n        let { role } = this.state\n        console.log(\"name---------------\" + event.target.name);\n        if (event.target.name === \"role.label.engLabel\") {\n            role.label.engLabel = event.target.value\n        } else if (event.target.name === \"role.label.porLabel\") {\n            role.label.porLabel = event.target.value\n        }\n        else if (event.target.name === \"role.label.freLabel\") {\n            role.label.freLabel = event.target.value\n        }\n        else if (event.target.name === \"role.label.spaLabel\") {\n            role.label.spaLabel = event.target.value\n        }\n        else if (event.target.name === \"role.businessFunctions\") {\n            role.businessFunctions = Array.from(event.target.selectedOptions, (item) => item.value)\n        }\n\n        else if (event.target.name === \"role.canCreateRole\") {\n            role.canCreateRole = Array.from(event.target.selectedOptions, (item) => item.value)\n        }\n        // switch (event.target.name) {\n        //     case \"role.label.engLabel\": role.label.engLabel = event.target.value;\n        //     case \"role.label.porLabel\": role.label.porLabel = event.target.value;\n        //     case \"role.label.freLabel\": role.label.freLabel = event.target.value;\n        //     case \"role.label.spaLabel\": role.label.spaLabel = event.target.value;\n        //     // case \"role.businessFunctions\": role.businessFunctions = Array.from(event.target.selectedOptions, (item) => item.value);\n        //     // case \"role.canCreateRole\": role.canCreateRole = event.target.value;\n        //     // default: [event.target.name] = event.target.value;\n        // }\n\n        this.setState({\n            role\n        }, (\n        ) => {\n            console.log(\"state after update---\", this.state.role)\n        })\n    }\n\n\n    render() {\n        const { businessFunctions } = this.state;\n        const { roles } = this.state;\n\n        let businessFunctionsList = businessFunctions.length > 0\n            && businessFunctions.map((item, i) => {\n                return (\n                    <>\n                        <option key={i} value={item.businessFunctionId}>\n                            {(() => {\n                                switch (this.state.languageId) {\n                                    case 2: return (item.label.porLabel != null && item.label.porLabel != \"\" ? item.label.porLabel : item.label.engLabel);\n                                    case 3: return (item.label.freLabel != null && item.label.freLabel != \"\" ? item.label.freLabel : item.label.engLabel);\n                                    case 4: return (item.label.spaLabel != null && item.label.spaLabel != \"\" ? item.label.spaLabel : item.label.engLabel);\n                                    default: return item.label.engLabel;\n                                }\n                            })()}\n                        </option>\n                    </>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.porLabel != null && item.label.porLabel != \"\" ? item.label.porLabel : item.label.engLabel);\n                                case 3: return (item.label.freLabel != null && item.label.freLabel != \"\" ? item.label.freLabel : item.label.engLabel);\n                                case 4: return (item.label.spaLabel != null && item.label.spaLabel != \"\" ? item.label.spaLabel : item.label.engLabel);\n                                default: return item.label.engLabel;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n        return (\n            <div class=\"page-container page-navigation-toggled page-container-wide\">\n                <div class=\"page-content\">\n                    <ul class=\"breadcrumb\">\n                        <li><a href=\"#\">Home</a></li>\n                        <li><a href=\"#\">Admin</a></li>\n                        <li><a href=\"#\">Role</a></li>\n                        <li><a href=\"#\">Edit Role</a></li>\n                    </ul>\n                    <div class=\"page-content-wrap\">\n                        <div><h5>{this.state.message}</h5></div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n\n                                <form name=\"roleForm\" id=\"roleForm\" class=\"form-horizontal\">\n                                    <div class=\"panel panel-default\">\n                                        <div class=\"panel-heading\">\n                                            <h3 class=\"panel-title\">{labels.TITLE_EDIT_ROLE}</h3>\n                                        </div>\n                                        <div class=\"panel-body\">\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_ENG}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.engLabel\" class=\"form-control\" name=\"role.label.engLabel\" value={this.state.role.label.engLabel} onChange={this.dataChange} readOnly={true} />\n                                                    \n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_POR}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.porLabel\" name=\"role.label.porLabel\" class=\"form-control\" value={this.state.role.label.porLabel} onChange={this.dataChange} readOnly={true} />\n                                                    \n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_FRE}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.freLabel\" name=\"role.label.freLabel\" class=\"form-control\" value={this.state.role.label.freLabel} onChange={this.dataChange} readOnly={true} />\n                                                    \n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_SPA}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.spaLabel\" name=\"role.label.spaLabel\" class=\"form-control\" value={this.state.role.label.spaLabel} onChange={this.dataChange} readOnly={true} />\n                                                    \n                                                </div>\n                                            </div>\n\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.BUSINESS_FUNCTION}[Spanish]</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"role.businessFunctions\" class=\"form-control select\" data-live-search=\"true\" data-actions-box=\"true\" name=\"role.businessFunctions\" multiple={true} value={this.state.role.businessFunctions} onChange={this.dataChange} placeholder=\"Please select business function\">\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {businessFunctionsList}\n                                                    </select>\n                                                    \n                                                </div>\n                                            </div>\n\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.CAN_CREATE_ROLE}[Spanish]</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"role.canCreateRole\" className=\"form-control select\" data-live-search=\"true\" data-actions-box=\"true\" name=\"role.canCreateRole\" multiple={true} value={this.state.role.canCreateRole} onChange={this.dataChange}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {roleList}\n                                                    </select>\n                                                    \n                                                </div>\n                                            </div>\n                                            <button type=\"button\" className=\"btn btn-success\" onClick={this.submitClicked}>{labels.BTN_UPDATE}</button>\n                                            <button type=\"button\" className=\"btn btn-danger\" onClick={this.cancelClicked}>{labels.BTN_CANCEL}</button><br></br><br></br>\n\n                                        </div>\n                                        <div class=\"panel-footer\">\n                                            <div class=\"pull-right\">\n\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    submitClicked() {\n        console.log($(\"#role\\\\.businessFunctions\").val())\n        if (navigator.onLine) {\n            if (AuthenticationService.checkTypeOfSession()) {\n                if ($(\"#roleForm\").valid()) {\n\n                    UserService.editRole(this.state.role)\n                        .then(response => {\n                            this.props.history.push(`/roleList/${response.data.message}`)\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline.Please login again to continue.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/roleList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport LanguageService from '../../api/LanguageService.js'\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\n\nexport default class LanguageListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            langaugeList: []\n        }\n        this.editLanguage = this.editLanguage.bind(this);\n        this.addNewLanguage = this.addNewLanguage.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        LanguageService.getLanguageList()\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    langaugeList: response.data\n                })\n            })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n    }\n\n    editLanguage(language) {\n        this.props.history.push({\n            pathname: \"/editLanguage\",\n            state: { language: language }\n        });\n    }\n\n    addNewLanguage(){\n        if (navigator.onLine) {\n            this.props.history.push(`/addLanguage`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n    }\n\n    render() {\n        return (\n            <>\n            <div>\n             <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewLanguage}>{myConst.ADD_NEW_LANGUAGE_TITLE}</button><br /><br />\n            </div>  \n              <div className=\"langaugeList\">\n\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.LANGUAGE_NAME}</th>\n                                <th>{myConst.IS_ACTIVE}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.langaugeList.map(language =>\n\n                                    <tr key={language.languageId} onClick={() => this.editLanguage(language)}>\n                                        <td>{language.languageName}</td>\n                                        <td>{language.active.toString()}</td>\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </>\n        );\n    }\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport LanguageService from '../../api/LanguageService.js'\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\n\nexport default class EditLanguageComponent extends Component {\n\n    constructor(props) {\n\n        super(props);\n        this.state = { language: '' }\n\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n    }\n    componentDidMount() {\n       AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            language: this.props.location.state.language\n        });\n        console.log(this.state);\n        $(\"#updateLanguageForm\").validate({\n            ignore: [],\n            rules: {\n                'language.languageName': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 100\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    updateFieldData(event) {\n\n        let { language } = this.state\n\n        if (event.target.name === \"language.languageName\") {\n            console.log(\"inside if\")\n            language.languageName = event.target.value\n        } else if (event.target.name === \"language.active\") {\n            language.active = event.target.id === \"language.active2\" ? false : true\n        }\n\n        this.setState(\n            {\n                language\n            }\n        );\n    }\n\n    updateForm() {\n        if (navigator.onLine) {\n            if ($(\"#updateLanguageForm\").valid()) {\n\n                LanguageService.editLanguage(this.state.language).then(response => {\n                    this.props.history.push(`/languageList/${response.data.message}`)\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n\n            }\n        } else { alert(\"To perform this action you must be online.\"); }\n    }\n\n    render() {\n\n        return (\n            <>\n                <h3>{myConst.UPDATE_LANGUAGE}</h3>\n                <form name=\"updatyeLanguageForm\" id=\"updateLanguageForm\">\n                    <div>\n                        <label>{myConst.LANGUAGE_NAME}:-</label>\n                        <input type=\"text\" name=\"language.languageName\" value={this.state.language.languageName} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <div>\n                            {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"language.active1\" name=\"language.active\" value={true} checked={this.state.language.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"language.active2\" name=\"language.active\" value={false} checked={this.state.language.active === false} onChange={this.updateFieldData} /> Disabled\n        </div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n\n        );\n    }\n}","import axios from \"axios\";\nimport {API_URL} from '../Constants.js';\n\nclass DataSourceTypeService{\n\naddDataSourceType(json){\nreturn axios.put(`${API_URL}/api/addDataSourceType/`,json,{}\n);\n}\n\ngetDataSourceTypeList() {\n    return axios.get(`${API_URL}/api/getDataSourceTypeList/`, {\n    });\n}\n\ngetDataSourceTypeListActive() {\n    return axios.get(`${API_URL}/api/getDataSourceTypeListActive/`, {\n    });\n}\n\neditDataSourceType(json) {\n    return axios.put(`${API_URL}/api/editDataSourceType/`, json, {\n    });\n}\n}\nexport default new DataSourceTypeService();","import React,{Component} from 'react';\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport DataSourceTypeService from '../../api/DataSourceTypeService.js'\n\nexport default class AddDataSourceTypeComponent extends Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            \n         }\n\n         this.updateFieldData=this.updateFieldData.bind(this);\n         this.submitForm=this.submitForm.bind(this);\n\n    }\n\n    componentDidMount(){\n        AuthenticationService.setupAxiosInterceptors();\n        $(\"#dataSourceTypeForm\").validate({\n            ignore: [],\n            rules: {\n                'engLabel': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'freLabel': {\n                   \n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'spaLabel': {\n                    \n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'porLabel': {\n                    \n                    lettersonly: true,\n                    maxlength: 255\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n\n    }\n\n    updateFieldData(event){\n       //console.log(event.target.name); \n        this.setState(\n           {\n                [event.target.name]: event.target.value      \n            }\n        )\n\n    }\n\n    submitForm(){\n        if (navigator.onLine) {\n            if ($(\"#dataSourceTypeForm\").valid()) {\n                console.log(this.state);\n                DataSourceTypeService.addDataSourceType(this.state).then(response => {\n                    this.props.history.push(`/dataSourceTypeList/${response.data.message}`)\n                    console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n               \n\n\n            }\n        }else{\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\nrender(){\n        return(\n         <>\n        <h3>{myConst.ADD_DATASOURCE_TYPE}</h3>\n                <form name=\"dataSourceTypeForm\" id=\"dataSourceTypeForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"engLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"freLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"spaLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"porLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n        </>);\n    }\n}","import React, { Component } from 'react';\nimport DataSourceTypeService from '../../api/DataSourceTypeService'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\n\nexport default class DataSourceListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSourceList: []\n\n        }\n\n        this.editDataSourceType = this.editDataSourceType.bind(this);\n        this.addNewDataSourceType = this.addNewDataSourceType.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        DataSourceTypeService.getDataSourceTypeList().then(response => {\n            //console.log(response.data)\n            this.setState({\n                dataSourceList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    editDataSourceType(dataSourceType) {\n        this.props.history.push({\n            pathname: \"/editDataSourceType\",\n            state: { dataSourceType: dataSourceType }\n        });\n\n    }\n\n    addNewDataSourceType() {\n\n        if (navigator.onLine) {\n            this.props.history.push(`/addDataSourceType`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n\n    }\n    render() {\n        return (\n            <>\n\n\n                <div>\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewDataSourceType}>{myConst.ADD_NEW_DATA_SOURCE_TYPE}</button><br /><br />\n                </div>\n\n                <div className=\"dataSourceTypeList\">\n\n                    <h1>{myConst.DATA_SOURCE_TYPE_LIST}</h1>\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_EN}</th>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_FR}</th>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_SP}</th>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_PO}</th>\n                                <th>{myConst.DATA_SOURCE_TYPE_ACTIVE}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.dataSourceList.map(dataSourceType =>\n\n                                    <tr key={dataSourceType.dataSourceTypeId} onClick={() => this.editDataSourceType(dataSourceType)}>\n                                        <td>{dataSourceType.label.engLabel}</td>\n                                        <td>{dataSourceType.label.freLabel}</td>\n                                        <td>{dataSourceType.label.spaLabel}</td>\n                                        <td>{dataSourceType.label.porLabel}</td>\n                                        <td>{dataSourceType.active.toString()}</td>\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n            </>\n        );\n    }\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport DataSourceTypeService from '../../api/DataSourceTypeService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class UpdateDataSourceTypeComponent extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSourceType:\n            {\n                active: '',\n                labelId: '',\n                label: {\n                    engLabel: '',\n                    spaLabel: '',\n                    freLabel: '',\n                    porLabel: ''\n                }\n            }\n        }\n\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        console.log(this.props.location.state.dataSourceType);\n        this.setState({\n            dataSourceType: this.props.location.state.dataSourceType\n        });\n\n\n        $(\"#updatyeDataSourceTypeForm\").validate({\n            ignore: [],\n            rules: {\n                'dataSourceType.label.engLabel': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSourceType.label.freLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSourceType.label.spaLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSourceType.label.porLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n\n    updateFieldData(event) {\n        let { dataSourceType } = this.state\n\n        if (event.target.name === \"dataSourceType.label.engLabel\") {\n            console.log(\"inside if\")\n            dataSourceType.label.engLabel = event.target.value\n        } if (event.target.name === \"dataSourceType.label.freLabel\") {\n            console.log(\"inside if\")\n            dataSourceType.label.freLabel = event.target.value\n        } if (event.target.name === \"dataSourceType.label.spaLabel\") {\n            console.log(\"inside if\")\n            dataSourceType.label.spaLabel = event.target.value\n        } if (event.target.name === \"dataSourceType.label.porLabel\") {\n            console.log(\"inside if\")\n            dataSourceType.label.porLabel = event.target.value\n        } else if (event.target.name === \"dataSourceType.active\") {\n            dataSourceType.active = event.target.id === \"dataSourceType.active2\" ? false : true\n        }\n\n\n        this.setState(\n            {\n                dataSourceType\n            }\n        )\n    }\n\n    updateForm() {\n\n        if (navigator.onLine) {\n\n            if ($(\"#updatyeDataSourceTypeForm\").valid()) {\n\n                DataSourceTypeService.editDataSourceType(this.state.dataSourceType).then(response => {\n                    //this.props.history.push(`/languageList/${response.data.message}`)\n                    this.props.history.push(`/dataSourceTypeList/${response.data.message}`)\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n\n            }\n        }else{\n\n            alert(\"To perform this action you must be online.\");\n        }\n\n    }\n\n    render() {\n\n        return (\n            <>\n\n                <h3>{myConst.UPDATE_DATA_SOURCE_TYPE}</h3>\n                <form name=\"updatyeDataSourceTypeForm\" id=\"updatyeDataSourceTypeForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.engLabel\" value={this.state.dataSourceType.label.engLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.freLabel\" value={this.state.dataSourceType.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.spaLabel\" value={this.state.dataSourceType.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.porLabel\" value={this.state.dataSourceType.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"dataSourceType.active1\" name=\"dataSourceType.active\" value={true} checked={this.state.dataSourceType.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"dataSourceType.active2\" name=\"dataSourceType.active\" value={false} checked={this.state.dataSourceType.active === false} onChange={this.updateFieldData} /> Disabled\n                     </div>\n                    <input type=\"hidden\" name=\"dataSourceType.labelId\" value={this.state.dataSourceType.labelId} />\n                    <div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                    </div>\n                </form>\n\n\n\n            </>\n        );\n    }\n\n\n}\n\n","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass DataSourceService {\n\n    addDataSource(json) {\n        return axios.put(`${API_URL}/api/addDataSource/`, json, {}\n        );\n    }\n\n    getDataSourceList() {\n        return axios.get(`${API_URL}/api/getDataSourceList/`, {\n        });\n    }\n\n    editDataSource(json) {\n        return axios.put(`${API_URL}/api/editDataSource/`,json,{}\n            );\n        }\n    \n}\nexport default new DataSourceService();","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport DataSourceService from '../../api/DataSourceService';\nimport DataSourceTypeService from '../../api/DataSourceTypeService';\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class AddDataSource extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            label: {\n                engLabel: '',\n                freLabel: '',\n                spaLabel: '',\n                porLabel: ''\n            },\n            dataSourceType: {\n                dataSourceTypeId: ''\n            },\n            dataSourceTypeList: []\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        DataSourceTypeService.getDataSourceTypeListActive().then(response => {\n            //console.log(response.data)\n            this.setState({\n                dataSourceTypeList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n        $(\"#dataSourceForm\").validate({\n            ignore: [],\n            rules: {\n                'label.engLabel': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'label.freLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'label.spaLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'label.porLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSourceType.dataSourceTypeId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    updateFieldData(event) {\n        if (event.target.name === \"label.engLabel\") {\n            //console.log(\"inside if\")\n            this.state.label.engLabel = event.target.value\n        }\n        if (event.target.name === \"label.freLabel\") {\n            //console.log(\"inside if\")\n            this.state.label.freLabel = event.target.value\n        } if (event.target.name === \"label.spaLabel\") {\n            //console.log(\"inside if\")\n            this.state.label.spaLabel = event.target.value\n        } if (event.target.name === \"label.porLabel\") {\n            //console.log(\"inside if\")\n            this.state.label.porLabel = event.target.value\n        }\n        else if (event.target.name === \"dataSourceType.dataSourceTypeId\") {\n            this.state.dataSourceType.dataSourceTypeId = event.target.value\n        }\n\n        let { dataSource } = this.state\n        this.setState(\n            {\n                dataSource\n            }\n        )\n\n\n    }\n\n    submitForm() {\n\n        if (navigator.onLine) {\n            if ($(\"#dataSourceForm\").valid()) {\n                console.log(this.state);\n                //delete this.state[\"dataSourceTypeList\"];\n                DataSourceService.addDataSource(this.state).then(response => {\n                    this.props.history.push(`/dataSourceList/${response.data.message}`)\n                    //console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n               \n\n            }\n        } else {\n            alert(\"To perform this action you must be online.\");\n\n        }\n\n    }\n\n\n    render() {\n        const { dataSourceTypeList } = this.state;\n        let dataSourceTypes = dataSourceTypeList.length > 0\n            && dataSourceTypeList.map((item, i) => {\n                return (\n                    <option key={i} value={item.dataSourceTypeId}>{item.label.engLabel}</option>\n                )\n            }, this);\n        return (\n            <>\n\n                <h3>{myConst.ADD_DATASOURCE}</h3>\n                <form name=\"dataSourceForm\" id=\"dataSourceForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"label.engLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"label.freLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"label.spaLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"label.porLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n\n                    <div>\n                        {myConst.SELECT_DATA_SOURCE_TYPE} : <select id=\"dataSourceTypeId\" name=\"dataSourceType.dataSourceTypeId\" onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {dataSourceTypes}\n                        </select>\n                    </div>\n                    <br></br>\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n        );\n\n    }\n\n}","import React,{Compoent, Component} from 'react';\nimport DataSourceService from '../../api/DataSourceService';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\n\n\nexport default class DataSourceListComponent extends Component{\n\nconstructor(props){\nsuper(props);\nthis.state={\ndataSourceList:[]\n\n}\nthis.editDataSource=this.editDataSource.bind(this);\nthis.addNewDataSource=this.addNewDataSource.bind(this);\n}\n\ncomponentDidMount() {\n    AuthenticationService.setupAxiosInterceptors();\n    DataSourceService.getDataSourceList().then(response => {        \n        this.setState({\n            dataSourceList: response.data\n        })\n    })\n        .catch(\n            error => {\n                switch (error.message) {\n                    case \"Network Error\":\n                        this.setState({\n                            message: error.message\n                        })\n                        break\n                    default:\n                        this.setState({\n                            message: error.message\n                        })\n                        break\n                }\n            }\n        );\n}\n\neditDataSource(dataSource) {\n    this.props.history.push({\n        pathname: \"/editDataSource\",\n        state: { dataSource: dataSource }\n    });\n\n}\n\naddNewDataSource(){\n\n    if (navigator.onLine) {\n        this.props.history.push(`/addDataSource`)\n    } else {\n        alert(\"You must be Online.\")\n    }\n\n}\n\nrender() {\n    return (\n        <>\n\n\n            <div>\n                <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewDataSource}>{myConst.ADD_NEW_DATA_SOURCE}</button><br /><br />\n            </div>\n\n            <div className=\"dataSourceList\">\n\n                <h1>{myConst.DATA_SOURCE_LIST}</h1>\n                <table border=\"1\" align=\"center\">\n                    <thead>\n                        <tr>\n                            <th>{myConst.DATASOURCE_NAME_EN}</th>\n                            <th>{myConst.DATASOURCE_NAME_FR}</th>\n                            <th>{myConst.DATASOURCE_NAME_SP}</th>\n                            <th>{myConst.DATASOURCE_NAME_PO}</th>\n                            <th>{myConst.DATASOURCE_ACTIVE}</th>\n\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.dataSourceList.map(dataSource =>\n\n                                <tr key={dataSource.dataSourceId} onClick={() => this.editDataSource(dataSource)}>\n                                    <td>{dataSource.label.engLabel}</td>\n                                    <td>{dataSource.label.freLabel}</td>\n                                    <td>{dataSource.label.spaLabel}</td>\n                                    <td>{dataSource.label.porLabel}</td>\n                                    <td>{dataSource.active.toString()}</td>\n                                </tr>\n                            )\n\n                        }\n                    </tbody>\n                </table>\n            </div>\n\n        </>\n    );\n}\n\n}","import React, { Component } from 'react';\nimport DataSourceTypeService from '../../api/DataSourceTypeService';\nimport DataSourceService from '../../api/DataSourceService';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class UpdateDataSourceComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            dataSource: {\n                active: '',\n                dataSourceId: '',\n                label: {\n                    engLabel: '',\n                    spaLabel: '',\n                    freLabel: '',\n                    porLabel: '',\n                    labelId: '',\n                },\n                dataSourceType: {\n                    dataSourceTypeId: ''\n                }\n            },\n            dataSourceTypeList: []\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n    }\n\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            dataSource: this.props.location.state.dataSource\n        });\n\n        DataSourceTypeService.getDataSourceTypeListActive().then(response => {\n            //console.log(response.data)\n            this.setState({\n                dataSourceTypeList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#updatyeDataSourceForm\").validate({\n            ignore: [],\n            rules: {\n                'dataSource.label.engLabel': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSource.label.freLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSource.label.spaLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSource.label.porLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSource.dataSourceType.dataSourceTypeId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n\n    updateFieldData(event) {\n\n        let { dataSource } = this.state\n\n        if (event.target.name === \"dataSource.label.engLabel\") {\n            // console.log(\"inside if\")\n            dataSource.label.engLabel = event.target.value\n        } if (event.target.name === \"dataSource.label.freLabel\") {\n            //onsole.log(\"inside if\")\n            dataSource.label.freLabel = event.target.value\n        } if (event.target.name === \"dataSource.label.spaLabel\") {\n            //console.log(\"inside if\")\n            dataSource.label.spaLabel = event.target.value\n        } if (event.target.name === \"dataSource.label.porLabel\") {\n            //console.log(\"inside if\")\n            dataSource.label.porLabel = event.target.value\n        } if (event.target.name === \"dataSource.dataSourceType.dataSourceTypeId\") {\n            this.state.dataSource.dataSourceType.dataSourceTypeId = event.target.value\n        } else if (event.target.name === \"dataSource.active\") {\n            dataSource.active = event.target.id = \"dataSource.active2\" ? false : true\n        }\n\n\n        this.setState(\n            {\n                dataSource\n            }\n        )\n\n\n    }\n    updateForm() {\n\n        if (navigator.onLine) {\n            if ($(\"#updatyeDataSourceForm\").valid()) {\n                //console.log(this.state);\n                DataSourceService.editDataSource(this.state.dataSource).then(response => {\n                    this.props.history.push(`/dataSourceList/${response.data.message}`)\n                    //console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n\n        } else {\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\n    render() {\n        const { dataSourceTypeList } = this.state;\n        let dataSourceTypes = dataSourceTypeList.length > 0\n            && dataSourceTypeList.map((item, i) => {\n                return (\n                    <option key={i} value={item.dataSourceTypeId}>{item.label.engLabel}</option>\n                )\n            }, this);\n        return (\n\n            <>\n\n                <h3>{myConst.UPDATE_DATASOURCE}</h3>\n                <form name=\"updatyeDataSourceForm\" id=\"updatyeDataSourceForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.engLabel\" value={this.state.dataSource.label.engLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.freLabel\" value={this.state.dataSource.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.spaLabel\" value={this.state.dataSource.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.porLabel\" value={this.state.dataSource.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"dataSource.active1\" name=\"dataSource.active\" value={true} checked={this.state.dataSource.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"dataSource.active2\" name=\"dataSource.active\" value={false} checked={this.state.dataSource.active === false} onChange={this.updateFieldData} /> Disabled\n                     </div>\n                    <br /><br />\n                    <div>\n                        {myConst.SELECT_DATA_SOURCE_TYPE} : <select id=\"dataSourceTypeId\" name=\"dataSource.dataSourceType.dataSourceTypeId\" value={this.state.dataSource.dataSourceType ? this.state.dataSource.dataSourceType.dataSourceTypeId : ''} onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {dataSourceTypes}\n                        </select>\n                    </div>\n                    <br /><br />\n                    <input type=\"hidden\" name=\"dataSource.dataSourceId\" value={this.state.dataSource.dataSourceId} />\n                    <input type=\"hidden\" name=\"dataSource.label.labelId\" value={this.state.dataSource.label.labelId} />\n                    <div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n\n        );\n\n\n    }\n\n}","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass CurrencyService {\n\n    addCurrency(json) {\n        return axios.put(`${API_URL}/api/addCurrency/`, json, {}\n        );\n    }\n\n    getCurrencyList() {\n        return axios.get(`${API_URL}/api/getCurrencyList/`, {\n        });\n    }\n    \n    getCurrencyListActive() {\n        return axios.get(`${API_URL}/api/getCurrencyListActive/`, {\n        });\n    }\n    editCurrency(json) {\n        return axios.put(`${API_URL}/api/editCurrency/`, json, {}\n        );\n    }\n}\nexport default new CurrencyService();","import React, { Component } from 'react';\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport CurrencyService from '../../api/CurrencyService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nexport default class AddCurrencyComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currencyCode: '',\n            currencySymbol: '',\n            label: {\n                engLabel: '',\n                freLabel: '',\n                spaLabel: '',\n                porLabel: ''\n            },\n            conversionRateToUsd: ''\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        $(\"#currencyForm\").validate({\n            ignore: [],\n            rules: {\n                'label.engLabel': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'label.freLabel': {\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'label.spaLabel': {\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'label.porLabel': {\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'currencyCode': {\n                    required: true,\n                    maxlength: 4\n                },\n                'currencySymbol': {\n                    required: true,\n                    maxlength: 3\n                },\n                'conversionRateToUsd': {\n                    required: true,\n                    integer:true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    updateFieldData(event) {\n        switch (event.target.name) {\n            case \"currencyCode\": this.state.currencyCode = event.target.value;\n            case \"currencySymbol\": this.state.currencySymbol = event.target.value;\n            case \"label.engLabel\": this.state.label.engLabel = event.target.value;\n            case \"label.freLabel\": this.state.label.freLabel = event.target.value;\n            case \"label.spaLabel\": this.state.label.spaLabel = event.target.value;\n            case \"label.porLabel\": this.state.label.porLabel = event.target.value;\n            case \"conversionRateToUsd\": this.state.conversionRateToUsd = event.target.value;\n            default: break;\n        }\n        let { currency } = this.state\n        this.setState(\n            {\n                currency\n            }\n        )\n\n    }\n    submitForm() {\n\n        if (navigator.onLine) {\n\n            if ($(\"#currencyForm\").valid()) {\n                CurrencyService.addCurrency(this.state).then(response => {\n                    this.props.history.push(`/currencyList/${response.data.message}`)\n                    console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n        } else {\n\n            alert(\"To perform this action you must be online.\");\n        }\n\n    }\n\n    render() {\n        return (\n            <>\n                <h3>{myConst.ADD_CURRENCY}</h3>\n                <form name=\"currencyForm\" id=\"currencyForm\">\n                    <div>\n                        <label>{myConst.CURRENCY_CODE}:-</label>\n                        <input type=\"text\" name=\"currencyCode\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_SYMBOL}:-</label>\n                        <input type=\"text\" name=\"currencySymbol\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"label.engLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"label.freLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"label.spaLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"label.porLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CONVERSIONRATE_TO_USD}:-</label>\n                        <input type=\"text\" name=\"conversionRateToUsd\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n\n            </>\n        );\n    }\n}","import React, { Compoent, Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport CurrencyService from '../../api/CurrencyService.js';\nimport * as myConst from '../../Labels.js';\n\n\nexport default class CurrencyListComponent extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currencyList: []\n        }\n        this.editCurrency = this.editCurrency.bind(this);\n        this.addNewCurrency=this.addNewCurrency.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        CurrencyService.getCurrencyList().then(response => {\n            this.setState({\n                currencyList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n\n    }\n\n    editCurrency(currency) {\n        this.props.history.push({\n            pathname: \"/editCurrency\",\n            state: { currency: currency }\n        });\n\n    }\n\n    addNewCurrency(){\n\n        if (navigator.onLine) {\n            this.props.history.push(`/addCurrency`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n    }\n    render() {\n\n        return (\n            <>\n\n                <div>\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewCurrency}>{myConst.ADD_NEW_CURRENCY}</button><br /><br />\n                </div>\n\n                <div className=\"currencyList\">\n\n                    <h1>{myConst.DATA_SOURCE_LIST}</h1>\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.CURRENCY_CODE}</th>\n                                <th>{myConst.CURRENCY_SYMBOL}</th>\n                                <th>{myConst.DATASOURCE_NAME_EN}</th>\n                                <th>{myConst.DATASOURCE_NAME_FR}</th>\n                                <th>{myConst.DATASOURCE_NAME_SP}</th>\n                                <th>{myConst.DATASOURCE_NAME_PO}</th>\n                                <th>{myConst.CONVERSIONRATE_TO_USD}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.currencyList.map(currency =>\n                                    <tr key={currency.currencyId} onClick={() => this.editCurrency(currency)}>\n                                        <td>{currency.currencyCode}</td>\n                                        <td>{currency.currencySymbol}</td>\n                                        <td>{currency.label.engLabel}</td>\n                                        <td>{currency.label.freLabel}</td>\n                                        <td>{currency.label.spaLabel}</td>\n                                        <td>{currency.label.porLabel}</td>\n                                        <td>{currency.conversionRateToUsd}</td>\n\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n            </>\n        );\n    }\n\n\n}","import React,{Component} from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport CurrencyService from '../../api/CurrencyService.js';\n\nexport default class UpdateCurrencyComponent extends Component{\n\nconstructor(props){\n    super(props);\n    this.state = {\n        currency: {\n        currencyCode:'',\n        currencySymbol:'',\n        label: {\n            engLabel: '',\n            freLabel: '',\n            spaLabel: '',\n            porLabel: ''\n        },\n        conversionRateToUsd: ''\n    }\n    }\n    this.updateFieldData=this.updateFieldData.bind(this);\n    this.updateForm=this.updateForm.bind(this);\n}\n\ncomponentDidMount() {\n    AuthenticationService.setupAxiosInterceptors();\n    this.setState({\n        currency:this.props.location.state.currency\n    });\n    $(\"#updateCurrencyForm\").validate({\n        ignore: [],\n        rules: {\n            'currency.label.engLabel': {\n                required: true,\n                lettersonly: true,\n                maxlength: 255\n            },\n            'currency.label.freLabel': {\n                lettersonly: true,\n                maxlength: 255\n            },\n            'currency.label.spaLabel': {\n                lettersonly: true,\n                maxlength: 255\n            },\n            'currency.label.porLabel': {\n                lettersonly: true,\n                maxlength: 255\n            },\n            'currency.currencyCode': {\n                required: true,\n                maxlength: 4\n            },\n            'currency.currencySymbol': {\n                required: true,\n                maxlength: 3\n            },\n            'currency.conversionRateToUsd': {\n                required: true,\n                integer:true\n            }\n        },\n        errorPlacement: function (error, element) {\n            error.insertAfter(element);\n        }\n    });\n}\n\nupdateFieldData(event) {\n    let { currency } = this.state\n\n    if (event.target.name === \"currency.currencyCode\") {\n        this.state.currency.currencyCode = event.target.value\n    }\n    if (event.target.name === \"currency.currencySymbol\") {\n        this.state.currency.currencySymbol = event.target.value;\n    }\n    if (event.target.name === \"currency.label.engLabel\") {\n        this.state.currency.label.engLabel = event.target.value\n    }\n    if (event.target.name === \"currency.label.freLabel\") {\n        this.state.currency.label.freLabel = event.target.value\n    }\n    if (event.target.name === \"currency.label.spaLabel\") {\n        this.state.currency.label.spaLabel = event.target.value\n    }\n    if (event.target.name === \"currency.label.porLabel\") {\n        this.state.currency.label.porLabel = event.target.value\n    }\n    else if (event.target.name === \"currency.conversionRateToUsd\") {\n        this.state.currency.conversionRateToUsd = event.target.value\n    }\n    // switch (event.target.name) {\n    //     case \"currency.currencyCode\": this.state.currency.currencyCode = event.target.value;\n    //     case \"currency.currencySymbol\": this.state.currency.currencySymbol = event.target.value;\n    //     case \"currency.label.engLabel\": this.state.currency.label.engLabel = event.target.value;\n    //     case \"currency.label.freLabel\": this.state.currency.label.freLabel = event.target.value;\n    //     case \"currency.label.spaLabel\": this.state.currency.label.spaLabel = event.target.value;\n    //     case \"currency.label.porLabel\": this.state.currency.label.porLabel = event.target.value;\n    //     case \"currency.conversionRateToUsd\": this.state.currency.conversionRateToUsd = event.target.value;\n    //     default: break;\n    // }\n    this.setState(\n        {\n            currency\n        }\n    )\n\n}\n\nupdateForm(){\n\n    if(navigator.onLine){\n\n        if ($(\"#updateCurrencyForm\").valid()) {\n\n            CurrencyService.editCurrency(this.state.currency).then(response => {\n                this.props.history.push(`/currencyList/${response.data.message}`)\n                console.log(\"success\");\n            }\n            )\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                        }\n                    }\n                )\n        }\n\n\n        }\n\n    else{\n        alert(\"To perform this action you must be online.\");     \n    }\n\n}\n   \nrender(){\n\nreturn( \n    <>\n     <h3>{myConst.UPDATE_CURRENCY}</h3>\n                <form name=\"updateCurrencyForm\" id=\"updateCurrencyForm\">\n                <div>\n                        <label>{myConst.CURRENCY_CODE}:-</label>\n                        <input type=\"text\" name=\"currency.currencyCode\" value={this.state.currency.currencyCode} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_SYMBOL}:-</label>\n                        <input type=\"text\" name=\"currency.currencySymbol\" value={this.state.currency.currencySymbol} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"currency.label.engLabel\" value={this.state.currency.label.engLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"currency.label.freLabel\" value={this.state.currency.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"currency.label.spaLabel\" value={this.state.currency.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"currency.label.porLabel\" value={this.state.currency.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CONVERSIONRATE_TO_USD}:-</label>\n                        <input type=\"text\" name=\"currency.conversionRateToUsd\" value={this.state.currency.conversionRateToUsd} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                    </div>\n                </form>\n    </>\n);\n\n}\n\n\n}","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass CountryService {\n\n    addCountry(json) {\n        return axios.put(`${API_URL}/api/addCountry/`, json, {}\n        );\n    }\n\n    getCountryListAll(){\n        return axios.get(`${API_URL}/api/getCountryListAll/`, {\n        });\n    }\n    getCountryListActive(){\n        return axios.get(`${API_URL}/api/getCountryListActive/`, {\n        });\n    }\n\n    editCountry(json) {\n        return axios.put(`${API_URL}/api/editCountry/`,json,{}\n            );\n        }\n    \n}\nexport default new CountryService();","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport LanguageService from '../../api/LanguageService.js';\nimport CurrencyService from '../../api/CurrencyService.js';\nimport CountryService from '../../api/CountryService.js'\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class AddCountryComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            label: {\n\n            },\n            currency: {\n                currencyId: ''\n            },\n            language: {\n                languageId: ''\n            },\n            languageList: [],\n            currencyList: [],\n\n        }\n\n        this.submitForm = this.submitForm.bind(this);\n        this.updateFieldData = this.updateFieldData.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        LanguageService.getLanguageListActive().then(response => {\n            this.setState({\n                languageList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                });\n\n        CurrencyService.getCurrencyListActive().then(response => {\n            this.setState({\n                currencyList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                });\n\n\n        $(\"#countryForm\").validate({\n            ignore: [],\n            rules: {\n                'label.engLabel': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'label.freLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'label.spaLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'label.porLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'currency.currencyId': {\n                    required: true\n                },\n                'language.languageId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    updateFieldData(event) {\n        if (event.target.name === \"label.engLabel\") {\n            this.state.label.engLabel = event.target.value\n        }\n        if (event.target.name === \"label.freLabel\") {\n            this.state.label.freLabel = event.target.value\n        } if (event.target.name === \"label.spaLabel\") {\n            this.state.label.spaLabel = event.target.value\n        } if (event.target.name === \"label.porLabel\") {\n            this.state.label.porLabel = event.target.value\n        }\n        if (event.target.name === \"currency.currencyId\") {\n            this.state.currency.currencyId = event.target.value\n        } else if (event.target.name === \"language.languageId\") {\n            this.state.language.languageId = event.target.value\n        }\n        let { currency } = this.state\n        this.setState(\n            {\n                currency\n            }\n        )\n    }\n    submitForm() {\n\n        if (navigator.onLine) {\n\n            if ($(\"#countryForm\").valid()) {\n                CountryService.addCountry(this.state).then(response => {\n                    this.props.history.push(`/countryList/${response.data.message}`)\n                    //console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n        } else {\n\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\n    render() {\n        const { languageList } = this.state;\n        let languageItems = languageList.length > 0\n            && languageList.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>{item.languageName}</option>\n                )\n            }, this);\n\n        const { currencyList } = this.state;\n        let currencyItems = currencyList.length > 0\n            && currencyList.map((itemOne, i) => {\n                return (\n                    <option key={i} value={itemOne.currencyId}>{itemOne.label.engLabel}</option>\n                )\n            }, this);\n        return (\n\n            <>\n                <h3>{myConst.ADD_COUNTRY}</h3>\n                <form name=\"countryForm\" id=\"countryForm\">\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"label.engLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"label.freLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"label.spaLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"label.porLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n\n                    <div>\n                        {myConst.SELECT_LANGUAGE} : <select id=\"langaugeId\" name=\"language.languageId\" onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {languageItems}\n                        </select>\n                    </div>\n                    <br></br>\n                    <div>\n                        {myConst.SELECT_CURRENCY} : <select id=\"currencyId\" name=\"currency.currencyId\" onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {currencyItems}\n                        </select>\n                    </div>\n                    <br></br>\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n\n            </>\n        );\n    }\n\n}","import React,{Component} from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport CountryService from '../../api/CountryService.js';\nimport * as myConst from '../../Labels.js';\n\nexport default class CountryListComponent extends Component{\n\nconstructor(props){\n    super(props);\n    this.state={\n        countryList:[]\n    }\n    this.addNewCountry=this.addNewCountry.bind(this);\n    this.editCountry=this.editCountry.bind(this);\n}\ncomponentDidMount(){\n    AuthenticationService.setupAxiosInterceptors();\n    CountryService.getCountryListAll().then(response => {        \n        this.setState({\n            countryList: response.data\n        })\n    })\n        .catch(\n            error => {\n                switch (error.message) {\n                    case \"Network Error\":\n                        this.setState({\n                            message: error.message\n                        })\n                        break\n                    default:\n                        this.setState({\n                            message: error.message\n                        })\n                        break\n                }\n            }\n        );\n\n}\n\naddNewCountry(){\n    if (navigator.onLine) {\n        this.props.history.push(`/addCountry`)\n    } else {\n        alert(\"You must be Online.\")\n    }\n\n}\neditCountry(country){\n    console.log(country);\n    this.props.history.push({\n        pathname: \"/editCountry\",\n        state: { country: country }\n    });\n\n}\n\nrender(){\n\n    return(\n    \n    <>\n\n\n<div>\n    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewCountry}>{myConst.ADD_NEW_COUNTRY}</button><br /><br />\n</div>\n\n<div className=\"countryList\">\n\n    <h1>{myConst.COUNTRY_LIST}</h1>\n    <table border=\"1\" align=\"center\">\n        <thead>\n            <tr>\n                <th>{myConst.COUNTRY_NAME_EN}</th>\n                <th>{myConst.COUNTRY_NAME_FR}</th>\n                <th>{myConst.COUNTRY_NAME_SP}</th>\n                <th>{myConst.COUNTRY_NAME_PO}</th>\n                <th>{myConst.COUNTRY_ACTIVE}</th>\n\n            </tr>\n        </thead>\n        <tbody>\n            {\n                this.state.countryList.map(country =>\n\n                    <tr key={country.countryId} onClick={() => this.editCountry(country)}>\n                        <td>{country.label.engLabel}</td>\n                        <td>{country.label.freLabel}</td>\n                        <td>{country.label.spaLabel}</td>\n                        <td>{country.label.porLabel}</td>\n                        <td>{country.active.toString()}</td>\n                    </tr>\n                )\n\n            }\n        </tbody>\n    </table>\n</div>\n    \n    \n    \n    \n    </>);\n}\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport CountryService from '../../api/CountryService.js';\nimport LanguageService from '../../api/LanguageService.js';\nimport CurrencyService from '../../api/CurrencyService.js';\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class UpdateCountryComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            country: {\n                countryId:'',\n                label: {\n                    engLabel: '',\n                    spaLabel: '',\n                    freLabel: '',\n                    porLabel: '', \n                    labelId:''\n                },\n                currency: {\n                    curencyId: ''\n                },\n                language: {\n                    languageId: ''\n                },\n                active: ''\n\n            },\n            languageList:[],\n            currencyList:[]\n        }\n\n        this.updateFieldData=this.updateFieldData.bind(this);\n        this.updateForm=this.updateForm.bind(this);\n\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            country: this.props.location.state.country\n        });\n\n        LanguageService.getLanguageListActive().then(response => {\n            this.setState({\n                languageList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                });\n\n        CurrencyService.getCurrencyListActive().then(response => {\n            this.setState({\n                currencyList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                });\n\n                $(\"#updateCountryForm\").validate({\n                    ignore: [],\n                    rules: {\n                        'country.label.engLabel': {\n                            required: true,\n                            lettersonly: true,\n                            maxlength: 255\n                        },\n                        'country.label.freLabel': {\n        \n                            lettersonly: true,\n                            maxlength: 255\n                        },\n                        'country.label.spaLabel': {\n        \n                            lettersonly: true,\n                            maxlength: 255\n                        },\n                        'country.label.porLabel': {\n        \n                            lettersonly: true,\n                            maxlength: 255\n                        },\n                        'country.currency.currencyId': {\n                            required: true\n                        }, \n                        'country.language.languageId': {\n                            required: true\n                        }\n                    },\n                    errorPlacement: function (error, element) {\n                        error.insertAfter(element);\n                    }\n                });\n\n    }\n    updateFieldData(event){\n        let { country } = this.state\n        if (event.target.name === \"country.label.engLabel\") {\n           this.state.country.label.engLabel = event.target.value\n        }\n        if (event.target.name === \"country.label.freLabel\") {\n            this.state.country.label.freLabel = event.target.value\n        } if (event.target.name === \"country.label.spaLabel\") {\n            this.state.country.label.spaLabel = event.target.value\n        } if (event.target.name === \"country.label.porLabel\") {\n            this.state.country.label.porLabel = event.target.value\n        }\n        if (event.target.name === \"country.currency.currencyId\") {\n            this.state.country.currency.currencyId = event.target.value\n        }if (event.target.name === \"country.language.languageId\") {\n            this.state.country.language.languageId = event.target.value\n        }else if(event.target.name === \"country.active\") {\n            this.state.country.active = event.target.id = \"country.active2\" ? false : true\n        }\n        \n        this.setState(\n            {\n                country\n            }\n        )\n\n\n    }\n\n    updateForm(){\n        if(navigator.onLine){\n\n            if($(\"#updateCountryForm\").valid()){\n        CountryService.editCountry(this.state.country).then(response => {\n            this.props.history.push(`/countryList/${response.data.message}`)\n            //console.log(\"success\");\n        }\n        )\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            )\n        }\n        }else{\n\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\n    render() {\n        const { languageList } = this.state;\n        let languageItems = languageList.length > 0\n            && languageList.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>{item.languageName}</option>\n                )\n            }, this);\n\n        const { currencyList } = this.state;\n        let currencyItems = currencyList.length > 0\n            && currencyList.map((itemOne, i) => {\n                return (\n                    <option key={i} value={itemOne.currencyId}>{itemOne.label.engLabel}</option>\n                )\n            }, this);\n\n        return (\n            <>\n\n                <h3>{myConst.UPDATE_COUNTRY}</h3>\n                <form name=\"updateCountryForm\" id=\"updateCountryForm\">\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"country.label.engLabel\" value={this.state.country.label.engLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"country.label.freLabel\" value={this.state.country.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"country.label.spaLabel\" value={this.state.country.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"country.label.porLabel\" value={this.state.country.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        {myConst.ACTIVE}:\n        <input type=\"radio\" id=\"country.active1\" name=\"country.active\" value={true} checked={this.state.country.active === true} onChange={this.updateFieldData} /> Active\n        <input type=\"radio\" id=\"country.active2\" name=\"country.active\" value={false} checked={this.state.country.active === false} onChange={this.updateFieldData} /> Disabled\n         </div>\n                    <br /><br />\n                    <div>\n                        {myConst.SELECT_LANGUAGE} : <select id=\"langaugeId\" name=\"country.language.languageId\" value={this.state.country.language ? this.state.country.language.languageId : ''} onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {languageItems}\n                        </select>\n                    </div>\n                    <br></br>\n                    <div>\n                        {myConst.SELECT_CURRENCY} : <select id=\"currencyId\" name=\"country.currency.currencyId\" value={this.state.country.currency ? this.state.country.currency.currencyId : ''} onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {currencyItems}\n                        </select>\n                    </div>\n                    <br /><br />\n                    {/* <input type=\"hidden\" name=\"dataSource.dataSourceId\" value={this.state.dataSource.dataSourceId} /> */}\n                    {/* <input type=\"hidden\" name=\"dataSource.label.labelId\" value={this.state.dataSource.label.labelId} /> */}\n                    <div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                    </div>\n                </form>\n\n            </>\n\n        );\n\n\n\n    }\n\n\n}","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass ShipmentStatusService{\n\n    addShipmentStatus(json) {\n        return axios.put(`${API_URL}/api/addShipmentStatus/`, json, {}\n        );\n    }\n\n    getShipmentStatusListAll(){\n        return axios.get(`${API_URL}/api/getShipmentStatusListAll/`, {\n        });\n    }\n    getShipmentStatusListActive(){\n        return axios.get(`${API_URL}/api/getShipmentStatusListActive/`, {\n        });\n    }\n    editShipmentStatus(json) {\n        return axios.put(`${API_URL}/api/editShipmentStatus/`, json, {\n        });\n    }\n\n}\nexport default new ShipmentStatusService();","import React, { Component } from 'react';\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport ShipmentStatusService from '../../api/ShipmentStatusService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class AddShipmentStatusComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            shipmentStatus:{\n            label: {\n                engLabel: '',\n                freLabel: '',\n                spaLabel: '',\n                porLabel: ''\n            },\n            // nextShipmentStatusAllowedId:[]\n        }\n        // shipmentStatusList:[]\n         }\n\n        this.updateFieldData=this.updateFieldData.bind(this);\n        this.submitForm=this.submitForm.bind(this);\n    }\n\n\n    componentDidMount(){\n        AuthenticationService.setupAxiosInterceptors();\n        ShipmentStatusService.getShipmentStatusListActive().then(response => {\n            //console.log(response.data)\n            this.setState({\n                shipmentStatusList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n        $(\"#shipmentStatusForm\").validate({\n            ignore: [],\n            rules: {\n                'shipmentStatus.label.engLabel': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'shipmentStatus.label.freLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'shipmentStatus.label.spaLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'shipmentStatus.label.porLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n    updateFieldData(event){\n        if (event.target.name === \"shipmentStatus.label.engLabel\") {\n            //console.log(\"inside if\")\n            this.state.shipmentStatus.label.engLabel = event.target.value\n        }\n        if (event.target.name === \"shipmentStatus.label.freLabel\") {\n            //console.log(\"inside if\")\n            this.state.shipmentStatus.label.freLabel = event.target.value\n        } if (event.target.name === \"shipmentStatus.label.spaLabel\") {\n            //console.log(\"inside if\")\n            this.state.shipmentStatus.label.spaLabel = event.target.value\n        }else if (event.target.name === \"shipmentStatus.label.porLabel\") {\n            //console.log(\"inside if\")\n            this.state.shipmentStatus.label.porLabel = event.target.value\n        }\n        \n\n        let { shipmentStatus } = this.state\n        this.setState(\n            {\n                shipmentStatus\n            }\n        )\n    }\n\n    submitForm(){\n        if(navigator.onLine){\n            if($(\"#shipmentStatusForm\").valid()){\n                //console.log(this.state);\n                ShipmentStatusService.addShipmentStatus(this.state.shipmentStatus).then(response => {\n                    this.props.history.push(`/shipmentStatusListAll/${response.data.message}`)\n                    //console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n               \n            }\n\n        }else{\n            alert(\"To perform this action you must be online.\");\n        }\n\n    }\n\n    render() {\n\n        // const { shipmentStatusList } = this.state;\n        // let shipmentStatusItems = shipmentStatusList.length > 0\n        //     && shipmentStatusList.map((item, i) => {\n        //         return (\n        //             <option key={i} value={item.shipmentStatusId}>{item.label.engLabel}</option>\n        //         )\n        //     }, this);\n        return (\n            <>\n            <h3>{myConst.ADD_SHIPMENT_STATUS}</h3>\n                <form name=\"shipmentStatusForm\" id=\"shipmentStatusForm\">\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.engLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.freLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.spaLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.porLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    {/* <div>\n                      <label>  {myConst.SELECT_NEXT_SHIPMENT_STATUS} :- </label><select id=\"shipmentStatusId\" name=\"shipmentStatus.nextShipmentStatusAllowedId\" onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {shipmentStatusItems}\n                        </select>\n                    </div> */}\n                    <br/><br/>\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n        );\n\n    }\n\n}","\nimport React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport ShipmentStatusService from '../../api/ShipmentStatusService.js';\nimport * as myConst from '../../Labels.js';\nexport default class ShipmentStatusListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            shipmentStatusList: []\n        }\n        this.editShipmentStatus=this.editShipmentStatus.bind(this);\n        this.addNewShipmentStatus=this.addNewShipmentStatus.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        ShipmentStatusService.getShipmentStatusListAll().then(response => {\n            //console.log(response.data)\n            this.setState({\n                shipmentStatusList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n    }\n\n    addNewShipmentStatus(){\n        if (navigator.onLine) {\n            this.props.history.push(`/addShipmentStatus`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n    }\n\n    editShipmentStatus(shipmentStatus){\n        this.props.history.push({\n            pathname: \"/editShipmentStatus\",\n            state: { shipmentStatus: shipmentStatus }\n        });\n\n    }\n\n    render() {\n        return (\n            <>\n                <div>\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewShipmentStatus}>{myConst.ADD_NEW_SHIPMENT_STATUS}</button><br /><br />\n                </div>\n\n                <div className=\"shipmentStatusList\">\n\n                    <h1>{myConst.SHIPMENT_STATUS_LIST}</h1>\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.SHIPMENTSTATUS_NAME_EN}</th>\n                                <th>{myConst.SHIPMENTSTATUS_NAME_FR}</th>\n                                <th>{myConst.SHIPMENTSTATUS_NAME_SP}</th>\n                                <th>{myConst.SHIPMENTSTATUS_NAME_PO}</th>\n                                <th>{myConst.DATA_SOURCE_TYPE_ACTIVE}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.shipmentStatusList.map(shipmentStatus =>\n\n                                    <tr key={shipmentStatus.shipmentStatusId} onClick={() => this.editShipmentStatus(shipmentStatus)}>\n                                        <td>{shipmentStatus.label.engLabel}</td>\n                                        <td>{shipmentStatus.label.freLabel}</td>\n                                        <td>{shipmentStatus.label.spaLabel}</td>\n                                        <td>{shipmentStatus.label.porLabel}</td>\n                                        <td>{shipmentStatus.active.toString()}</td>\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n\n            </>\n\n        );\n\n\n    }\n\n}","import React, { Component } from 'react';\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport ShipmentStatusService from '../../api/ShipmentStatusService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nexport default class UpdateShipmentStatusComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            shipmentStatus: {\n                shipmentStatusId: '',\n                label: {\n                    engLabel: '',\n                    freLabel: '',\n                    spaLabel: '',\n                    porLabel: ''\n                },\n                active: ''\n\n            }\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        //console.log(this.props.location.state.shipmentStatus);\n        this.setState({\n            shipmentStatus: this.props.location.state.shipmentStatus\n        });\n        $(\"#updateShipmentStatusForm\").validate({\n            ignore: [],\n            rules: {\n                'shipmentStatus.label.engLabel': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'shipmentStatus.label.freLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'shipmentStatus.label.spaLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'shipmentStatus.label.porLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n    updateForm() {\n\n        if (navigator.onLine) {\n\n            if ($(\"#updateShipmentStatusForm\").valid()) {\n                //console.log(this.state.shipmentStatus);\n                ShipmentStatusService.editShipmentStatus(this.state.shipmentStatus).then(response => {\n                    //this.props.history.push(`/languageList/${response.data.message}`)\n                    this.props.history.push(`/shipmentStatusListAll/${response.data.message}`)\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n        }\n\n    }\n    updateFieldData(event) {\n        let { shipmentStatus } = this.state\n        if (event.target.name === \"shipmentStatus.label.engLabel\") {\n            //console.log(\"inside if\")\n            this.state.shipmentStatus.label.engLabel = event.target.value\n        }\n        if (event.target.name === \"shipmentStatus.label.freLabel\") {\n            //console.log(\"inside if\")\n            this.state.shipmentStatus.label.freLabel = event.target.value\n        } if (event.target.name === \"shipmentStatus.label.spaLabel\") {\n            //console.log(\"inside if\")\n            this.state.shipmentStatus.label.spaLabel = event.target.value\n        } if (event.target.name === \"shipmentStatus.label.porLabel\") {\n            //console.log(\"inside if\")\n            this.state.shipmentStatus.label.porLabel = event.target.value\n        } else if (event.target.name === \"shipmentStatus.active\") {\n            this.state.shipmentStatus.active = event.target.id === \"shipmentStatus.active2\" ? false : true\n        }\n        this.setState(\n            {\n                shipmentStatus\n            }\n        )\n    }\n\n    render() {\n        return (\n            <>\n                <h3>{myConst.UPDATE_SHIPMENT_STATUS}</h3>\n                <form name=\"updateShipmentStatusForm\" id=\"updateShipmentStatusForm\">\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.engLabel\" value={this.state.shipmentStatus.label.engLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.freLabel\" value={this.state.shipmentStatus.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.spaLabel\" value={this.state.shipmentStatus.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.porLabel\" value={this.state.shipmentStatus.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"shipmentStatus.active1\" name=\"shipmentStatus.active\" value={true} checked={this.state.shipmentStatus.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"shipmentStatus.active2\" name=\"shipmentStatus.active\" value={false} checked={this.state.shipmentStatus.active === false} onChange={this.updateFieldData} /> Disabled\n                     </div>\n                    {/* <input type=\"hidden\" name=\"dataSourceType.labelId\" value={this.state.dataSourceType.labelId} /> */}\n                    <div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                    </div>\n                </form>\n\n\n\n            </>\n        );\n    }\n\n}","import axios from \"axios\"\nimport { API_URL } from '../Constants.js'\n\nclass ProgramService {\n    getProgramData(programId) {\n        console.log(programId)\n        return axios.get(`${API_URL}/api/getProgramData?programId=${programId}`, {\n        });\n    }\n}\nexport default new ProgramService()","import React, { Component } from 'react';\nimport { BTN_DOWNLOAD, DOWNLOAD_TITLE, DATA_DOWNLOAD_SUCCESS } from '../../Labels.js';\nimport ProgramService from '../../api/ProgramService.js';\nimport CryptoJS from 'crypto-js';\nimport { SECRET_KEY } from '../../Constants.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\nexport default class DownloadProgramDataComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            programData: {},\n            message: \"\"\n        }\n        this.downloadClicked = this.downloadClicked.bind(this);\n    }\n\n    render() {\n        return (\n            <div>\n                <h4>{this.state.message}</h4>\n                <h4>{DOWNLOAD_TITLE}</h4><br></br>\n                <button type=\"button\" onClick={this.downloadClicked}>{BTN_DOWNLOAD}</button>\n            </div>\n        )\n    }\n\n    downloadClicked() {\n        var programId = '1,2';\n        var programArr = programId.split(\",\");\n        for (var j = 0; j < programArr.length; j++) {\n            AuthenticationService.setupAxiosInterceptors();\n            ProgramService.getProgramData(programArr[j])\n                .then(response => {\n                    var json = response.data;\n                    var db1;\n                    var storeOS;\n                    var openRequest = indexedDB.open('fasp', 1);\n                    openRequest.onupgradeneeded = function (e) {\n                        var db1 = e.target.result;\n                        if (!db1.objectStoreNames.contains('programData')) {\n                            storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n                        }\n                    };\n                    openRequest.onsuccess = function (e) {\n                        db1 = e.target.result;\n                        var transaction = db1.transaction(['programData'], 'readwrite');\n                        var program = transaction.objectStore('programData');\n                        for (var i = 0; i < json.length; i++) {\n                            var encryptedText = CryptoJS.AES.encrypt(JSON.stringify(json[i]), SECRET_KEY);\n                            var item = {\n                                id: json[i].programId,\n                                programData: encryptedText.toString()\n                            };\n\n                            var getRequest = program.add(item);\n\n                            getRequest.onerror = function (event) {\n                                // Handle errors!\n                            };\n                            getRequest.onsuccess = function (event) {\n                                this.setState({\n                                    message: `${DATA_DOWNLOAD_SUCCESS}`\n                                })\n                            }.bind(this);\n                        }\n                    }.bind(this)\n                })\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.response.data.message\n                                })\n                                break\n                        }\n                    }\n                );\n\n        }\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport { IMPORT_TITLE, BTN_IMPORT, DATA_IMPORT_SUCCESS, IMPORT_PROGRAM, BTN_SUBMIT } from '../../Labels.js';\nimport { SECRET_KEY } from '../../Constants.js';\nimport JSZip from 'jszip';\nimport CryptoJS from 'crypto-js';\nimport $ from 'jquery';\n\nexport default class ImportProgramDataComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            programData: {},\n            message: \"\",\n            programList: []\n        }\n        this.importClicked = this.importClicked.bind(this);\n        this.programSubmitClicked = this.programSubmitClicked.bind(this);\n    }\n\n    componentDidMount() {\n        $(\"#programDiv\").hide();\n        $(\"#importDiv\").show();\n    }\n\n    render() {\n        const { programList } = this.state;\n        let programItems = programList.length > 0\n            && programList.map((item, i) => {\n                return (\n                    <option key={i} value={item.id}>{item.name}</option>\n                )\n            }, this);\n        return (\n            <div>\n                <h4>{this.state.message}</h4>\n                <h4>{IMPORT_TITLE}</h4><br></br>\n                <div id=\"importDiv\">\n                    <input type=\"file\" /><br></br><br></br>\n                    <button type=\"button\" onClick={this.importClicked}>{BTN_IMPORT}</button>\n                </div>\n                <div id=\"programDiv\">\n                    {IMPORT_PROGRAM} : <select id=\"programId\" name=\"programId\" multiple={true}>\n                        {programItems}\n                    </select><br></br><br></br>\n                    <button type=\"button\" onClick={this.programSubmitClicked}>{BTN_SUBMIT}</button>\n                </div>\n            </div>\n        )\n    }\n\n    importClicked() {\n        var importObjectDataFromFile = {};\n        if (window.File && window.FileReader && window.FileList && window.Blob) {\n            if (document.querySelector('input[type=file]').files[0] == undefined) {\n                alert(\"Please select a file\");\n            } else {\n                var file = document.querySelector('input[type=file]').files[0];\n                JSZip.loadAsync(file).then(function (zip) {\n                    var i = 0;\n                    var fileName = []\n                    var size = 0;\n                    Object.keys(zip.files).forEach(function (filename) {\n                        size++;\n                    })\n                    Object.keys(zip.files).forEach(function (filename) {\n                        zip.files[filename].async('string').then(function (fileData) {\n                            i++;\n                            var programDataJson = JSON.parse(fileData);\n                            var bytes = CryptoJS.AES.decrypt(programDataJson.programData, SECRET_KEY);\n                            var plaintext = bytes.toString(CryptoJS.enc.Utf8);\n                            var programDataJsonDecrypted = JSON.parse(plaintext);\n                            fileName[i] = {\n                                id: filename,\n                                name: programDataJsonDecrypted.label.labelEn\n                            }\n                            if (i === size) {\n                                this.setState({\n                                    programList: fileName\n                                })\n\n                                $(\"#programDiv\").show();\n                                $(\"#importDiv\").hide();\n                            }\n                        }.bind(this))\n\n                    }.bind(this))\n\n                }.bind(this))\n            }\n\n        }\n\n    }\n\n    programSubmitClicked() {\n        var importObjectDataFromFile = {};\n        if (window.File && window.FileReader && window.FileList && window.Blob) {\n            if (document.querySelector('input[type=file]').files[0] == undefined) {\n                alert(\"Please select a file\");\n            } else {\n                var file = document.querySelector('input[type=file]').files[0];\n                var db1;\n                var storeOS;\n                var openRequest = indexedDB.open('fasp', 1);\n                var selectedPrgArr = $(\"#programId\").val();\n                openRequest.onupgradeneeded = function (e) {\n                    var db1 = e.target.result;\n                    if (!db1.objectStoreNames.contains('programData')) {\n                        storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n                    }\n                };\n                openRequest.onsuccess = function (e) {\n                    db1 = e.target.result;\n                    var transaction = db1.transaction(['programData'], 'readwrite');\n                    var program = transaction.objectStore('programData');\n                    var getRequest = program.clear();\n                    getRequest.onerror = function (event) {\n                        // Handle errors!\n                    };\n                    getRequest.onsuccess = function (event) {\n                        JSZip.loadAsync(file).then(function (zip) {\n                            Object.keys(zip.files).forEach(function (filename) {\n\n                                zip.files[filename].async('string').then(function (fileData) {\n                                    for (var j = 0; j < selectedPrgArr.length; j++) {\n                                        if (selectedPrgArr[j] == filename) {\n                                            db1 = e.target.result;\n                                            var transaction2 = db1.transaction(['programData'], 'readwrite');\n                                            var program2 = transaction2.objectStore('programData');\n                                            var addProgramDataRequest = program2.add(JSON.parse(fileData));\n                                            addProgramDataRequest.onerror = function (event) {\n                                            };\n                                            addProgramDataRequest.onsuccess = function (event) {\n                                            };\n                                        }\n\n                                    }\n                                })\n                            })\n                        })\n                        this.setState({\n                            message: `${DATA_IMPORT_SUCCESS}`\n                        })\n                        $(\"#programDiv\").hide();\n                        $(\"#importDiv\").show();\n                    }.bind(this)\n                }.bind(this)\n            }\n\n        }\n    }\n}\n","import React, { Component } from 'react';\nimport { BTN_EXPORT, EXPORT_TITLE, PROGRAM, DATA_EXPORT_SUCCESS } from '../../Labels.js';\nimport { SECRET_KEY } from '../../Constants.js';\nimport JSZip from 'jszip';\nimport FileSaver from 'file-saver';\nimport CryptoJS from 'crypto-js';\nimport $ from 'jquery';\n\nexport default class ExportProgramDataComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            programData: {},\n            programList: [],\n            message: \"\"\n        }\n        this.exportClicked = this.exportClicked.bind(this);\n    }\n\n    componentDidMount() {\n        var db1;\n        var storeOS;\n        var openRequest = indexedDB.open('fasp', 1);\n        openRequest.onupgradeneeded = function (e) {\n            var db1 = e.target.result;\n            if (!db1.objectStoreNames.contains('programData')) {\n                storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n            }\n        };\n        openRequest.onsuccess = function (e) {\n            db1 = e.target.result;\n            var transaction = db1.transaction(['programData'], 'readwrite');\n            var program = transaction.objectStore('programData');\n            var getRequest = program.getAll();\n            var proList = []\n            getRequest.onerror = function (event) {\n                // Handle errors!\n            };\n            getRequest.onsuccess = function (event) {\n                var myResult = [];\n                myResult = getRequest.result;\n                for (var i = 0; i < myResult.length; i++) {\n                    var bytes = CryptoJS.AES.decrypt(myResult[i].programData, SECRET_KEY);\n                    var plaintext = bytes.toString(CryptoJS.enc.Utf8);\n                    var json = JSON.parse(plaintext);\n                    var programJson = {\n                        name: json.label.labelEn,\n                        id: json.programId\n                    }\n                    proList[i] = programJson\n                }\n                this.setState({\n                    programList: proList\n                })\n            }.bind(this);\n        }.bind(this)\n    }\n\n    render() {\n        const { programList } = this.state;\n        let programItems = programList.length > 0\n            && programList.map((item, i) => {\n                return (\n                    <option key={i} value={item.id}>{item.name}</option>\n                )\n            }, this);\n        return (\n            <div>\n                <h4>{this.state.message}</h4>\n                <h4>{EXPORT_TITLE}</h4><br></br>\n                {PROGRAM} : <select id=\"programId\" name=\"programId\" multiple={true}>\n                    {programItems}\n                </select><br></br><br></br>\n                <button type=\"button\" onClick={this.exportClicked}>{BTN_EXPORT}</button>\n            </div>\n        )\n    }\n\n    exportClicked() {\n        var zip = new JSZip();\n        var selectedPrgArr = $(\"#programId\").val();\n        var db1;\n        var storeOS;\n        var openRequest = indexedDB.open('fasp', 1);\n        openRequest.onupgradeneeded = function (e) {\n            var db1 = e.target.result;\n            if (!db1.objectStoreNames.contains('programData')) {\n                storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n            }\n        };\n        openRequest.onsuccess = function (e) {\n            db1 = e.target.result;\n            var transaction = db1.transaction(['programData'], 'readwrite');\n            var program = transaction.objectStore('programData');\n            var getRequest = program.getAll();\n            getRequest.onerror = function (event) {\n                // Handle errors!\n            };\n            getRequest.onsuccess = function (event) {\n                var myResult = [];\n                myResult = getRequest.result;\n                for (var i = 0; i < myResult.length; i++) {\n                    for (var j = 0; j < selectedPrgArr.length; j++) {\n                        if (myResult[i].id == selectedPrgArr[j]) {\n                            var txt = JSON.stringify(myResult[i]);\n                            zip.file(\"file\" + parseInt(i + 1) + \".txt\", txt);\n\n                        }\n                    }\n                    if (i == myResult.length - 1) {\n                        zip.generateAsync({\n                            type: \"blob\"\n                        }).then(function (content) {\n                            FileSaver.saveAs(content, \"download.zip\");\n                        });\n                        this.setState({\n                            message: `${DATA_EXPORT_SUCCESS}`\n                        })\n                    }\n                }\n\n\n            }.bind(this);\n        }.bind(this)\n\n\n\n    }\n\n}\n\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport IdleTimer from 'react-idle-timer';\nimport WelcomeComponent from \"../home/WelcomeComponent\";\nimport { IdleTimeOutModal } from './IdleModal.js';\nimport PropTypes from 'prop-types';\nimport '../../css/bootstrap/bootstrap.min.css';\nimport '../../App.css'\nimport AddUserComponent from \"../user/AddUserComponent.jsx\";\nimport UserListComponent from \"../user/UserListComponent.jsx\";\nimport EditUserComponent from \"../user/EditUserComponent.jsx\";\nimport UpdateExpiredPasswordComponent from \"../home/UpdateExpiredPasswordComponent.jsx\";\nimport ChangePasswordComponent from \"../home/ChangePasswordComponent.jsx\";\nimport ForgotPasswordComponent from \"../home/ForgotPasswordComponent.jsx\";\nimport LoginComponent from \"../home/LoginComponent.jsx\";\nimport RoleListComponent from \"../user/RoleListComponent.jsx\";\nimport AddRoleComponent from \"../user/AddRoleComponent.jsx\";\nimport EditRoleComponent from \"../user/EditRoleComponent.jsx\";\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport AddLanguageComponent from '../language/AddLanguageComponent'\nimport LanguageListComponent from \"../language/LanguageListComponent.jsx\"\nimport EditLanguageComponent from \"../language/EditLanguageComponent.jsx\"\nimport AddDataSourceTypeComponent from \"../datasourceType/AddDataSourceTypeComponent.jsx\"\nimport DataSourceTypeListComponent from \"../datasourceType/DataSourceTypeListComponent.jsx\"\nimport UpdateDataSourceTypeComponent from \"../datasourceType/UpdateDataSourceTypeComponent.jsx\"\nimport AddDataSource from \"../dataSource/AddDataSource.jsx\"\nimport DataSourceListComponent from \"../dataSource/DataSourceListComponent.jsx\"\nimport UpdateDataSourceComponent from \"../dataSource/UpdateDataSourceComponent.jsx\"\nimport AddCurrencyComponent from \"../currency/AddCurrencyComponent.jsx\"\nimport CurrencyListComponent from \"../currency/CurrencyListComponent.jsx\"\nimport UpdateCurrencyComponent from \"../currency/UpdateCurrencyComponent.jsx\"\nimport AddCountryComponent from \"../country/AddCountryComponent.jsx\"\nimport CountryListComponent from \"../country/CountryListComponent.jsx\"\nimport UpdateCountryComponent from \"../country/UpdateCountryComponent.jsx\"\nimport AddShipmentStatusComponent from \"../shipmentStatus/AddShipmentStatusComponent.jsx\"\nimport ShipmentStatusListComponent from \"../shipmentStatus/ShipmentStatusListComponent.jsx\"\nimport UpdateShipmentStatusComponent from \"../shipmentStatus/UpdateShipmentStatusComponent.jsx\"\nimport DownloadProgramDataComponent from '../program/DownloadProgramDataComponent';\nimport ImportProgramDataComponent from '../program/ImportProgramDataComponent';\nimport ExportProgramDataComponent from '../program/ExportProgramDataComponent';\n\n\nclass Layout extends React.Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            timeout: AuthenticationService.checkSessionTimeOut(),\n            showModal: false,\n            userLoggedIn: false,\n            isTimedOut: false\n        }\n\n        this.idleTimer = null\n        this.onAction = this._onAction.bind(this)\n        this.onActive = this._onActive.bind(this)\n        this.onIdle = this._onIdle.bind(this)\n        this.handleClose = this.handleClose.bind(this)\n        this.handleLogout = this.handleLogout.bind(this)\n    }\n\n    _onAction(e) {\n      console.log('user did something', e)\n      this.setState({isTimedOut: false})\n    }\n   \n    _onActive(e) {\n      console.log('user is active', e)\n      this.setState({isTimedOut: false})\n    }\n   \n    _onIdle(e) {\n      console.log('user is idle', e)\n      const isTimedOut = this.state.isTimedOut\n      if (isTimedOut) {\n          this.props.history.push('/')\n      } else {\n        this.setState({showModal: true})\n        this.idleTimer.reset();\n        this.setState({isTimedOut: true})\n      }\n      \n    }\n\n    handleClose() {\n      this.setState({showModal: false})\n    }\n\n    handleLogout() {\n      this.setState({showModal: false})\n      this.props.history.push('/')\n    }\n\n    render(){\n      const { match } = this.props\n      return(\n        <>\n          <IdleTimer\n            ref={ref => { this.idleTimer = ref }}\n            element={document}\n            onActive={this.onActive}\n            onIdle={this.onIdle}\n            onAction={this.onAction}\n            debounce={250}\n            timeout={this.state.timeout} />\n\n            <div className=\"\">\n            {/* {AuthenticationService.setupAxiosInterceptors()} */}\n                <Switch>\n\n                {/* <Route path=\"/\" exact component={LoginComponent} /> */}\n                <Route path=\"/login/:message\" exact component={LoginComponent} />\n                    <Route \n                        exact path={`${match.path}welcome`}\n                        render={(props) => <WelcomeComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}welcome/:message`}\n                        render={(props) => <WelcomeComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}addUser`}\n                        render={(props) => <AddUserComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}userList`}\n                        render={(props) => <UserListComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}userList/:message`}\n                        render={(props) => <UserListComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}editUser`}\n                        render={(props) => <EditUserComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}updateExpiredPassword`}\n                        render={(props) => <UpdateExpiredPasswordComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}changePassword`}\n                        render={(props) => <ChangePasswordComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}forgotPassword`}\n                        render={(props) => <ForgotPasswordComponent {...props} /> }/>\n                    />\n                    \n                    <Route \n                        exact path={`${match.path}addRole`}\n                        render={(props) => <AddRoleComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}roleList`}\n                        render={(props) => <RoleListComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}roleList/:message`}\n                        render={(props) => <RoleListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editRole`}\n                        render={(props) => <EditRoleComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}addLanguage`}\n                        render={(props) => <AddLanguageComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editLanguage`}\n                        render={(props) => <EditLanguageComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}languageList/:message`}\n                        render={(props) => <LanguageListComponent {...props} /> }/>\n                    />\n                    \n                    <Route \n                        exact path={`${match.path}addDataSourceType`}\n                        render={(props) => <AddDataSourceTypeComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editDataSourceType`}\n                        render={(props) => <UpdateDataSourceTypeComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}dataSourceTypeList/:message`}\n                        render={(props) => <DataSourceTypeListComponent {...props} /> }/>\n                    />\n\n\n                    <Route \n                        exact path={`${match.path}addDataSource`}\n                        render={(props) => <AddDataSource {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editDataSource`}\n                        render={(props) => <UpdateDataSourceComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}dataSourceList/:message`}\n                        render={(props) => <DataSourceListComponent {...props} /> }/>\n                    />\n\n\n                    <Route \n                        exact path={`${match.path}addCurrency`}\n                        render={(props) => <AddCurrencyComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editCurrency`}\n                        render={(props) => <UpdateCurrencyComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}currencyList/:message`}\n                        render={(props) => <CurrencyListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}downloadProgramData/`}\n                        render={(props) => <DownloadProgramDataComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}importProgramData/`}\n                        render={(props) => <ImportProgramDataComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}exportProgramData/`}\n                        render={(props) => <ExportProgramDataComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}addCountry`}\n                        render={(props) => <AddCountryComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}countryList/:message`}\n                        render={(props) => <CountryListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editCountry`}\n                        render={(props) => <UpdateCountryComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}addShipmentStatus`}\n                        render={(props) => <AddShipmentStatusComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}shipmentStatusListAll/:message`}\n                        render={(props) => <ShipmentStatusListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editShipmentStatus`}\n                        render={(props) => <UpdateShipmentStatusComponent {...props} /> }/>\n                    />\n                </Switch>\n                \n              {/*  <IdleTimeOutModal \n                    showModal={this.state.showModal} \n                    handleClose={this.handleClose}\n                    handleLogout={this.handleLogout}\n                />*/}\n            </div>\n        </>\n      )\n   }\n\n }\n\n Layout.propTypes = {\n     match: PropTypes.any.isRequired,\n     history: PropTypes.func.isRequired\n }\n\nexport default Layout","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport AuthenticatedRoute from \"./AuthenticatedRoute.jsx\";\nimport LoginComponent from \"../home/LoginComponent.jsx\";\nimport WelcomeComponent from \"../home/WelcomeComponent\";\nimport ErrorComponent from \"../common/ErrorComponent\";\nimport RegistrationComponent from \"../user/RegistrationComponent\";\nimport UserApprovalComponent from \"../user/UserApprovalComponent\";\nimport AddUserComponent from \"../user/AddUserComponent.jsx\";\nimport UserListComponent from \"../user/UserListComponent.jsx\";\nimport EditUserApprovalComponent from \"../user/EditUserApprovalComponent\";\nimport EditUserComponent from \"../user/EditUserComponent.jsx\";\nimport RoleListComponent from \"../user/RoleListComponent.jsx\";\nimport AddLanguageComponent from \"../language/AddLanguageComponent.jsx\"\nimport AddRoleComponent from \"../user/AddRoleComponent.jsx\";\nimport UpdateExpiredPasswordComponent from \"../home/UpdateExpiredPasswordComponent.jsx\";\nimport Layout from './Layout.js'\n\nclass Sidebar extends Component {\n    render() {\n        return (\n            <div className=\"Sidebar\">\n                <Router basename=\"/palashSprint1\">\n                    <>\n                        <Switch>\n                            <Route path=\"/\" exact component={LoginComponent} />\n\n                            <Route path='/' render={(props) => <Layout {...props} /> } />\n                            {/* <Route path=\"/login/:message\" component={LoginComponent} /> */}\n                            {/* <Route path=\"/addUser\" component={AddUserComponent} /> */}\n                            {/* <Route path=\"/userList\" exact component={UserListComponent} /> */}\n                            {/* <Route path=\"/userList/:message\" component={UserListComponent} /> */}\n                            {/* <Route path=\"/editUser\" component={EditUserComponent} /> */}\n                            {/* <Route path=\"/addRole\" component={AddRoleComponent} /> */}\n                            {/* <Route path=\"/roleList\" component={RoleListComponent} /> */}\n                            {/* <Route path=\"/roleList/:message\" component={RoleListComponent} /> */}\n                            {/* <Route path=\"/editRole\" component={RoleListComponent} /> */}\n                            {/* <AuthenticatedRoute path=\"/updateExpiredPassword\" component={UpdateExpiredPasswordComponent} /> */}\n                            {/* <AuthenticatedRoute path=\"/welcome\" component={WelcomeComponent} /> */}\n                            {/* <AuthenticatedRoute path=\"/registration\" component={RegistrationComponent} /> */}\n                            {/* <AuthenticatedRoute path=\"/listUserApproval/:message\" component={UserApprovalComponent} /> */}\n                            {/* <AuthenticatedRoute path=\"/listUserApproval\" component={UserApprovalComponent} /> */}\n                            {/* <AuthenticatedRoute path=\"/editUserApproval/:registrationId/:emailId\" component={EditUserApprovalComponent} /> */}\n                            <Route component={ErrorComponent} />\n\n                        </Switch>\n                    </>\n                </Router>\n            </div>\n        );\n    }\n\n}\n\nexport default Sidebar;","import React from 'react';\nimport './App.css';\nimport Sidebar from './components/common/Sidebar';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Sidebar></Sidebar>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// AuthenticationService.setupAxiosInterceptors();\nserviceWorker.register();"],"sourceRoot":""}