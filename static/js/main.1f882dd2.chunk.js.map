{"version":3,"sources":["Js/actions.js","components/common/ErrorComponent.jsx","Js/validation.js","Constants.js","api/LoginService.js","components/common/AuthenticationService.js","components/home/LoginComponent.jsx","components/home/WelcomeComponent.jsx","api/UserService.js","components/user/AddUserComponent.jsx","Labels.js","components/user/UserListComponent.jsx","components/user/EditUserComponent.jsx","components/home/ChangePasswordComponent.jsx","components/user/RoleListComponent.jsx","components/user/AddRoleComponent.jsx","components/user/EditRoleComponent.jsx","api/LanguageService.js","components/language/AddLanguageComponent.jsx","components/language/LanguageListComponent.jsx","components/language/EditLanguageComponent.jsx","api/DataSourceTypeService.js","components/datasourceType/AddDataSourceTypeComponent.jsx","components/datasourceType/DataSourceTypeListComponent.jsx","components/datasourceType/UpdateDataSourceTypeComponent.jsx","api/DataSourceService.js","components/dataSource/AddDataSource.jsx","components/dataSource/DataSourceListComponent.jsx","components/dataSource/UpdateDataSourceComponent.jsx","api/CurrencyService.js","components/currency/AddCurrencyComponent.jsx","components/currency/CurrencyListComponent.jsx","components/currency/UpdateCurrencyComponent.jsx","api/CountryService.js","components/country/AddCountryComponent.jsx","components/country/CountryListComponent.jsx","components/country/UpdateCountryComponent.jsx","api/ShipmentStatusService.js","components/shipmentStatus/AddShipmentStatusComponent.jsx","components/shipmentStatus/ShipmentStatusListComponent.jsx","components/shipmentStatus/UpdateShipmentStatusComponent.jsx","api/ProgramService.js","components/program/DownloadProgramDataComponent.jsx","components/program/ImportProgramDataComponent.jsx","components/program/ExportProgramDataComponent.jsx","api/MasterSyncService.js","components/masterSync/SyncMasterDataComponent.jsx","api/RegionService.js","components/region/AddRegionComponent.jsx","components/region/EditRegionComponent.jsx","components/region/RegionListComponent.jsx","api/LabelService.js","components/label/UpdateLabelsComponent.jsx","components/label/LabelListComponent.jsx","api/UnitTypeService.js","components/unitType/AddUnitTypeComponent.jsx","components/unitType/UnitTypeListComponent.jsx","components/unitType/UpdateUnityTypeComponent.jsx","components/common/Layout.js","components/home/UpdateExpiredPasswordComponent.jsx","components/home/ForgotPasswordComponent.jsx","components/common/Sidebar.jsx","App.js","serviceWorker.js","index.js"],"names":["onload","x_navigation_onresize","page_content_onresize","$","css","content_minus","length","content","sidebar","height","document","window","width","hasClass","doc_height","show","removeClass","data","addClass","panel_refresh","panel","action","callback","find","remove","append","innerWidth","each","this","x_navigation_minimize","onresize","timeout","setTimeout","ready","on","e","stopPropagation","parents","fadeOut","parent","wr","prop","box","toggleClass","is","hide","prev","unwrap","resize","head","body","footer","hplus","wrap","panel_fullscreen","animate","panel_remove","blockOpen","attr","accordion","noCollapse","slideUp","slideDown","not","elm","index","setInterval","click","li","event","children","focus","x_navigation","Object","size","obj","key","hasOwnProperty","ErrorComponent","validator","addMethod","value","element","optional","test","API_URL","SECRET_KEY","LoginService","username","password","console","log","axios","post","AuthenticationService","localStorage","getItem","token","jwt_decode","userId","sub","user","language","languageId","typeOfSession","navigator","onLine","newUsername","usernameStored","originalText","CryptoJS","AES","decrypt","toString","enc","Utf8","confirm","decoded","Date","exp","curDate","sessionExpiresOn","setupAxiosInterceptors","get","then","response","catch","error","basicAuthHeader","interceptors","request","use","config","headers","authorization","openRequest","indexedDB","open","onupgradeneeded","target","result","db","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","onsuccess","transaction","objectStore","LoginComponent","props","state","message","loginClicked","bind","forgotPassword","validate","ignore","rules","emailId","required","errorPlacement","insertAfter","className","name","id","match","params","type","href","onClick","val","valid","isUserLoggedIn","authenticate","status","checkIfDifferentUserIsLoggedIn","setItem","encrypt","history","push","setState","pathname","decryptedUsername","decryptedPassword","bcrypt","compare","err","res","alert","Component","WelcomeComponent","json","put","oldPassword","newPassword","AddUserComponent","getLanguageId","realms","languages","roles","submitClicked","cancelClicked","checkTypeOfSession","UserService","getRealmList","getLanguageList","getRoleList","email","phoneNumber","number","realmList","map","item","i","realmId","label","label_pr","label_en","label_fr","label_sp","languagesList","languageName","roleList","roleId","class","maxLength","minLength","multiple","realm","countryIds","addNewUser","UserListComponent","userList","editUser","unlockAccount","getUserList","style","marginLeft","border","align","lastLoginDate","moment","format","faildAttempts","active","location","reload","EditUserComponent","updateClicked","dataChange","Array","from","selectedOptions","onChange","checked","ChangePasswordComponent","checkOldPassword","confirmNewPassword","checkPassword","changePassword","getLoggedInUsername","statusText","text","RoleListComponent","editRole","addNewRole","role","engLabel","porLabel","freLabel","spaLabel","AddRoleComponent","businessFunctions","getBusinessFunctionList","maxlength","businessFunctionsList","businessFunctionId","data-live-search","data-actions-box","canCreateRole","readOnly","placeholder","AddLanguageComponent","updateFieldData","submitForm","Capitalize","lettersonly","str","charAt","toUpperCase","slice","LanguageService","addLanguage","LanguageListComponent","langaugeList","editLanguage","addNewLanguage","EditLanguageComponent","updateForm","AddDataSourceTypeComponent","lettersonlywhitespace","DataSourceTypeService","addDataSourceType","DataSourceListComponent","dataSourceList","editDataSourceType","addNewDataSourceType","getDataSourceTypeList","dataSourceType","dataSourceTypeId","UpdateDataSourceTypeComponent","labelId","AddDataSource","dataSourceTypeList","getDataSourceTypeListActive","dataSource","DataSourceService","addDataSource","dataSourceTypes","editDataSource","addNewDataSource","getDataSourceList","dataSourceId","UpdateDataSourceComponent","AddCurrencyComponent","currencyCode","currencySymbol","conversionRateToUsd","lettersonlyspecialchar","positiveintegerdecimal","currency","CurrencyService","addCurrency","CurrencyListComponent","currencyList","editCurrency","addNewCurrency","getCurrencyList","currencyId","UpdateCurrencyComponent","AddCountryComponent","languageList","getLanguageListActive","getCurrencyListActive","CountryService","addCountry","languageItems","currencyItems","itemOne","CountryListComponent","countryList","addNewCountry","editCountry","getCountryListAll","country","countryId","UpdateCountryComponent","curencyId","AddShipmentStatusComponent","shipmentStatus","nextShipmentStatusAllowed","shipmentStatusList","ShipmentStatusService","getShipmentStatusListActive","addShipmentStatus","shipmentStatusItems","shipmentStatusId","ShipmentStatusListComponent","editShipmentStatus","addNewShipmentStatus","getShipmentStatusListAll","UpdateShipmentStatusComponent","programId","DownloadProgramDataComponent","programList","downloadClicked","ProgramService","getProgramList","programItems","ype","programArr","j","getProgramData","db1","program","encryptedText","JSON","stringify","programVersion","version","programName","labelEn","programData","putRequest","onerror","ImportProgramDataComponent","importClicked","programSubmitClicked","File","FileReader","FileList","Blob","undefined","querySelector","files","file","split","JSZip","loadAsync","zip","fileName","keys","forEach","filename","async","fileData","programDataJson","parse","plaintext","programDataJsonDecrypted","selectedPrgArr","addProgramDataRequest","ExportProgramDataComponent","exportClicked","getRequest","getAll","proList","myResult","programJson","selectedPrgArrText","toArray","txt","parseInt","generateAsync","FileSaver","saveAs","lastSyncDate","SyncMasterDataComponent","totalMasters","syncedMasters","syncedPercentage","syncMasters","aria-valuenow","aria-valuemin","aria-valuemax","lastSyncDateTransaction","updatedSyncDate","lastSyncDateRequest","MasterSyncService","getCountryListForSync","countryObjectStore","Math","floor","getCurrencyListForSync","currencyObjectStore","getUnitListForSync","unitObjectStore","getUnitTypeList","unitTypeObjectStore","getOrganisationListForSync","organisationObjectStore","getHealthAreaListForSync","healthAreaObjectStore","getRegionListForSync","regionObjectStore","getFundingSourceListForSync","fundingSourceObjectStore","getSubFundingSourceListForSync","subFundingSourceObjectStore","getProductListForSync","productObjectStore","getProductCategoryListForSync","productCategoryObjectStore","getDataSourceListForSync","dataSourceObjectStore","getDataSourceTypeListForSync","dataSourceTypeObjectStore","getShipmentStatusListForSync","shipmentStatusObjectStore","getShipmentStatusAllowedListForSync","shipmentStatusAllowedObjectStore","getLogisticsUnitListForSync","logisticsUnitObjectStore","getPlanningUnitListForSync","planningUnitObjectStore","getManufacturerListForSync","manufacturerObjectStore","getLanguageListForSync","languageObjectStore","updatedLastSyncDateJson","AddRegionComponent","countries","region","realmCountry","selCountries","getCountryListByRealmId","realmCountryId","getRealmCountryList","filter","c","RegionService","addRegion","EditRegionComponent","realmOnChangeEvent","getRealmCountryListByRealmId","editRegion","RegionListComponent","regions","getRegionList","regionId","UpdateLabelsComponent","LabelsService","updateLabels","LabelListComponent","labelList","editLabel","getLabelsListAll","createdDate","lastModifiedDate","AddUnitTypeComponent","unitType","UnitTypeService","addUniType","UnitTypeListComponent","unitTypeList","addNewUnitType","editUnitType","getUnitTypeListAll","unityType","unitTypeId","UpdateUnitTypeComponent","updateUnitType","Layout","checkSessionTimeOut","showModal","userLoggedIn","isTimedOut","idleTimer","onAction","_onAction","onActive","_onActive","onIdle","_onIdle","handleClose","handleLogout","reset","ref","debounce","path","exact","component","render","React","UpdateExpiredPasswordComponent","logoutClicked","updateExpiredPassword","ForgotPasswordComponent","Sidebar","data-sound","basename","data-box","src","alt","title","App","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","getElementById","URL","process","origin","addEventListener","fetch","contentType","indexOf","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1f882dd2.chunk.js","sourcesContent":["import $ from 'jquery';\r\n//const $ = window.$;\r\n$(document).ready(function(){        \r\n    \r\n    /* PROGGRESS START */\r\n    // $.mpb(\"show\",{value: [0,50],speed: 5});        \r\n    /* END PROGGRESS START */\r\n    \r\n    var html_click_avail = true;\r\n    \r\n    $(\"html\").on(\"click\", function(){\r\n        if(html_click_avail)\r\n            $(\".x-navigation-horizontal li,.x-navigation-minimized li\").removeClass('active');        \r\n    });        \r\n    \r\n    $(\".x-navigation-horizontal .panel\").on(\"click\",function(e){\r\n        e.stopPropagation();\r\n    });    \r\n    \r\n    /* WIDGETS (DEMO)*/\r\n    $(\".widget-remove\").on(\"click\",function(){\r\n        $(this).parents(\".widget\").fadeOut(400,function(){\r\n            $(this).remove();\r\n            $(\"body > .tooltip\").remove();\r\n        });\r\n        return false;\r\n    });\r\n    /* END WIDGETS */\r\n    \r\n    /* Gallery Items */\r\n    $(\".gallery-item .iCheck-helper\").on(\"click\",function(){\r\n        var wr = $(this).parent(\"div\");\r\n        if(wr.hasClass(\"checked\")){\r\n            $(this).parents(\".gallery-item\").addClass(\"active\");\r\n        }else{            \r\n            $(this).parents(\".gallery-item\").removeClass(\"active\");\r\n        }\r\n    });\r\n    $(\".gallery-item-remove\").on(\"click\",function(){\r\n        $(this).parents(\".gallery-item\").fadeOut(400,function(){\r\n            $(this).remove();\r\n        });\r\n        return false;\r\n    });\r\n    $(\"#gallery-toggle-items\").on(\"click\",function(){\r\n        \r\n        $(\".gallery-item\").each(function(){\r\n            \r\n            var wr = $(this).find(\".iCheck-helper\").parent(\"div\");\r\n            \r\n            if(wr.hasClass(\"checked\")){\r\n                $(this).removeClass(\"active\");\r\n                wr.removeClass(\"checked\");\r\n                wr.find(\"input\").prop(\"checked\",false);\r\n            }else{            \r\n                $(this).addClass(\"active\");\r\n                wr.addClass(\"checked\");\r\n                wr.find(\"input\").prop(\"checked\",true);\r\n            }\r\n            \r\n        });\r\n        \r\n    });\r\n    /* END Gallery Items */\r\n\r\n    // XN PANEL DRAGGING\r\n    // $( \".xn-panel-dragging\" ).draggable({\r\n    //     containment: \".page-content\", handle: \".panel-heading\", scroll: false,\r\n    //     start: function(event,ui){\r\n    //         html_click_avail = false;\r\n    //         $(this).addClass(\"dragged\");\r\n    //     },\r\n    //     stop: function( event, ui ) {\r\n    //         $(this).resizable({\r\n    //             maxHeight: 400,\r\n    //             maxWidth: 600,\r\n    //             minHeight: 200,\r\n    //             minWidth: 200,\r\n    //             helper: \"resizable-helper\",\r\n    //             start: function( event, ui ) {\r\n    //                 html_click_avail = false;\r\n    //             },\r\n    //             stop: function( event, ui ) {\r\n    //                 $(this).find(\".panel-body\").height(ui.size.height - 82);\r\n    //                 $(this).find(\".scroll\").mCustomScrollbar(\"update\");\r\n                                            \r\n    //                 setTimeout(function(){\r\n    //                     html_click_avail = true; \r\n    //                 },1000);\r\n                                            \r\n    //             }\r\n    //         })\r\n            \r\n    //         setTimeout(function(){\r\n    //             html_click_avail = true; \r\n    //         },1000);            \r\n    //     }\r\n    // });\r\n    // END XN PANEL DRAGGING\r\n    \r\n    /* DROPDOWN TOGGLE */\r\n    $(\".dropdown-toggle\").on(\"click\",function(){\r\n        onresize();\r\n    });\r\n    /* DROPDOWN TOGGLE */\r\n    \r\n    /* MESSAGE BOX */\r\n    $(\".mb-control\").on(\"click\",function(){\r\n        var box = $($(this).data(\"box\"));\r\n        if(box.length > 0){\r\n            box.toggleClass(\"open\");\r\n            \r\n            var sound = box.data(\"sound\");\r\n            \r\n            if(sound === 'alert')\r\n                playAudio('alert');\r\n            \r\n            if(sound === 'fail')\r\n                playAudio('fail');\r\n            \r\n        }        \r\n        return false;\r\n    });\r\n    $(\".mb-control-close\").on(\"click\",function(){\r\n       $(this).parents(\".message-box\").removeClass(\"open\");\r\n       return false;\r\n    });    \r\n    /* END MESSAGE BOX */\r\n    \r\n    /* CONTENT FRAME */\r\n    $(\".content-frame-left-toggle\").on(\"click\",function(){\r\n        $(\".content-frame-left\").is(\":visible\") \r\n        ? $(\".content-frame-left\").hide() \r\n        : $(\".content-frame-left\").show();\r\n        page_content_onresize();\r\n    });\r\n    $(\".content-frame-right-toggle\").on(\"click\",function(){\r\n        $(\".content-frame-right\").is(\":visible\") \r\n        ? $(\".content-frame-right\").hide() \r\n        : $(\".content-frame-right\").show();\r\n        page_content_onresize();\r\n    });    \r\n    /* END CONTENT FRAME */\r\n    \r\n    /* MAILBOX */\r\n    $(\".mail .mail-star\").on(\"click\",function(){\r\n        $(this).toggleClass(\"starred\");\r\n    });\r\n    \r\n    $(\".mail-checkall .iCheck-helper\").on(\"click\",function(){\r\n        \r\n        var prop = $(this).prev(\"input\").prop(\"checked\");\r\n                    \r\n        $(\".mail .mail-item\").each(function(){            \r\n            var cl = $(this).find(\".mail-checkbox > div\");            \r\n            cl.toggleClass(\"checked\",prop).find(\"input\").prop(\"checked\",prop);                        \r\n        }); \r\n        \r\n    });\r\n    /* END MAILBOX */\r\n    \r\n    /* PANELS */\r\n    \r\n    $(\".panel-fullscreen\").on(\"click\",function(){\r\n        panel_fullscreen($(this).parents(\".panel\"));\r\n        return false;\r\n    });\r\n    \r\n    $(\".panel-collapse\").on(\"click\",function(){\r\n        panel_collapse($(this).parents(\".panel\"));\r\n        $(this).parents(\".dropdown\").removeClass(\"open\");\r\n        return false;\r\n    });    \r\n    $(\".panel-remove\").on(\"click\",function(){\r\n        panel_remove($(this).parents(\".panel\"));\r\n        $(this).parents(\".dropdown\").removeClass(\"open\");\r\n        return false;\r\n    });\r\n    $(\".panel-refresh\").on(\"click\",function(){\r\n        var panel = $(this).parents(\".panel\");\r\n        panel_refresh(panel);\r\n\r\n        setTimeout(function(){\r\n            panel_refresh(panel);\r\n        },3000);\r\n        \r\n        $(this).parents(\".dropdown\").removeClass(\"open\");\r\n        return false;\r\n    });\r\n    /* EOF PANELS */\r\n    \r\n    /* ACCORDION */\r\n    $(\".accordion .panel-title a\").on(\"click\",function(){\r\n        \r\n        var blockOpen = $(this).attr(\"href\");\r\n        var accordion = $(this).parents(\".accordion\");        \r\n        var noCollapse = accordion.hasClass(\"accordion-dc\");\r\n        \r\n        \r\n        if($(blockOpen).length > 0){            \r\n            \r\n            if($(blockOpen).hasClass(\"panel-body-open\")){\r\n                $(blockOpen).slideUp(200,function(){\r\n                    $(this).removeClass(\"panel-body-open\");\r\n                });\r\n            }else{\r\n                $(blockOpen).slideDown(200,function(){\r\n                    $(this).addClass(\"panel-body-open\");\r\n                });\r\n            }\r\n            \r\n            if(!noCollapse){\r\n                accordion.find(\".panel-body-open\").not(blockOpen).slideUp(200,function(){\r\n                    $(this).removeClass(\"panel-body-open\");\r\n                });                                           \r\n            }\r\n            \r\n            return false;\r\n        }\r\n        \r\n    });\r\n    /* EOF ACCORDION */\r\n    \r\n    /* DATATABLES/CONTENT HEIGHT FIX */\r\n    $(\".dataTables_length select\").on(\"change\",function(){\r\n        onresize();\r\n    });\r\n    /* END DATATABLES/CONTENT HEIGHT FIX */\r\n    \r\n    /* TOGGLE FUNCTION */\r\n    $(\".toggle\").on(\"click\",function(){\r\n        var elm = $(\"#\"+$(this).data(\"toggle\"));\r\n        if(elm.is(\":visible\"))\r\n            elm.addClass(\"hidden\").removeClass(\"show\");\r\n        else\r\n            elm.addClass(\"show\").removeClass(\"hidden\");\r\n        \r\n        return false;\r\n    });\r\n    /* END TOGGLE FUNCTION */\r\n    \r\n    /* MESSAGES LOADING */\r\n    $(\".messages .item\").each(function(index){\r\n        var elm = $(this);\r\n        setInterval(function(){\r\n            elm.addClass(\"item-visible\");\r\n        },index*300);              \r\n    });\r\n    /* END MESSAGES LOADING */\r\n    \r\n    x_navigation();\r\n});\r\n\r\n$(function(){            \r\n    onload();\r\n\r\n    /* PROGGRESS COMPLETE */\r\n    // $.mpb(\"update\",{value: 100, speed: 5, complete: function(){            \r\n    //     $(\".mpb\").fadeOut(200,function(){\r\n    //         $(this).remove();\r\n    //     });\r\n    // }});\r\n    /* END PROGGRESS COMPLETE */\r\n});\r\n\r\n$(window).resize(function(){\r\n    x_navigation_onresize();\r\n    page_content_onresize();\r\n});\r\n\r\nfunction onload(){\r\n    x_navigation_onresize();    \r\n    page_content_onresize();\r\n}\r\n\r\nfunction page_content_onresize(){\r\n    $(\".page-content,.content-frame-body,.content-frame-right,.content-frame-left\").css(\"width\",\"\").css(\"height\",\"\");\r\n    \r\n    var content_minus = 0;\r\n    content_minus = ($(\".page-container-boxed\").length > 0) ? 40 : content_minus;\r\n    content_minus += ($(\".page-navigation-top-fixed\").length > 0) ? 50 : 0;\r\n    \r\n    var content = $(\".page-content\");\r\n    var sidebar = $(\".page-sidebar\");\r\n    \r\n    if(content.height() < $(document).height() - content_minus){        \r\n        content.height($(document).height() - content_minus);\r\n    }        \r\n    \r\n    if(sidebar.height() > content.height()){        \r\n        content.height(sidebar.height());\r\n    }\r\n    \r\n    if($(window).width() > 1024){\r\n        \r\n        if($(\".page-sidebar\").hasClass(\"scroll\")){\r\n            if($(\"body\").hasClass(\"page-container-boxed\")){\r\n                var doc_height = $(document).height() - 40;\r\n            }else{\r\n                var doc_height = $(window).height();\r\n            }\r\n           $(\".page-sidebar\").height(doc_height);\r\n           \r\n       }\r\n       \r\n        if($(\".content-frame-body\").height() < $(document).height()-162){\r\n            $(\".content-frame-body,.content-frame-right,.content-frame-left\").height($(document).height()-162);            \r\n        }else{\r\n            $(\".content-frame-right,.content-frame-left\").height($(\".content-frame-body\").height());\r\n        }\r\n        \r\n        $(\".content-frame-left\").show();\r\n        $(\".content-frame-right\").show();\r\n    }else{\r\n        $(\".content-frame-body\").height($(\".content-frame\").height()-80);\r\n        \r\n        if($(\".page-sidebar\").hasClass(\"scroll\"))\r\n           $(\".page-sidebar\").css(\"height\",\"\");\r\n    }\r\n    \r\n    if($(window).width() < 1200){\r\n        if($(\"body\").hasClass(\"page-container-boxed\")){\r\n            $(\"body\").removeClass(\"page-container-boxed\").data(\"boxed\",\"1\");\r\n        }\r\n    }else{\r\n        if($(\"body\").data(\"boxed\") === \"1\"){\r\n            $(\"body\").addClass(\"page-container-boxed\").data(\"boxed\",\"\");\r\n        }\r\n    }\r\n}\r\n\r\n/* PANEL FUNCTIONS */\r\nfunction panel_fullscreen(panel){    \r\n    \r\n    if(panel.hasClass(\"panel-fullscreened\")){\r\n        panel.removeClass(\"panel-fullscreened\").unwrap();\r\n        panel.find(\".panel-body,.chart-holder\").css(\"height\",\"\");\r\n        panel.find(\".panel-fullscreen .fa\").removeClass(\"fa-compress\").addClass(\"fa-expand\");        \r\n        \r\n        $(window).resize();\r\n    }else{\r\n        var head    = panel.find(\".panel-heading\");\r\n        var body    = panel.find(\".panel-body\");\r\n        var footer  = panel.find(\".panel-footer\");\r\n        var hplus   = 30;\r\n        \r\n        if(body.hasClass(\"panel-body-table\") || body.hasClass(\"padding-0\")){\r\n            hplus = 0;\r\n        }\r\n        if(head.length > 0){\r\n            hplus += head.height()+21;\r\n        } \r\n        if(footer.length > 0){\r\n            hplus += footer.height()+21;\r\n        } \r\n\r\n        panel.find(\".panel-body,.chart-holder\").height($(window).height() - hplus);\r\n        \r\n        \r\n        panel.addClass(\"panel-fullscreened\").wrap('<div class=\"panel-fullscreen-wrap\"></div>');        \r\n        panel.find(\".panel-fullscreen .fa\").removeClass(\"fa-expand\").addClass(\"fa-compress\");\r\n        \r\n        $(window).resize();\r\n    }\r\n}\r\n\r\nfunction panel_collapse(panel,action,callback){\r\n\r\n    if(panel.hasClass(\"panel-toggled\")){        \r\n        panel.removeClass(\"panel-toggled\");\r\n        \r\n        panel.find(\".panel-collapse .fa-angle-up\").removeClass(\"fa-angle-up\").addClass(\"fa-angle-down\");\r\n\r\n        if(action && action === \"shown\" && typeof callback === \"function\")\r\n            callback();            \r\n\r\n        onload();\r\n                \r\n    }else{\r\n        panel.addClass(\"panel-toggled\");\r\n                \r\n        panel.find(\".panel-collapse .fa-angle-down\").removeClass(\"fa-angle-down\").addClass(\"fa-angle-up\");\r\n\r\n        if(action && action === \"hidden\" && typeof callback === \"function\")\r\n            callback();\r\n\r\n        onload();        \r\n        \r\n    }\r\n}\r\nfunction panel_refresh(panel,action,callback){        \r\n    if(!panel.hasClass(\"panel-refreshing\")){\r\n        panel.append('<div class=\"panel-refresh-layer\"><img src=\"img/loaders/default.gif\"/></div>');\r\n        panel.find(\".panel-refresh-layer\").width(panel.width()).height(panel.height());\r\n        panel.addClass(\"panel-refreshing\");\r\n        \r\n        if(action && action === \"shown\" && typeof callback === \"function\") \r\n            callback();\r\n    }else{\r\n        panel.find(\".panel-refresh-layer\").remove();\r\n        panel.removeClass(\"panel-refreshing\");\r\n        \r\n        if(action && action === \"hidden\" && typeof callback === \"function\") \r\n            callback();        \r\n    }       \r\n    onload();\r\n}\r\nfunction panel_remove(panel,action,callback){    \r\n    if(action && action === \"before\" && typeof callback === \"function\") \r\n        callback();\r\n    \r\n    panel.animate({'opacity':0},200,function(){\r\n        panel.parent(\".panel-fullscreen-wrap\").remove();\r\n        $(this).remove();        \r\n        if(action && action === \"after\" && typeof callback === \"function\") \r\n            callback();\r\n        \r\n        \r\n        onload();\r\n    });    \r\n}\r\n/* EOF PANEL FUNCTIONS */\r\n\r\n/* X-NAVIGATION CONTROL FUNCTIONS */\r\nfunction x_navigation_onresize(){    \r\n    \r\n    var inner_port = window.innerWidth || $(document).width();\r\n    \r\n    if(inner_port < 1025){               \r\n        $(\".page-sidebar .x-navigation\").removeClass(\"x-navigation-minimized\");\r\n        $(\".page-container\").removeClass(\"page-container-wide\");\r\n        $(\".page-sidebar .x-navigation li.active\").removeClass(\"active\");\r\n        \r\n                \r\n        $(\".x-navigation-horizontal\").each(function(){            \r\n            if(!$(this).hasClass(\"x-navigation-panel\")){                \r\n                $(\".x-navigation-horizontal\").addClass(\"x-navigation-h-holder\").removeClass(\"x-navigation-horizontal\");\r\n            }\r\n        });\r\n        \r\n        \r\n    }else{        \r\n        if($(\".page-navigation-toggled\").length > 0){\r\n            x_navigation_minimize(\"close\");\r\n        }       \r\n        \r\n        $(\".x-navigation-h-holder\").addClass(\"x-navigation-horizontal\").removeClass(\"x-navigation-h-holder\");                \r\n    }\r\n    \r\n}\r\n\r\nfunction x_navigation_minimize(action){\r\n    \r\n    if(action == 'open'){\r\n        $(\".page-container\").removeClass(\"page-container-wide\");\r\n        $(\".page-sidebar .x-navigation\").removeClass(\"x-navigation-minimized\");\r\n        $(\".x-navigation-minimize\").find(\".fa\").removeClass(\"fa-indent\").addClass(\"fa-dedent\");\r\n     //   $(\".page-sidebar.scroll\").mCustomScrollbar(\"update\");\r\n    }\r\n    \r\n    if(action == 'close'){\r\n        $(\".page-container\").addClass(\"page-container-wide\");\r\n        $(\".page-sidebar .x-navigation\").addClass(\"x-navigation-minimized\");\r\n        $(\".x-navigation-minimize\").find(\".fa\").removeClass(\"fa-dedent\").addClass(\"fa-indent\");\r\n        // $(\".page-sidebar.scroll\").mCustomScrollbar(\"disable\",true);\r\n    }\r\n    \r\n    $(\".x-navigation li.active\").removeClass(\"active\");\r\n    \r\n}\r\n\r\nfunction x_navigation(){\r\n    \r\n    $(\".x-navigation-control\").click(function(){\r\n        $(this).parents(\".x-navigation\").toggleClass(\"x-navigation-open\");\r\n        \r\n        onresize();\r\n        \r\n        return false;\r\n    });\r\n\r\n    if($(\".page-navigation-toggled\").length > 0){\r\n        x_navigation_minimize(\"close\");\r\n    }    \r\n    \r\n    $(\".x-navigation-minimize\").click(function(){\r\n                \r\n        if($(\".page-sidebar .x-navigation\").hasClass(\"x-navigation-minimized\")){\r\n            $(\".page-container\").removeClass(\"page-navigation-toggled\");\r\n            x_navigation_minimize(\"open\");\r\n        }else{            \r\n            $(\".page-container\").addClass(\"page-navigation-toggled\");\r\n            x_navigation_minimize(\"close\");            \r\n        }\r\n        \r\n        onresize();\r\n        \r\n        return false;        \r\n    });\r\n       \r\n    $(\".x-navigation  li > a\").click(function(){\r\n        \r\n        var li = $(this).parent('li');        \r\n        var ul = li.parent(\"ul\");\r\n        \r\n        ul.find(\" > li\").not(li).removeClass(\"active\");    \r\n        \r\n    });\r\n    \r\n    $(\".x-navigation li\").click(function(event){\r\n        event.stopPropagation();\r\n        \r\n        var li = $(this);\r\n                \r\n            if(li.children(\"ul\").length > 0 || li.children(\".panel\").length > 0 || $(this).hasClass(\"xn-profile\") > 0){\r\n                if(li.hasClass(\"active\")){\r\n                    li.removeClass(\"active\");\r\n                    li.find(\"li.active\").removeClass(\"active\");\r\n                }else\r\n                    li.addClass(\"active\");\r\n                    \r\n                onresize();\r\n                \r\n                if($(this).hasClass(\"xn-profile\") > 0)\r\n                    return true;\r\n                else\r\n                    return false;\r\n            }                                     \r\n    });\r\n    \r\n    /* XN-SEARCH */\r\n    $(\".xn-search\").on(\"click\",function(){\r\n        $(this).find(\"input\").focus();\r\n    })\r\n    /* END XN-SEARCH */\r\n    \r\n}\r\n/* EOF X-NAVIGATION CONTROL FUNCTIONS */\r\n\r\n/* PAGE ON RESIZE WITH TIMEOUT */\r\nfunction onresize(timeout){    \r\n    timeout = timeout ? timeout : 200;\r\n\r\n    setTimeout(function(){\r\n        page_content_onresize();\r\n    },timeout);\r\n}\r\n/* EOF PAGE ON RESIZE WITH TIMEOUT */\r\n\r\n/* PLAY SOUND FUNCTION */\r\nfunction playAudio(file){\r\n    /*if(file === 'alert')\r\n        document.getElementById('audio-alert').play();\r\n\r\n    if(file === 'fail')\r\n        document.getElementById('audio-fail').play(); */   \r\n}\r\n/* END PLAY SOUND FUNCTION */\r\n\r\n/* NEW OBJECT(GET SIZE OF ARRAY) */\r\nObject.size = function(obj) {\r\n    var size = 0, key;\r\n    for (key in obj) {\r\n        if (obj.hasOwnProperty(key)) size++;\r\n    }\r\n    return size;\r\n};\r\n/* EOF NEW OBJECT(GET SIZE OF ARRAY) */","import React from \"react\";\n\nfunction ErrorComponent() {\n    return (\n        <div></div>\n    )\n}\n\nexport default ErrorComponent","import $ from 'jquery';\nimport 'jquery-validation';\n\n\n\n$.validator.addMethod('emailId', function (value, element) {\n\n    return this.optional(element) || /^[\\w][\\w.-]{0,127}$/.test(value)\n  \n  }, \"Please enter a valid Docker image tag, like 'latest' or '1.10.0'\");\n\n  $.validator.addMethod( \"lettersonly\", function( value, element ) {\n    return this.optional( element ) || /^[a-z]+$/i.test( value );\n  }, \"Letters only please\" );\n\n  $.validator.addMethod( \"integer\", function( value, element ) {\n    return this.optional( element ) || /^-?\\d+$/.test( value );\n  }, \"A positive or negative non-decimal number please\" );\n\n  $.validator.addMethod( \"lettersonlywhitespace\", function( value, element ) {\n    return this.optional( element ) || /^[a-zA-Z\\s]*$/.test( value );\n  }, \"Letters or whitespace only please\" );\n\n  $.validator.addMethod( \"lettersonlyspecialchar\", function( value, element ) {\n    return this.optional( element ) || /^\\D+$/.test( value );\n  }, \"Letters or special character  only please\" );\n  \n  $.validator.addMethod( \"positiveintegerdecimal\", function( value, element ) {\n    return this.optional( element ) || /^[+]?([0-9]+(?:[\\.][0-9]*)?|\\.[0-9]+)$/.test( value );\n  }, \"Positive integer or decimal number please\" );","//export const API_URL = 'http://localhost:8081'\n// export const API_URL = 'http://server6.altius.cc:8080/FASP'\n\nexport const API_URL='https://fasp.altius.cc/FASP'\n// export const API_URL='http://192.168.43.70:8080/FASP'\nexport const SECRET_KEY = 'afhghggrehreqiuhrjhjdbfjehgfuoerhfjhfyguayaegrf'\n","import axios from \"axios\"\nimport {API_URL} from '../Constants.js'\n\nclass LoginService {\n\n\n\n    authenticate(username, password) {\n        console.log(\"username---\"+username);\n        console.log(\"password---\"+password);\n        return axios.post(`${API_URL}/authenticate`,{username, password},{});\n    }\n\n    \n}\n\nexport default new LoginService()","import axios from 'axios'\nimport { Online } from \"react-detect-offline\";\nimport jwt_decode from 'jwt-decode'\nimport { API_URL } from '../../Constants.js'\nimport CryptoJS from 'crypto-js'\nimport { SECRET_KEY } from '../../Constants.js'\n\nclass AuthenticationService {\n\n    isUserLoggedIn() {\n        let user = localStorage.getItem('userId');\n        if (user === null) return false\n        return true\n    }\n    getLoggedInUserId() {\n        let token = localStorage.getItem('token');\n        var decoded = jwt_decode(token);\n        return decoded.userId;\n    }\n\n    getLoggedInUsername() {\n        let token = localStorage.getItem('token');\n        var decoded = jwt_decode(token);\n        return decoded.sub;\n    }\n\n    getLanguageId() {\n        let token = localStorage.getItem('token');\n        var decoded = jwt_decode(token);\n        return decoded.user.language.languageId;\n    }\n\n    checkTypeOfSession() {\n        let typeOfSession = localStorage.getItem('typeOfSession');\n        console.log(\"typeofsession---\" + typeOfSession);\n        console.log(\"network----\" + navigator.onLine);\n        if ((typeOfSession === 'Online' && navigator.onLine) || (typeOfSession === 'Offline' && !navigator.onLine)) {\n            console.log(\"true\");\n            return true;\n        } else {\n            console.log(\"false\");\n            return false;\n\n\n\n        }\n    }\n\n    checkIfDifferentUserIsLoggedIn(newUsername) {\n        console.log(\"token username---\" + newUsername);\n        let usernameStored = localStorage.getItem('username');\n        console.log(\"usernameStored---\" + usernameStored);\n        if (usernameStored !== null && usernameStored !== \"\") {\n            var usernameDecrypted = CryptoJS.AES.decrypt(usernameStored, `${SECRET_KEY}`)\n            var originalText = usernameDecrypted.toString(CryptoJS.enc.Utf8);\n            console.log(\"usernameDecrypted---\" + originalText);\n            if (originalText !== newUsername) {\n                if (window.confirm(\"Are you sure you want to overrride already logged in user's details?\")) {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    checkIfTokenExpired() {\n        let token = localStorage.getItem('token');\n        var decoded = jwt_decode(token);\n        console.log(decoded);\n        let tokenExpiryTime = new Date(decoded.exp * 1000);\n        var curDate = new Date();\n        console.log(new Date(decoded.exp * 1000));\n        console.log(\"cur date---\" + curDate);\n\n        if (new Date(decoded.exp * 1000) > new Date()) {\n            console.log(\"Token not expired\");\n            return true;\n        } else {\n            console.log(\"Token expired\");\n            return false;\n        }\n    }\n\n    checkSessionTimeOut() {\n        let token = localStorage.getItem('token');\n        var decoded = jwt_decode(token);\n        console.log(\"decoded---\", decoded);\n        console.log(\"Session expires on---\" + decoded.user.sessionExpiresOn);\n        return decoded.user.sessionExpiresOn;\n    }\n\n    refreshToken() {\n        let token = localStorage.getItem('token');\n        console.log(\"token---\" + token);\n        this.setupAxiosInterceptors();\n        return axios.get(`${API_URL}/refresh`, {}).then(response => {\n            console.log(\"response----------------\", response)\n        }).catch(\n            error => {\n                console.log(\"error----------\", error);\n            })\n    }\n\n    setupAxiosInterceptors() {\n        //console.log(\"Inside interceptor setup\");\n        let token = localStorage.getItem('token');\n        let basicAuthHeader = 'Bearer ' + token\n        console.log(\"headers=\" + basicAuthHeader);\n        axios.interceptors.request.use(\n            // if (this.isUserLoggedIn) {\n            (config) => {\n                config.headers.authorization = basicAuthHeader\n                return config;\n            }\n            // }\n        )\n\n    }\n    storeTokenInIndexedDb(token) {\n        var openRequest = indexedDB.open('fasp', 1);\n        openRequest.onupgradeneeded = function (e) {\n            var db = e.target.result;\n            var storeOS;\n            openRequest.onupgradeneeded = function (e) {\n                var db = e.target.result;\n                if (!db.objectStoreNames.contains('user')) {\n                    storeOS = db.createObjectStore('user', { keyPath: 'id', autoIncrement: true });\n                }\n            };\n            openRequest.onsuccess = function (e) {\n                db = e.target.result;\n                var transaction = db.transaction(['user'], 'readwrite');\n                var user = transaction.objectStore('user');\n                \n            }\n        };\n        // open\n    }\n}\n\n\nexport default new AuthenticationService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport LoginService from '../../api/LoginService'\nimport CryptoJS from 'crypto-js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\nimport bcrypt from 'bcryptjs';\nimport jwt_decode from 'jwt-decode'\nimport { SECRET_KEY } from '../../Constants.js'\nimport '../../Customui.css';\n\n\nexport default class LoginComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.loginClicked = this.loginClicked.bind(this);\n        this.forgotPassword = this.forgotPassword.bind(this);\n    }\n\n    componentDidMount() {\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                emailId: {\n                    required: true\n                },\n                password: {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n\n\n\n            <div className=\"login-section\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div className=\"login-main\">\n\n                            <div className=\"row\">\n                                <div className=\"col-md-6 col-md-offset-2\">\n                                    <div className=\"inp-Section\">\n\n                                        <form name=\"form1\" id=\"form1\">\n\n                                            \n                                            <div className=\"form-group\">\n\n                                                <div className=\"col-md-8 text-center\">\n                                         \n                                                    <p>{this.props.match.params.message}</p>\n\n                                                </div>\n                                            </div>\n                                            <div className=\"form-group\">\n                                        \n                                                <div className=\"col-md-8\">\n                                                \n                                                    <div className=\"input-group\">\n                                                    <span className=\"input-group-addon Inp-icon\"><span className=\"fa fa-envelope\"></span></span>\n                                                        <input type=\"text\" id=\"emailId\" name=\"emailId\" className=\"form-control Inp-login\"></input>\n                                                    </div>\n                                                    <span className=\"help-block\"></span>\n\n                                                </div>\n                                            </div>\n\n                                            <div className=\"form-group\">\n\n                                                <div className=\"col-md-8\">\n                                               \n                                                    <div className=\"input-group Inp-pass\">\n                                                        <span className=\"input-group-addon Inp-icon\"><span className=\"fa fa-lock\"></span></span>\n                                                        <input type=\"password\" id=\"password\" name=\"password\" className=\"form-control Inp-login\"></input>\n                                                    </div>\n                                                    <span className=\"help-block\"></span>\n                                                </div>\n                                            </div>\n\n                                            {/* <div className=\"form-group\">\n\n                                                <div className=\"col-md-8\">\n                                                    <div className=\"Login-remember text-left\">\n                                                        <label className=\"check\">\n                                                            <input type=\"checkbox\" className=\"icheckbox\" checked=\"checked\" />Remember Me</label>\n                                                        <span className=\"help-block\"></span></div>\n                                                </div>\n                                            </div> */}\n\n                                            <div className=\"form-group\">\n\n                                                <div className=\"col-md-8\">\n                                                    <div className=\"Login-forgot text-left\">\n                                                        <Online><a href=\"\" onClick={this.forgotPassword}>Forgot Password?</a></Online>\n                                                        <div><h5>{this.state.message}</h5></div>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            <div className=\"form-group\">\n\n                                                <div className=\"col-md-8\">\n                                                    <div className=\"text-center Login-btnDiv\">\n                                                        <button type=\"button\" className=\" Login-btn\" onClick={this.loginClicked}><span>Login</span></button>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </form>\n\n                                    </div>\n\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n        )\n    }\n\n    loginClicked() {\n        var username = $(\"#emailId\").val();\n        var password = $(\"#password\").val();\n        if ($(\"#form1\").valid()) {\n            console.log(\"Going to perform login----\" + AuthenticationService.isUserLoggedIn());\n\n            if (navigator.onLine) {\n                // console.log(\"Inside Authentication not found\");\n                LoginService.authenticate(username, password)\n                    .then(response => {\n                        console.log(\"my response\");\n                        var decoded = jwt_decode(response.data.token);\n                        console.log(\"status code--\" + response.data.status);\n\n                        // console.log(new Date(decoded.iat*1000));\n                        // console.log(new Date(decoded.exp*1000));\n                        console.log(\"username---\", decoded);\n                        if (!AuthenticationService.checkIfDifferentUserIsLoggedIn(decoded.sub)) {\n                            localStorage.setItem('token', response.data.token);\n                            localStorage.setItem('typeOfSession', \"Online\");\n                            localStorage.setItem('userId', CryptoJS.AES.encrypt((decoded.userId).toString(), `${SECRET_KEY}`));\n                            localStorage.setItem('username', CryptoJS.AES.encrypt((decoded.sub).toString(), `${SECRET_KEY}`));\n                            localStorage.setItem('password', CryptoJS.AES.encrypt((decoded.user.password).toString(), `${SECRET_KEY}`));\n                            localStorage.setItem('languageId', CryptoJS.AES.encrypt((decoded.user.language.languageId).toString(), `${SECRET_KEY}`));\n\n                            // response.data.password = CryptoJS.AES.encrypt(JSON.stringify(password), 'my-secret-key@123').toString();\n\n                            AuthenticationService.setupAxiosInterceptors();\n\n                            this.props.history.push(`/welcome`)\n                        } else {\n                            localStorage.setItem('token', response.data.token);\n                            localStorage.setItem('typeOfSession', \"Online\");\n                            localStorage.setItem('userId', CryptoJS.AES.encrypt((decoded.userId).toString(), `${SECRET_KEY}`));\n                            localStorage.setItem('username', CryptoJS.AES.encrypt((decoded.sub).toString(), `${SECRET_KEY}`));\n                            localStorage.setItem('password', CryptoJS.AES.encrypt((decoded.user.password).toString(), `${SECRET_KEY}`));\n                            localStorage.setItem('languageId', CryptoJS.AES.encrypt((decoded.user.language.languageId).toString(), `${SECRET_KEY}`));\n\n                            // response.data.password = CryptoJS.AES.encrypt(JSON.stringify(password), 'my-secret-key@123').toString();\n\n                            AuthenticationService.setupAxiosInterceptors();\n\n                            this.props.history.push(`/welcome`)\n                        }\n                    })\n                    .catch(\n                        error => {\n                            // console.log(\"response in catch---\"+error.response);\n                            if (error.response != null && error.response.status === 401) {\n                                switch (error.response.data) {\n                                    case \"Password expired\":\n                                        this.setState({\n                                            message: error.response.data\n                                        })\n                                        this.props.history.push({\n                                            pathname: \"/updateExpiredPassword\",\n                                            state: { username: username }\n                                        });\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data\n                                        })\n                                        break\n                                }\n                            } else {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                }\n                            }\n                        }\n                    );\n            }\n            else {\n                if (AuthenticationService.isUserLoggedIn()) {\n                    var usernameBytes = CryptoJS.AES.decrypt(localStorage.getItem('username').toString(), `${SECRET_KEY}`);\n                    var decryptedUsername = usernameBytes.toString(CryptoJS.enc.Utf8);\n\n                    var passWordBytes = CryptoJS.AES.decrypt(localStorage.getItem('password').toString(), `${SECRET_KEY}`);\n                    var decryptedPassword = passWordBytes.toString(CryptoJS.enc.Utf8);\n\n                    if (username === decryptedUsername) {\n                        bcrypt.compare(password, decryptedPassword, function (err, res) {\n                            if (err) {\n                                console.log(\"error---\" + err);\n                            }\n                            if (res) {\n                                localStorage.setItem('typeOfSession', \"Offline\");\n                                console.log(\"Offline authentication\");\n                                this.props.history.push(`/welcome`)\n                            } else {\n                                this.setState({ message: 'Bad credentials' });\n                                console.log(\"Password do not match\");\n                            }\n                        }.bind(this));\n                    } else {\n                        this.setState({ message: 'Username does not match' });\n                        console.log(\"Username do not match\");\n                    }\n                    // bcrypt.compare(password, userOff.password, function (err, res) {\n                    //     if (err) {\n                    //         console.log(\"error---\" + err);\n                    //     }\n                    //     if (res && username == userOff.username) {\n                    //         userOff.sessionExpiresOn = moment(new Date(new Date().getTime() + 30 * 60000)).format('YYYY-MM-DD HH:mm');\n                    //         localStorage.setItem('user', JSON.stringify(userOff));\n                    //         this.props.history.push(`/welcome`)\n                    //     } else {\n                    //         this.setState({ message: 'Password do not match' });\n                    //         console.log(\"Password do not match\");\n                    //     }\n                    // }.bind(this));\n                } else {\n                    alert(\"You must be Online for a first time login.\")\n                }\n            }\n        }\n    }\n\n    forgotPassword() {\n        this.props.history.push(`/forgotPassword`)\n    }\n}\n\n","import React, { Component } from \"react\";\n\nclass WelcomeComponent extends Component {\n\n    constructor(props) {\n        super(props);\n       {/* this.listUserApproval=this.listUserApproval.bind(this);*/}\n    }\n\n    render() {\n        return (\n           /* <div className=\"page-content-wrap\">\n                <div className=\"col-md-12\">\n                <h1>Welcome!!</h1>\n                <p>{this.props.match.params.message}</p>\n                </div>\n               \n            </div>*/\n            <div className=\"page-content-wrap\">\n                <ul className=\"breadcrumb\">\n                   \n                </ul>\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"panel panel-default Box-shadow\">\n                        <div className=\"panel-heading\">\n                            <h3 className=\"panel-title\">Welcome</h3>\n                        </div>\n                        <div className=\"panel-body\">\n                            <p>{this.props.match.params.message}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n           \n        </div>\n        );\n    }\n\n   /*{ listUserApproval() {\n        this.props.history.push(`/listUserApproval`)\n    }*/\n}\n\nexport default WelcomeComponent","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\n\nclass UserService {\n    getLanguageList() {\n        return axios.get(`${API_URL}/api/getLanguageList`, {\n        });\n    }\n    getRoleList() {\n        return axios.get(`${API_URL}/api/getRoleList`, {\n        });\n    }\n    getBusinessFunctionList() {\n        return axios.get(`${API_URL}/api/getBusinessFunctionList`, {\n        });\n    }\n    getRealmList() {\n        return axios.get(`${API_URL}/api/getRealmList`, {\n        });\n    }\n    addNewUser(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`${API_URL}/api/addNewUser/`, json, {\n        });\n    }\n    addNewRole(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`${API_URL}/api/addNewRole/`, json, {\n        });\n    }\n\n    getUserList() {\n        return axios.get(`${API_URL}/api/getUserList`, {\n        });\n    }\n    getUserByUserId(userId) {\n        return axios.get(`${API_URL}/api/getUserByUserId/${userId}`, {\n        });\n    }\n    editUser(json) {\n        return axios.put(`${API_URL}/api/editUser/`, json, {\n        });\n    }\n\n    editRole(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`${API_URL}/api/editRole/`, json, {\n        });\n    }\n    unlockAccount(userId, emailId) {\n        return axios.put(`${API_URL}/api/unlockAccount/${userId}/${emailId}`, {\n        });\n    }\n    updateExpiredPassword(username, oldPassword, newPassword) {\n        console.log(\"api username---\"+username);\n        return axios.post(`${API_URL}/api/updateExpiredPassword/`, { username, oldPassword, newPassword }, {});\n    }\n\n    changePassword(username, oldPassword, newPassword) {\n        console.log(\"api username---\"+username);\n        return axios.post(`${API_URL}/api/changePassword/`, { username, oldPassword, newPassword }, {});\n    } \n    forgotPassword(username) {\n        return axios.get(`${API_URL}/api/forgotPassword/${username}`, {});\n    }\n}\n\nexport default new UserService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, BTN_SUBMIT, BTN_CANCEL, TITLE_ADD_USER, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class AddUserComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            languageId: AuthenticationService.getLanguageId(),\n            realms: [],\n            languages: [],\n            roles: []\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        console.log(\"check---\" + AuthenticationService.checkTypeOfSession());\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getRealmList()\n            .then(response => {\n                console.log(\"realm list---\", response.data);\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getLanguageList()\n            .then(response => {\n                this.setState({\n                    languages: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#userForm\").validate({\n            ignore: [],\n            rules: {\n                emailId: {\n                    required: true,\n                    email: true\n                },\n                phoneNumber: {\n                    required: true,\n                    number: true\n                },\n                languageId: {\n                    required: true\n                },\n                roles: {\n                    required: true\n                },\n                username: {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { realms } = this.state;\n        const { languages } = this.state;\n        const { roles } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.label_pr !== null && item.label.label_pr !== \"\" ? item.label.label_pr : item.label.label_en);\n                                case 3: return (item.label.label_fr !== null && item.label.label_fr !== \"\" ? item.label.label_fr : item.label.label_en);\n                                case 4: return (item.label.label_sp !== null && item.label.label_sp !== \"\" ? item.label.label_sp : item.label.label_en);\n                                default: return item.label.label_en;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n        let languagesList = languages.length > 0\n            && languages.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>\n                        {item.languageName}\n                    </option>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.label_pr !== null && item.label.label_pr !== \"\" ? item.label.label_pr : item.label.label_en);\n                                case 3: return (item.label.label_fr !== null && item.label.label_fr !== \"\" ? item.label.label_fr : item.label.label_en);\n                                case 4: return (item.label.label_sp !== null && item.label.label_sp !== \"\" ? item.label.label_sp : item.label.label_en);\n                                default: return item.label.label_en;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n        return (\n            <div className=\"addUser\">\n                <div className=\"page-content-wrap\">\n\n                    <div className=\"row\">\n                        <div className=\"\">\n                            <ul class=\"breadcrumb\"></ul>\n                        </div>\n\n                        <div className=\"col-md-8 col-md-offset-2\">\n                            <div className=\"login mt-2 block\">\n                                <div className=\"panel panel-default\">\n                                    <div className=\"panel-heading\">\n                                        <h3 className=\"panel-title\">Create new user</h3>\n                                    </div>\n                                    <div className=\"panel-body\">\n                                        <div className=\"col-md-8 col-md-offset-2\">\n                                            <div className=\"block\">\n\n                                                <form className=\"form-horizontal\" name=\"userForm\" id=\"userForm\">\n\n                                                    <div className=\"form-group\">\n                                                        <label className=\"req col-md-4  control-label\"> {REALM}</label>\n                                                        <div className=\"col-md-8\">\n                                                            <select className=\"form-control select\" id=\"realmId\" name=\"realmId\">\n                                                                <option value=\"\">-Nothing Selected-</option>\n                                                                {realmList}\n                                                            </select>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\">{USERNAME} :</label>\n                                                        <div className=\"col-md-8\">\n                                                            <input type=\"text\" id=\"username\" name=\"username\" className=\"form-control\"></input>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\">{EMAIL_ID} </label>\n                                                        <div className=\"col-md-8\">\n                                                            <input type=\"text\" id=\"emailId\" name=\"emailId\" className=\"form-control\"></input>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\">Phone no :</label>\n                                                        <div className=\"col-md-8\">\n                                                            <input type=\"text\" id=\"phoneNumber\" name=\"phoneNumber\" maxLength=\"15\" minLength=\"4\" className=\"form-control\"></input>\n                                                        </div>\n                                                    </div>\n\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\"> {ROLE}</label>\n                                                        <div className=\"col-md-8\">\n                                                            <select className=\"form-control select\" id=\"roles\" name=\"roles\" multiple={true}>\n                                                                <option value=\"\">-Nothing Selected-</option>\n                                                                {roleList}\n                                                            </select>\n                                                        </div>\n                                                    </div>\n\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\">{PREFERRED_LANGUAGE}</label>\n                                                        <div className=\"col-md-8\">\n                                                            <select className=\"form-control select\" id=\"languageId\" name=\"languageId\">\n                                                                <option value=\"\">-Nothing Selected-</option>\n                                                                {languagesList}\n                                                            </select>\n                                                        </div>\n                                                    </div>\n\n                                                </form>\n                                            </div>\n                                        </div>\n\n                                    </div>\n                                    <div className=\"panel-footer\">\n\n                                        <button className=\"btn btn-primary pull-right ml-1\" type=\"button\" onClick={this.cancelClicked}>{BTN_CANCEL}</button>\n                                        <button className=\"btn btn-success pull-right\" type=\"button\" onClick={this.submitClicked}>{BTN_SUBMIT}</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>\n                </div></div>\n        )\n    }\n    submitClicked() {\n        console.log($(\"#countryIds\").val())\n        if (navigator.onLine) {\n            console.log(\"check---\" + AuthenticationService.checkTypeOfSession());\n            if (AuthenticationService.checkTypeOfSession()) {\n                var json = {\n                    username: $(\"#username\").val(),\n                    emailId: $(\"#emailId\").val(),\n                    phoneNumber: $(\"#phoneNumber\").val(),\n                    realm: {\n                        realmId: $(\"#realmId\").val()\n                    },\n                    roleList: $(\"#roles\").val(),\n                    language: {\n                        languageId: $(\"#languageId\").val()\n                    },\n                    countryIds: $(\"#countryIds\").val()\n                }\n                if ($(\"#userForm\").valid()) {\n                    UserService.addNewUser(json)\n                        .then(response => {\n                            this.props.history.push(`/userList/${response.data.message}`)\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline or vice versa.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/userList/` + \"Action Canceled\")\n    }\n\n}\n\n","export const TITLE_ADD_USER = 'Create new user'\nexport const TITLE_USER_LIST = 'User List'\nexport const TITLE_EDIT_USER = 'Update user - '\nexport const TITLE_ADD_ROLE = 'ADD NEW ROLE'\nexport const TITLE_ROLE_LIST = 'ROLE LIST'\nexport const TITLE_EDIT_ROLE = 'UPDATE ROLE'\nexport const TITLE_ADD_REGION = 'ADD NEW REGION'\nexport const TITLE_REGION_LIST = 'REGION LIST'\nexport const TITLE_EDIT_REGION = 'UPDATE REGION'\n\nexport const USERNAME = 'Username'\nexport const EMAIL_ID = 'Email Id'\nexport const PHONE_NO = 'Phone No'\nexport const ADDRESS = 'Address'\nexport const COUNTRY = 'Country'\nexport const REALM = 'Realm'\nexport const STATE = 'State/Province'\nexport const CITY = 'City'\nexport const ROLE = 'Role'\nexport const ACTIVE = 'Status'\nexport const LAST_LOGIN_DATE = 'Last Login Date'\nexport const FAILED_ATTEMPTS = 'Failed Attempts'\nexport const PREFERRED_LANGUAGE = 'Preferred Language'\nexport const BTN_SUBMIT = 'Submit'\nexport const BTN_CANCEL = 'Cancel'\nexport const BTN_UPDATE = 'Update'\nexport const BTN_EDIT = 'Update'\nexport const BTN_FAILED_ATTEMPTS = 'Unlock account'\nexport const LANGUAGE_NAME = 'Language name'\nexport const HEALTH_AREA = 'Health Area'\nexport const ORGANISATION = 'Organisation'\nexport const REGION = 'Region'\nexport const ROLE_NAME = 'Role Name'\nexport const ROLE_NAME_ENG = 'Role Name[English]'\nexport const ROLE_NAME_SPA = 'Role Name[Spanish]'\nexport const ROLE_NAME_FRE = 'Role Name[French]'\nexport const ROLE_NAME_POR = 'Role Name[Portuguese]'\nexport const REGION_NAME_ENG = 'Region Name[English]'\nexport const ROLE_ID = 'Role Id'\nexport const BUSINESS_FUNCTION = 'Business Function'\nexport const CAN_CREATE_ROLE = 'Can Create Role'\nexport const BTN_DOWNLOAD='DOWNLOAD'\nexport const BTN_EXPORT='EXPORT'\nexport const EXPORT_TITLE='Export Program Data'\nexport const PROGRAM='Program'\nexport const NOTHING_SELECTED='-Nothing Selected-'\nexport const DOWNLOAD_TITLE='Download Program Data'\nexport const IMPORT_TITLE='Import Program Data'\nexport const BTN_IMPORT='Import'\nexport const DATA_DOWNLOAD_SUCCESS='Data downloaded successfully.'\nexport const DATA_EXPORT_SUCCESS='Data exported successfully.'\nexport const DATA_IMPORT_SUCCESS='DATA imported successfully'\nexport const IMPORT_PROGRAM='Select programs to import'\nexport const IS_ACTIVE = 'Active'\nexport const ADD_LANGUAGE = 'Add Language'\nexport const UPDATE_LANGUAGE = 'Update Language'\nexport const SUBMIT_BUTTON = 'Submit'\nexport const UPDATE_BUTTON = 'Update'\nexport const ADD_NEW_LANGUAGE_TITLE = 'Add New Language'\nexport const ADD_DATASOURCE_TYPE = 'Add Data Source Type'\nexport const DATASOURCE_TYPE_NAME_EN = 'Data source type name (English)'\nexport const DATASOURCE_TYPE_NAME_FR = 'Data source  type name (French)'\nexport const DATASOURCE_TYPE_NAME_SP = 'Data source type  name (Spanish)'\nexport const DATASOURCE_TYPE_NAME_PO = 'Data source type name (portuguese)'\nexport const DATA_SOURCE_TYPE_LIST = 'Data Source Type List'\nexport const DATA_SOURCE_TYPE_ACTIVE = 'Active'\nexport const UPDATE_DATA_SOURCE_TYPE = \"Update Data Source Type\"\nexport const ADD_NEW_DATA_SOURCE_TYPE = \"Add New Data Source Type\"\nexport const ADD_DATASOURCE = 'Add Data Source'\nexport const UPDATE_DATASOURCE = 'Update Data Source'\nexport const DATASOURCE_NAME_EN = 'Data source name (English)'\nexport const DATASOURCE_NAME_FR = 'Data source name (French)'\nexport const DATASOURCE_NAME_SP = 'Data source name (Spanish)'\nexport const DATASOURCE_NAME_PO = 'Data source name (portuguese)'\nexport const DATASOURCE_ACTIVE = 'Active'\nexport const DATA_SOURCE_LIST = 'Data Source  List'\nexport const SELECT_DATA_SOURCE_TYPE='Select Data Source Type'\nexport const ADD_NEW_DATA_SOURCE = \"Add New Data Source\"\n\nexport const ADD_CURRENCY = 'Add Currency'\nexport const UPDATE_CURRENCY = 'Update Currency'\nexport const CURRENCY_NAME_EN = 'Currency name (English)'\nexport const CURRENCY_NAME_FR = 'Currency name (French)'\nexport const CURRENCY_NAME_SP = 'Currency name (Spanish)'\nexport const CURRENCY_NAME_PO = 'Currency name (portuguese)'\nexport const CURRENCY_CODE = 'Currency code'\nexport const CURRENCY_SYMBOL = 'Currency symbol'\nexport const CONVERSIONRATE_TO_USD = 'Conversion rate to usd'\nexport const CURRENCY_LIST=\"Currency List\"\nexport const ADD_NEW_CURRENCY=\"Add New Currency\"\n\nexport const COUNTRY_NAME_EN = 'Country name (English)'\nexport const COUNTRY_NAME_FR = 'Country name (French)'\nexport const COUNTRY_NAME_SP = 'Country name (Spanish)'\nexport const COUNTRY_NAME_PO = 'Country name (portuguese)'\nexport const SELECT_LANGUAGE='Select language'\nexport const SELECT_CURRENCY='Select currency'\nexport const ADD_COUNTRY='Add Country'\nexport const ADD_NEW_COUNTRY='Add New Country'\nexport const COUNTRY_LIST='Country List'\nexport const COUNTRY_ACTIVE=\"Active\"\nexport const UPDATE_COUNTRY=\"Update Country\"\n\nexport const ADD_SHIPMENT_STATUS=\"Add Shipment Status\"\nexport const UPDATE_SHIPMENT_STATUS=\"Update Shipment Status\"\nexport const SHIPMENTSTATUS_NAME_EN = 'Shipment status name (English)'\nexport const SHIPMENTSTATUS_NAME_FR = 'Shipment status name (French)'\nexport const SHIPMENTSTATUS_NAME_SP = 'Shipment status name (Spanish)'\nexport const SHIPMENTSTATUS_NAME_PO = 'Shipment status name (portuguese)'\nexport const SHIPMENT_STATUS_LIST='Shipment Status List'\nexport const ADD_NEW_SHIPMENT_STATUS='Add New Shipment Status'\nexport const SELECT_NEXT_SHIPMENT_STATUS='Select next shipment status'\n\nexport const UNIT_TYPE_NAME_EN = 'Unit type name (English)'\nexport const UNIT_TYPE_NAME_FR = 'Unit type name (French)'\nexport const UNIT_TYPE_NAME_SP = 'Unit type name (Spanish)'\nexport const UNIT_TYPE_NAME_PO = 'Unit type name (portuguese)'\nexport const UNIT_TYPE_LIST = 'Unit Type List'\nexport const ADD_NEW_UNIT_TYPE = 'Add new unit type'\nexport const CREATED_DATE=\"Created date\"\nexport const LAST_MODIFIED_DATE=\"Last modified date\"\n\nexport const UPDATE_UNIT_TYPE = 'Update unit type'\n\n\n\n\n","import React, { Component } from 'react';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, TITLE_USER_LIST, TITLE_ADD_USER, ACTIVE, LAST_LOGIN_DATE, FAILED_ATTEMPTS, BTN_EDIT, BTN_FAILED_ATTEMPTS, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport moment from 'moment'\n\nexport default class UserListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userList: []\n        }\n        this.editUser = this.editUser.bind(this);\n        this.unlockAccount = this.unlockAccount.bind(this);\n        this.addNewUser = this.addNewUser.bind(this);\n    }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getUserList()\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    userList: response.data\n                })\n            })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n    render() {\n        return (\n            <div className=\"userList\">\n                <p>{this.props.match.params.message}</p>\n                <h1>{TITLE_USER_LIST}</h1>\n                <div className=\"container\">\n                    <button className=\"btn btn-add\" type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewUser}>{TITLE_ADD_USER}</button><br /><br />\n                    <div className=\"row\">\n                        <div className=\"col-md-12 scrollable\"></div>\n                        <table className=\"table table-responsive\" border=\"1\" align=\"center\">\n                            <thead>\n                                <tr>\n                                    <th>{REALM}</th>\n                                    <th>{USERNAME}</th>\n                                    <th>{EMAIL_ID}</th>\n                                    <th>{PHONE_NO}</th>\n                                    <th>{PREFERRED_LANGUAGE}</th>\n                                    <th>{LAST_LOGIN_DATE}</th>\n                                    <th>{FAILED_ATTEMPTS}</th>\n                                    <th>{ACTIVE}</th>\n                                    <th>{BTN_EDIT}</th>\n                                    <th>{BTN_FAILED_ATTEMPTS}</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    this.state.userList.map(\n                                        user =>\n                                            // <tr key={user.userId} onClick={() => this.editUser(user.userId)}>\n                                            <tr key={user.userId} onClick={() => this.editUser(user)}>\n                                                <td>\n                                                    {user.realm.label.label_en}\n                                                </td>\n                                                <td>{user.username}</td>\n                                                <td>{user.emailId}</td>\n                                                <td>{user.phoneNumber}</td>\n                                                <td>{user.language.languageName}</td>\n                                                <td>{user.lastLoginDate !== null && user.lastLoginDate !== \"\" ? moment(user.lastLoginDate).format('MM-DD-YYYY hh:mm A'):\"\"}</td>\n                                                <td>{user.faildAttempts}</td>\n                                                <td>{user.active.toString() === \"true\" ? \"Active\" : \"Disabled\"}\n                                                </td>\n                                                <td><button type=\"button\" onClick={() => this.editUser(user)}>{BTN_EDIT}</button></td>\n                                                <td><button type=\"button\" onClick={(e) => { e.stopPropagation(); this.unlockAccount(user.userId, user.emailId) }}>{BTN_FAILED_ATTEMPTS}</button></td>\n                                            </tr>\n                                    )\n                                }\n                            </tbody>\n                        </table></div>\n                </div>\n\n            </div>\n        )\n    }\n    editUser(user) {\n        console.log(\"edit user---\", user);\n        this.props.history.push({\n            pathname: \"/editUser\",\n            state: { user: user }\n        });\n    }\n    unlockAccount(userId, emailId) {\n        if (navigator.onLine) {\n            UserService.unlockAccount(userId, emailId)\n                .then(response => {\n                    this.props.history.push(`/userList/${response.data.message}`)\n                    window.location.reload();\n                })\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.response.data.message\n                                })\n                                break\n                        }\n                    }\n                );\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    addNewUser() {\n        if (navigator.onLine) {\n            this.props.history.push(`/addUser`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, ACTIVE, BTN_UPDATE, BTN_CANCEL, TITLE_EDIT_USER, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class EditUserComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            languageId: AuthenticationService.getLanguageId(),\n            realms: [],\n            languages: [],\n            roles: [],\n            user: this.props.location.state.user,\n            'user.active': true\n        }\n        this.updateClicked = this.updateClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n    }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        // this.setState({\n        //     user: this.props.location.state.user\n        // });\n        UserService.getRealmList()\n            .then(response => {\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getLanguageList()\n            .then(response => {\n                this.setState({\n                    languages: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#userForm\").validate({\n            ignore: [],\n            rules: {\n                'user.emailId': {\n                    required: true,\n                    email: true\n                },\n                'user.phoneNumber': {\n                    required: true,\n                    number: true\n                },\n                'user.username': {\n                    required: true\n                },\n                'user.language.languageId': {\n                    required: true\n                },\n                'user.roleList': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    dataChange(event) {\n        let { user } = this.state\n        if (event.target.name === \"user.realm.realmId\") {\n            user.realm.realmId = event.target.value\n        }\n        else if (event.target.name === \"user.realm.realmId\") {\n            user.realm.realmId = event.target.value\n        }\n        else if (event.target.name === \"user.roleList\") {\n            user.roleList = Array.from(event.target.selectedOptions, (item) => item.value)\n        }\n        else if (event.target.name === \"user.language.languageId\") {\n            user.language.languageId = event.target.value\n        }\n        else if (event.target.name === \"user.emailId\") {\n            user.emailId = event.target.value\n        }\n        else if (event.target.name === \"user.username\") {\n            user.username = event.target.value\n        }\n        else if (event.target.name === \"user.phoneNumber\") {\n            user.phoneNumber = event.target.value\n        }\n        else if (event.target.name === \"user.active\") {\n            user.active = event.target.id === \"user.active2\" ? false : true\n        }\n\n        this.setState({\n            user\n        }, (\n        ) => {\n            // console.log(\"state after update---\",this.state.user)\n        })\n    }\n\n    render() {\n        const { realms } = this.state;\n        const { languages } = this.state;\n        const { roles } = this.state;\n        const { user } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.label_pr !== null && item.label.label_pr !== \"\" ? item.label.label_pr : item.label.label_en);\n                                case 3: return (item.label.label_fr !== null && item.label.label_fr !== \"\" ? item.label.label_fr : item.label.label_en);\n                                case 4: return (item.label.label_sp !== null && item.label.label_sp !== \"\" ? item.label.label_sp : item.label.label_en);\n                                default: return item.label.label_en;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n        let languagesList = languages.length > 0\n            && languages.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>\n                        {item.languageName}\n                    </option>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.label_pr !== null && item.label.label_pr !== \"\" ? item.label.label_pr : item.label.label_en);\n                                case 3: return (item.label.label_fr !== null && item.label.label_fr !== \"\" ? item.label.label_fr : item.label.label_en);\n                                case 4: return (item.label.label_sp !== null && item.label.label_sp !== \"\" ? item.label.label_sp : item.label.label_en);\n                                default: return item.label.label_en;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n        return (\n            <>\n                <div className=\"page-content-wrap\">\n\n                    <div className=\"row\">\n                        <div className=\"\">\n                            <ul class=\"breadcrumb\"></ul>\n                        </div>\n\n                        <div className=\"col-md-8 col-md-offset-2\">\n                            <div className=\"login mt-2 block\">\n                                <div className=\"panel panel-default\">\n                                    <div className=\"panel-heading\">\n                                        <h3 className=\"panel-title\">{TITLE_EDIT_USER}{this.state.user.userId}</h3>\n                                    </div>\n                                    <div className=\"panel-body\">\n                                        <div className=\"col-md-8 col-md-offset-2\">\n                                            <div className=\"block\">\n\n                                                <form className=\"form-horizontal\" name=\"userForm\" id=\"userForm\">\n\n                                                    <div className=\"form-group\">\n                                                        <label className=\"req col-md-4  control-label\"> {REALM}</label>\n                                                        <div className=\"col-md-8\">\n                                                            <select id=\"user.realm.realmId\" name=\"user.realm.realmId\" value={this.state.user.realm ? this.state.user.realm.realmId : ''} onChange={this.dataChange} className=\"form-control\">\n                                                                <option value=\"\">-Nothing Selected-</option>\n                                                                {realmList}\n                                                            </select>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\">{USERNAME} :</label>\n                                                        <div className=\"col-md-8\">\n                                                            <input type=\"text\" id=\"user.username\" name=\"user.username\" value={this.state.user.username} onChange={this.dataChange} className=\"form-control\" />\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\">{EMAIL_ID} </label>\n                                                        <div className=\"col-md-8\">\n                                                            <input type=\"text\" id=\"user.emailId\" name=\"user.emailId\" value={this.state.user.emailId} onChange={this.dataChange} className=\"form-control\" />\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\">{PHONE_NO}</label>\n                                                        <div className=\"col-md-8\">\n                                                            <input type=\"text\" id=\"user.phoneNumber\" name=\"user.phoneNumber\" value={this.state.user.phoneNumber} onChange={this.dataChange} maxLength=\"15\" minLength=\"4\" className=\"form-control\" />\n                                                        </div>\n                                                    </div>\n\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\"> {ROLE}</label>\n                                                        <div className=\"col-md-8\">\n                                                            <select id=\"user.roleList\" name=\"user.roleList\" value={this.state.user.roleList} onChange={this.dataChange} className=\"form-control\" multiple={true}>\n                                                                <option value=\"\">-Nothing Selected-</option>\n                                                                {roleList}\n                                                            </select>\n                                                        </div>\n                                                    </div>\n\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\">{PREFERRED_LANGUAGE}</label>\n                                                        <div className=\"col-md-8\">\n                                                            <select id=\"user.language.languageId\" name=\"user.language.languageId\" value={this.state.user.language ? this.state.user.language.languageId : ''} onChange={this.dataChange} className=\"form-control\">\n                                                                <option value=\"\">-Nothing Selected-</option>\n                                                                {languagesList}\n                                                            </select>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\">{ACTIVE}</label>\n                                                        <div className=\"col-md-8\">\n                                                            <input type=\"radio\" id=\"user.active1\" name=\"user.active\" value={true} checked={this.state.user.active === true} onChange={this.dataChange} /> Active\n                                                            <input type=\"radio\" id=\"user.active2\" name=\"user.active\" value={false} checked={this.state.user.active === false} onChange={this.dataChange} /> Disabled\n                                                        </div>\n                                                    </div>\n\n                                                </form>\n                                            </div>\n                                        </div>\n\n                                    </div>\n                                    <div className=\"panel-footer\">\n\n                                        <button className=\"btn btn-primary pull-right ml-1\" type=\"button\" onClick={this.cancelClicked}>{BTN_CANCEL}</button>\n                                        <button className=\"btn btn-success pull-right\" type=\"button\" onClick={this.updateClicked}>{BTN_UPDATE}</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n            </>\n        )\n    }\n    updateClicked() {\n        if (navigator.onLine) {\n            if (AuthenticationService.checkTypeOfSession()) {\n                var json = this.state.user;\n                if ($(\"#userForm\").valid()) {\n                    UserService.editUser(json)\n                        .then(response => {\n                            this.props.history.push(`/userList/${response.data.message}`)\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline or vice versa.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/userList/` + \"Action Canceled\")\n    }\n}\n\n","import React, { Component } from 'react';\n\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from '../../api/UserService'\nimport CryptoJS from 'crypto-js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\nimport { SECRET_KEY } from '../../Constants.js'\n\n\nexport default class ChangePasswordComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        $.validator.addMethod('checkPassword', function () {\n            if ($('#newPassword').val() === $('#confirmNewPassword').val()) {\n                return true;\n            } else {\n                return false;\n            }\n        }, 'The new password does not match.');\n\n        $.validator.addMethod('checkOldPassword', function () {\n            if ($('#newPassword').val() === $('#oldPassword').val()) {\n                console.log(\"same\");\n                return false;\n            } else {\n                console.log(\"different\");\n                return true;\n            }\n        }, \"The new password can't be same as old password.\");\n\n        // $.validator.addMethod('checkOldPassword', function () {\n        //     let userOff = JSON.parse(localStorage.getItem('user'));\n        //     let val;\n        //     console.log(\"password---\"+$('#oldPassword').val())\n        //     bcrypt.compare($('#oldPassword').val(), userOff.password, function (err, res) {\n        //         console.log(\"res---\"+res);\n        //             val = res; \n        //     });\n        //     if (val === true) {\n        //         return true;\n        //     } \n        //     if(val === false) {\n        //         return false;\n        //     }\n        //     // return val;\n        // }, 'Old password is incorrect.');\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                oldPassword: {\n                    required: true\n                },\n                newPassword: {\n                    required: true,\n                    checkOldPassword:true\n                },\n                confirmNewPassword: {\n                    required: true,\n                    checkPassword: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n            \n            \n            <div className=\"page-content-wrap\">\n                \n            <div className=\"row\">\n                <div className=\"\"><ul class=\"breadcrumb\">\n                   \n                </ul></div>\n\n                <div className=\"col-md-8 col-md-offset-2\">\n            <div className=\"login mt-2\">\n            <div className=\"panel panel-default Box-shadow\">\n            <div className=\"panel-heading\">\n                        \t\t<h3 className=\"panel-title\">Update Password</h3>\n            </div>\n            <div className=\"panel-body\">\n            <div className=\"col-md-8 col-md-offset-2\">    \n            <div className=\"block\">\n                              \n                                <form className=\"form-horizontal\" name=\"form1\" id=\"form1\">                                    \n                                    <div className=\"form-group\">\n                                        <label className=\"col-md-4 control-label\">Old Password :</label>\n                                        <div className=\"col-md-8\">\n                                            <input type=\"password\" id=\"oldPassword\" name=\"oldPassword\"  className=\"form-control\" ></input>\n                                        </div>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label className=\"col-md-4 control-label\">New Password :</label>\n                                        <div className=\"col-md-8\">\n                                            <input type=\"password\" id=\"newPassword\" name=\"newPassword\"  type=\"password\" className=\"form-control\" value=\"\"></input>\n                                        </div>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label className=\"col-md-4 control-label\">Confirm Password :</label>\n                                        <div className=\"col-md-8\">\n                                            <input type=\"password\" id=\"confirmNewPassword\" name=\"confirmNewPassword\"  type=\"password\" className=\"form-control\" value=\"\"></input>\n                                        </div>\n                                    </div>\n                                                                       \n                                    \n                    <div><h5>{this.state.message}</h5></div>                             \n                                </form>\n                            </div>\n                           </div> \n\n        \n\n                </div>\n                <div className=\"panel-footer\">\n                                        \n                <Online><button  type=\"button\" onClick={this.cancelClicked} className=\"btn btn-primary pull-right ml-1\">cancel</button></Online>\n                <Online>  <button  type=\"button\" onClick={this.submitClicked}  className=\"btn btn-success pull-right\">Submit</button></Online>\n                                    \n                                </div>\n                </div>\n            </div>\n            </div>\n            </div>\n            </div>\n        )\n    }\n\n    submitClicked() {\n        if ($(\"#form1\").valid()) {\n            if (navigator.onLine) {\n                UserService.changePassword(AuthenticationService.getLoggedInUsername(),$('#oldPassword').val(),$('#newPassword').val())\n                    .then(response => {\n                        console.log(response.statusText)\n                        localStorage.setItem('password', CryptoJS.AES.encrypt((response.data.data).toString(), `${SECRET_KEY}`));\n                        this.props.history.push(`/welcome/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            console.log(error.message);\n                            console.log(error.text);\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            } else {\n                alert(\"You must be Online to update the password.\")\n            }\n        }\n    }\n\n    cancelClicked() {\n        this.props.history.push(`/welcome/Action canceled.`)\n    }\n}\n\n","import React, { Component } from 'react';\nimport UserService from \"../../api/UserService.js\";\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as labels from '../../Labels.js'\n\n\nexport default class RoleListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            roles: [],\n            message: \"\"\n        }\n        this.editRole = this.editRole.bind(this);\n        this.addNewRole = this.addNewRole.bind(this);\n    }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getRoleList()\n            .then(response => {\n                console.log(\"rol list---\" + response.data);\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    render() {\n        return (\n            <div className=\"roleList\">\n                <p>{this.props.match.params.message}</p>\n                <h3>{this.state.message}</h3>\n                <div>{labels.TITLE_ROLE_LIST}</div>\n                <button className=\"btn btn-add\" type=\"button\" style={{ marginLeft: '-736px' }} onClick={this.addNewRole}>{labels.TITLE_ADD_ROLE}</button><br /><br />\n                <table border=\"1\" align=\"center\">\n                    <thead>\n                        <tr>\n                            <th>{labels.ROLE_ID}</th>\n                            <th>{labels.ROLE_NAME_ENG}</th>\n                            <th>{labels.ROLE_NAME_POR}</th>\n                            <th>{labels.ROLE_NAME_FRE}</th>\n                            <th>{labels.ROLE_NAME_SPA}</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.roles.map(role =>\n                                <tr key={role.roleId} onClick={() => this.editRole(role)}>\n                                    <td>{role.roleId}</td>\n                                    <td>{role.label.engLabel}</td>\n                                    <td>{role.label.porLabel}</td>\n                                    <td>{role.label.freLabel}</td>\n                                    <td>{role.label.spaLabel}</td>\n                                </tr>)\n                        }\n                    </tbody>\n                </table>\n                <br />\n            </div>\n        );\n    }\n    editRole(role) {\n        this.props.history.push({\n            pathname: \"/editRole\",\n            state: { role: role }\n        });\n    }\n    addNewRole() {\n        if (navigator.onLine) {\n            this.props.history.push(`/addRole`);\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n\n}","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport * as labels from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport '../../css/bootstrap/bootstrap.min.css';\nimport '../../App.css'\n\n\nexport default class AddRoleComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            businessFunctions: [],\n            roles: [],\n            message: '',\n            languageId: AuthenticationService.getLanguageId(),\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        // this.dataChange = this.dataChange.bind(this);\n        // this.handleChange = this.handleChange.bind(this);\n    }\n\n    // dataChange(event) {\n    //     let { role } = this.state\n    //     // console.log(\"business function---\", event.target.value);\n    //     console.log(\"name---------------\" + event.target.name);\n    //     switch (event.target.name) {\n    //         case \"role.label.label_en\": role.label.label_en = event.target.value;\n    //         case \"role.label.label_pr\": role.label.label_pr = event.target.value;\n    //         case \"role.label.label_fr\": role.label.label_fr = event.target.value;\n    //         case \"role.label.label_sp\": role.label.label_sp = event.target.value;\n    //         case \"role.businessFunctions\": role.businessFunctions = Array.from(event.target.selectedOptions, (item) => item.value);\n    //         case \"role.canCreateRole\": role.canCreateRole = event.target.value;\n    //         default: [event.target.name] = event.target.value;\n    //     }\n\n    //     this.setState({\n    //         role\n    //     }, (\n    //     ) => {\n    //         console.log(\"state after update---\", this.state.role)\n    //     })\n    // }\n\n    // handleChange(event) {\n    //     this.setState({\n    //         role: {\n    //             label: {\n    //                 label_en: ''\n    //             },\n    //             businessFunctions: Array.from(event.target.selectedOptions, (item) => item.value)\n    //         }\n    //     }, (\n    //     ) => {\n    //         console.log(\"state after update---\", this.state.role)\n    //     });\n    // }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getBusinessFunctionList()\n            .then(response => {\n                console.log(\"business functions---\", response.data);\n                this.setState({\n                    businessFunctions: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                console.log(\"role list---\", response.data);\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n\n\n        $(\"#roleForm\").validate({\n            ignore: [],\n            rules: {\n                'role.label.label_en': {\n                    required: true,\n                    // lettersonly: true,\n                    maxlength: 255\n\n                },\n                'role.label.label_pr': {\n                    // lettersonly: true,\n                    maxlength: 255\n                },\n                'role.label.label_fr': {\n                    // lettersonly: true,\n                    maxlength: 255\n                },\n                'role.label.label_sp': {\n                    // lettersonly: true,\n                    maxlength: 255\n                },\n                'role.businessFunctions': {\n                    required: true\n                },\n                'role.canCreateRole': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { businessFunctions } = this.state;\n        const { roles } = this.state;\n\n        let businessFunctionsList = businessFunctions.length > 0\n            && businessFunctions.map((item, i) => {\n                return (\n                    <>\n                        <option key={i} value={item.businessFunctionId}>\n                            {(() => {\n                                switch (this.state.languageId) {\n                                    case 2: return (item.label.label_pr != null && item.label.label_pr != \"\" ? item.label.label_pr : item.label.label_en);\n                                    case 3: return (item.label.label_fr != null && item.label.label_fr != \"\" ? item.label.label_fr : item.label.label_en);\n                                    case 4: return (item.label.label_sp != null && item.label.label_sp != \"\" ? item.label.label_sp : item.label.label_en);\n                                    default: return item.label.label_en;\n                                }\n                            })()}\n                        </option>\n                    </>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.label_pr != null && item.label.label_pr != \"\" ? item.label.label_pr : item.label.label_en);\n                                case 3: return (item.label.label_fr != null && item.label.label_fr != \"\" ? item.label.label_fr : item.label.label_en);\n                                case 4: return (item.label.label_sp != null && item.label.label_sp != \"\" ? item.label.label_sp : item.label.label_en);\n                                default: return item.label.label_en;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n        return (\n            <div class=\"page-container page-navigation-toggled page-container-wide\">\n                <div class=\"page-content\">\n                    <ul class=\"breadcrumb\">\n                        <li><a href=\"#\">Home</a></li>\n                        <li><a href=\"#\">Admin</a></li>\n                        <li><a href=\"#\">Role</a></li>\n                        <li><a href=\"#\">Add Role</a></li>\n                    </ul>\n                    <div class=\"page-content-wrap\">\n                        <div><h5>{this.state.message}</h5></div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n\n                                <form name=\"roleForm\" id=\"roleForm\" class=\"form-horizontal\">\n                                    <div class=\"panel panel-default\">\n                                        <div class=\"panel-heading\">\n                                            <h3 class=\"panel-title\">{labels.TITLE_ADD_ROLE}</h3>\n                                        </div>\n                                        <div class=\"panel-body\">\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_ENG}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.label_en\" class=\"form-control\" name=\"role.label.label_en\" />\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_POR}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.label_pr\" name=\"role.label.label_pr\" class=\"form-control\" />\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_FRE}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.label_fr\" name=\"role.label.label_fr\" class=\"form-control\" />\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_SPA}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.label_sp\" name=\"role.label.label_sp\" class=\"form-control\" />\n\n                                                </div>\n                                            </div>\n\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.BUSINESS_FUNCTION}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"role.businessFunctions\" class=\"form-control select\" data-live-search=\"true\" data-actions-box=\"true\" name=\"role.businessFunctions\" multiple={true}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {businessFunctionsList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.CAN_CREATE_ROLE}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"role.canCreateRole\" className=\"form-control select\" data-live-search=\"true\" data-actions-box=\"true\" name=\"role.canCreateRole\" multiple={true} onChange={this.dataChange}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {roleList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n                                            <button type=\"button\" className=\"btn btn-success\" onClick={this.submitClicked}>{labels.BTN_SUBMIT}</button>\n                                            <button type=\"button\" className=\"btn btn-danger\" onClick={this.cancelClicked}>{labels.BTN_CANCEL}</button><br></br><br></br>\n\n                                        </div>\n                                        <div class=\"panel-footer\">\n                                            <div class=\"pull-right\">\n\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    submitClicked() {\n        console.log($(\"#role\\\\.businessFunctions\").val())\n        if (navigator.onLine) {\n            if (AuthenticationService.checkTypeOfSession()) {\n                if ($(\"#roleForm\").valid()) {\n                    var json = {\n                        label: {\n                            label_en: $(\"#role\\\\.label\\\\.label_en\").val(),\n                            label_pr: $(\"#role\\\\.label\\\\.label_pr\").val(),\n                            label_fr: $(\"#role\\\\.label\\\\.label_fr\").val(),\n                            label_sp: $(\"#role\\\\.label\\\\.label_sp\").val()\n                        },\n                        businessFunctions: $(\"#role\\\\.businessFunctions\").val(),\n                        canCreateRole: $(\"#role\\\\.canCreateRole\").val()\n                    }\n                    UserService.addNewRole(json)\n                        .then(response => {\n                            this.props.history.push(`/roleList/${response.data.message}`)\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline or vice versa.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/roleList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport * as labels from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport '../../css/bootstrap/bootstrap.min.css';\nimport '../../App.css'\n\n\nexport default class AddRoleComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            businessFunctions: [],\n            roles: [],\n            message: '',\n            languageId: AuthenticationService.getLanguageId(),\n            role: this.props.location.state.role\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n        // this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        // this.setState({\n        //     role: this.props.location.state.role\n        // });\n        UserService.getBusinessFunctionList()\n            .then(response => {\n                console.log(\"business functions---\", response.data);\n                this.setState({\n                    businessFunctions: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                console.log(\"role list---\", response.data);\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n\n\n        $(\"#roleForm\").validate({\n            ignore: [],\n            rules: {\n                'role.label.engLabel': {\n                    required: true,\n                    // lettersonly: true,\n                    maxlength: 255\n\n                },\n                'role.label.porLabel': {\n                    // lettersonly: true,\n                    maxlength: 255\n                },\n                'role.label.freLabel': {\n                    // lettersonly: true,\n                    maxlength: 255\n                },\n                'role.label.spaLabel': {\n                    // lettersonly: true,\n                    maxlength: 255\n                },\n                'role.businessFunctions': {\n                    required: true\n                },\n                'role.canCreateRole': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    dataChange(event) {\n        let { role } = this.state\n        console.log(\"name---------------\" + event.target.name);\n        if (event.target.name === \"role.label.engLabel\") {\n            role.label.engLabel = event.target.value\n        } else if (event.target.name === \"role.label.porLabel\") {\n            role.label.porLabel = event.target.value\n        }\n        else if (event.target.name === \"role.label.freLabel\") {\n            role.label.freLabel = event.target.value\n        }\n        else if (event.target.name === \"role.label.spaLabel\") {\n            role.label.spaLabel = event.target.value\n        }\n        else if (event.target.name === \"role.businessFunctions\") {\n            role.businessFunctions = Array.from(event.target.selectedOptions, (item) => item.value)\n        }\n\n        else if (event.target.name === \"role.canCreateRole\") {\n            role.canCreateRole = Array.from(event.target.selectedOptions, (item) => item.value)\n        }\n        // switch (event.target.name) {\n        //     case \"role.label.engLabel\": role.label.engLabel = event.target.value;\n        //     case \"role.label.porLabel\": role.label.porLabel = event.target.value;\n        //     case \"role.label.freLabel\": role.label.freLabel = event.target.value;\n        //     case \"role.label.spaLabel\": role.label.spaLabel = event.target.value;\n        //     // case \"role.businessFunctions\": role.businessFunctions = Array.from(event.target.selectedOptions, (item) => item.value);\n        //     // case \"role.canCreateRole\": role.canCreateRole = event.target.value;\n        //     // default: [event.target.name] = event.target.value;\n        // }\n\n        this.setState({\n            role\n        }, (\n        ) => {\n            console.log(\"state after update---\", this.state.role)\n        })\n    }\n\n\n    render() {\n        const { businessFunctions } = this.state;\n        const { roles } = this.state;\n\n        let businessFunctionsList = businessFunctions.length > 0\n            && businessFunctions.map((item, i) => {\n                return (\n                    <>\n                        <option key={i} value={item.businessFunctionId}>\n                            {(() => {\n                                switch (this.state.languageId) {\n                                    case 2: return (item.label.porLabel != null && item.label.porLabel != \"\" ? item.label.porLabel : item.label.engLabel);\n                                    case 3: return (item.label.freLabel != null && item.label.freLabel != \"\" ? item.label.freLabel : item.label.engLabel);\n                                    case 4: return (item.label.spaLabel != null && item.label.spaLabel != \"\" ? item.label.spaLabel : item.label.engLabel);\n                                    default: return item.label.engLabel;\n                                }\n                            })()}\n                        </option>\n                    </>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.porLabel != null && item.label.porLabel != \"\" ? item.label.porLabel : item.label.engLabel);\n                                case 3: return (item.label.freLabel != null && item.label.freLabel != \"\" ? item.label.freLabel : item.label.engLabel);\n                                case 4: return (item.label.spaLabel != null && item.label.spaLabel != \"\" ? item.label.spaLabel : item.label.engLabel);\n                                default: return item.label.engLabel;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n        return (\n            <div class=\"page-container page-navigation-toggled page-container-wide\">\n                <div class=\"page-content\">\n                    <ul class=\"breadcrumb\">\n                        <li><a href=\"#\">Home</a></li>\n                        <li><a href=\"#\">Admin</a></li>\n                        <li><a href=\"#\">Role</a></li>\n                        <li><a href=\"#\">Edit Role</a></li>\n                    </ul>\n                    <div class=\"page-content-wrap\">\n                        <div><h5>{this.state.message}</h5></div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n\n                                <form name=\"roleForm\" id=\"roleForm\" class=\"form-horizontal\">\n                                    <div class=\"panel panel-default\">\n                                        <div class=\"panel-heading\">\n                                            <h3 class=\"panel-title\">{labels.TITLE_EDIT_ROLE}</h3>\n                                        </div>\n                                        <div class=\"panel-body\">\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_ENG}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.engLabel\" class=\"form-control\" name=\"role.label.engLabel\" value={this.state.role.label.engLabel} onChange={this.dataChange} readOnly={true} />\n                                                    \n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_POR}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.porLabel\" name=\"role.label.porLabel\" class=\"form-control\" value={this.state.role.label.porLabel} onChange={this.dataChange} readOnly={true} />\n                                                    \n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_FRE}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.freLabel\" name=\"role.label.freLabel\" class=\"form-control\" value={this.state.role.label.freLabel} onChange={this.dataChange} readOnly={true} />\n                                                    \n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_SPA}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.spaLabel\" name=\"role.label.spaLabel\" class=\"form-control\" value={this.state.role.label.spaLabel} onChange={this.dataChange} readOnly={true} />\n                                                    \n                                                </div>\n                                            </div>\n\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.BUSINESS_FUNCTION}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"role.businessFunctions\" class=\"form-control select\" data-live-search=\"true\" data-actions-box=\"true\" name=\"role.businessFunctions\" multiple={true} value={this.state.role.businessFunctions} onChange={this.dataChange} placeholder=\"Please select business function\">\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {businessFunctionsList}\n                                                    </select>\n                                                    \n                                                </div>\n                                            </div>\n\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.CAN_CREATE_ROLE}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"role.canCreateRole\" className=\"form-control select\" data-live-search=\"true\" data-actions-box=\"true\" name=\"role.canCreateRole\" multiple={true} value={this.state.role.canCreateRole} onChange={this.dataChange}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {roleList}\n                                                    </select>\n                                                    \n                                                </div>\n                                            </div>\n                                            <button type=\"button\" className=\"btn btn-success\" onClick={this.submitClicked}>{labels.BTN_UPDATE}</button>\n                                            <button type=\"button\" className=\"btn btn-danger\" onClick={this.cancelClicked}>{labels.BTN_CANCEL}</button><br></br><br></br>\n\n                                        </div>\n                                        <div class=\"panel-footer\">\n                                            <div class=\"pull-right\">\n\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    submitClicked() {\n        console.log($(\"#role\\\\.businessFunctions\").val())\n        if (navigator.onLine) {\n            if (AuthenticationService.checkTypeOfSession()) {\n                if ($(\"#roleForm\").valid()) {\n\n                    UserService.editRole(this.state.role)\n                        .then(response => {\n                            this.props.history.push(`/roleList/${response.data.message}`)\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline or vice versa.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/roleList/` + \"Action Canceled\")\n    }\n\n}\n\n","import axios from \"axios\";\nimport {API_URL} from '../Constants.js'\nclass LanguageService{\n\naddLanguage(json){\n    return axios.put(`${API_URL}/api/addLanguage/`, json, {\n    });\n}\n\ngetLanguageList() {\n    return axios.get(`${API_URL}/api/getLanguageListAll/`, {\n    });\n}\ngetLanguageListActive() {\n    return axios.get(`${API_URL}/api/getLanguageList/`, {\n    });\n}\neditLanguage(json) {\n    return axios.put(`${API_URL}/api/editLanguage/`, json, {\n    });\n}\n\n}\n\nexport default new LanguageService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport * as myConst from '../../Labels.js';\nimport LanguageService from '../../api/LanguageService.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nclass AddLanguageComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            languageName: '',\n            message: ''\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n    }\n    updateFieldData(event) {\n        this.setState(\n            {\n                [event.target.name]: event.target.value\n            }\n        )\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        $(\"#languageForm\").validate({\n            ignore: [],\n            rules: {\n                languageName: {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 100\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    submitForm(event) {\n        if (navigator.onLine) {\n            if ($(\"#languageForm\").valid()) {\n                LanguageService.addLanguage(this.state).then(response => {\n                    this.props.history.push(`/languageList/${response.data.message}`)\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n        } else {\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\n    render() {\n        return (\n<>\n            \n                {/* <h3>{myConst.ADD_LANGUAGE}</h3>\n                <div><h5>{this.state.message}</h5></div>\n                <form name=\"languageForm\" id=\"languageForm\">\n                    <div>\n                        <label>{myConst.LANGUAGE_NAME}:-</label>\n                        <input type=\"text\" name=\"languageName\" value={this.Capitalize(this.state.languageName)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button> */}\n\n            <div className=\"page-content-wrap\">\n                <div className=\"row\">\n\n                <div className=\"\">\n                    <ul class=\"breadcrumb\">\n\n                    </ul>\n                </div>\n                <div className=\"col-md-6 col-md-offset-3\">\n\n            <div className=\"login mt-2\">\n                <div className=\"panel panel-default Box-shadow\">\n                    <div className=\"panel-heading\">\n                        <h3 className=\"panel-title\">Add Language</h3>\n\n                    </div>\n                     <div className=\"panel-body\">\n                    <div className=\"col-md-8 col-md-offset-2\">\n                            <div className=\"block\">\n                                  <form className=\"form-horizontal\"name=\"languageForm\" id=\"languageForm\">\n                                    <div className=\"form-group\">\n                                        <label className=\"col-md-4 control-label\">{myConst.LANGUAGE_NAME}:-</label>\n                                        <div className=\"col-md-8\">\n                                            <input type=\"text\" name=\"languageName\" value={this.state.languageName} onChange={this.updateFieldData} className=\"form-control\"></input>\n                                        </div>\n                                    </div>\n                               </form>     \n\n                 {/* <h3>{myConst.ADD_LANGUAGE}</h3> */}\n              \n            </div>\n            </div>\n            </div>\n            \n            <div className=\"panel-footer\">\n                     <button onClick={this.submitForm} type=\"button\" className=\"btn btn-success pull-right\">{myConst.SUBMIT_BUTTON}n</button></div>\n                </div>\n                </div>\n               \n                </div>\n            </div>\n        </div>\n        </>\n        );\n    }\n}\nexport default AddLanguageComponent;","import React, { Component } from 'react';\nimport LanguageService from '../../api/LanguageService.js'\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\n\nexport default class LanguageListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            langaugeList: []\n        }\n        this.editLanguage = this.editLanguage.bind(this);\n        this.addNewLanguage = this.addNewLanguage.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        LanguageService.getLanguageList()\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    langaugeList: response.data\n                })\n            })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n    }\n\n    editLanguage(language) {\n        this.props.history.push({\n            pathname: \"/editLanguage\",\n            state: { language: language }\n        });\n    }\n\n    addNewLanguage(){\n        if (navigator.onLine) {\n            this.props.history.push(`/addLanguage`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n    }\n\n    render() {\n        return (\n            <>\n            <p>{this.props.match.params.message}</p>\n            <div>\n             <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewLanguage}>{myConst.ADD_NEW_LANGUAGE_TITLE}</button><br /><br />\n            </div>  \n              <div className=\"langaugeList\">\n\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.LANGUAGE_NAME}</th>\n                                <th>{myConst.IS_ACTIVE}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.langaugeList.map(language =>\n\n                                    <tr key={language.languageId} onClick={() => this.editLanguage(language)}>\n                                        <td>{language.languageName}</td>\n                                        <td>{language.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}</td>\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </>\n        );\n    }\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport LanguageService from '../../api/LanguageService.js'\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\n\nexport default class EditLanguageComponent extends Component {\n\n    constructor(props) {\n\n        super(props);\n        this.state = { language: {languageName:''}, message:'' }\n\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n       \n    }\n    componentDidMount() {\n       AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            language: this.props.location.state.language\n        });\n        console.log(this.state);\n        $(\"#updateLanguageForm\").validate({\n            ignore: [],\n            rules: {\n                'language.languageName': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 100\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    updateFieldData(event) {\n\n        let { language } = this.state\n\n        if (event.target.name === \"language.languageName\") {\n            console.log(\"inside if\")\n            language.languageName = event.target.value\n        } else if (event.target.name === \"language.active\") {\n            language.active = event.target.id === \"language.active2\" ? false : true\n        }\n\n        this.setState(\n            {\n                language\n            }\n        );\n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    updateForm() {\n        if (navigator.onLine) {\n            if ($(\"#updateLanguageForm\").valid()) {\n\n                LanguageService.editLanguage(this.state.language).then(response => {\n                    this.props.history.push(`/languageList/${response.data.message}`)\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.response.data\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n\n            }\n        } else { alert(\"To perform this action you must be online.\"); }\n    }\n\n    render() {\n\n        return (\n            <>\n                <h3>{myConst.UPDATE_LANGUAGE}</h3>\n                <form name=\"updatyeLanguageForm\" id=\"updateLanguageForm\">\n                    <div>\n                        <label>{myConst.LANGUAGE_NAME}:-</label>\n                        <input type=\"text\" name=\"language.languageName\" value={this.Capitalize(this.state.language.languageName)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <div>\n                            {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"language.active1\" name=\"language.active\" value={true} checked={this.state.language.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"language.active2\" name=\"language.active\" value={false} checked={this.state.language.active === false} onChange={this.updateFieldData} /> Disabled\n        </div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n\n        );\n    }\n}","import axios from \"axios\";\nimport {API_URL} from '../Constants.js';\n\nclass DataSourceTypeService{\n\naddDataSourceType(json){\nreturn axios.put(`${API_URL}/api/addDataSourceType/`,json,{}\n);\n}\n\ngetDataSourceTypeList() {\n    return axios.get(`${API_URL}/api/getDataSourceTypeList/`, {\n    });\n}\n\ngetDataSourceTypeListActive() {\n    return axios.get(`${API_URL}/api/getDataSourceTypeListActive/`, {\n    });\n}\n\neditDataSourceType(json) {\n    return axios.put(`${API_URL}/api/editDataSourceType/`, json, {\n    });\n}\n}\nexport default new DataSourceTypeService();","import React,{Component} from 'react';\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport DataSourceTypeService from '../../api/DataSourceTypeService.js'\n\nexport default class AddDataSourceTypeComponent extends Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            label_en:''\n         }\n\n         this.updateFieldData=this.updateFieldData.bind(this);\n         this.submitForm=this.submitForm.bind(this);\n         this.Capitalize=this.Capitalize.bind(this);\n\n    }\n\n    componentDidMount(){\n        AuthenticationService.setupAxiosInterceptors();\n        $(\"#dataSourceTypeForm\").validate({\n            ignore: [],\n            rules: {\n                'label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n                // 'freLabel': {\n                   \n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'spaLabel': {\n                    \n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'porLabel': {\n                    \n                //     lettersonly: true,\n                //     maxlength: 255\n                // }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n\n    }\n\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    updateFieldData(event){\n       //console.log(event.target.name); \n        this.setState(\n           {\n                [event.target.name]: event.target.value      \n            }\n        )\n\n    }\n\n    submitForm(){\n        if (navigator.onLine) {\n            if ($(\"#dataSourceTypeForm\").valid()) {\n                console.log(this.state);\n                DataSourceTypeService.addDataSourceType(this.state).then(response => {\n                    this.props.history.push(`/dataSourceTypeList/${response.data.message}`)\n                    console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n               \n\n\n            }\n        }else{\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\nrender(){\n        return(\n         <>\n        <h3>{myConst.ADD_DATASOURCE_TYPE}</h3>\n                <form name=\"dataSourceTypeForm\" id=\"dataSourceTypeForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"label_en\" value={this.Capitalize(this.state.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    {/* <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"freLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"spaLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"porLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/> */}\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n        </>);\n    }\n}","import React, { Component } from 'react';\nimport DataSourceTypeService from '../../api/DataSourceTypeService'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\n\nexport default class DataSourceListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSourceList: []\n\n        }\n\n        this.editDataSourceType = this.editDataSourceType.bind(this);\n        this.addNewDataSourceType = this.addNewDataSourceType.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        DataSourceTypeService.getDataSourceTypeList().then(response => {\n            //console.log(response.data)\n            this.setState({\n                dataSourceList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    editDataSourceType(dataSourceType) {\n        this.props.history.push({\n            pathname: \"/editDataSourceType\",\n            state: { dataSourceType: dataSourceType }\n        });\n\n    }\n\n    addNewDataSourceType() {\n\n        if (navigator.onLine) {\n            this.props.history.push(`/addDataSourceType`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n\n    }\n    render() {\n        return (\n            <>\n\n                <p>{this.props.match.params.message}</p>\n                <div>\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewDataSourceType}>{myConst.ADD_NEW_DATA_SOURCE_TYPE}</button><br /><br />\n                </div>\n\n                <div className=\"dataSourceTypeList\">\n\n                    <h1>{myConst.DATA_SOURCE_TYPE_LIST}</h1>\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_EN}</th>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_FR}</th>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_SP}</th>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_PO}</th>\n                                <th>{myConst.DATA_SOURCE_TYPE_ACTIVE}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.dataSourceList.map(dataSourceType =>\n\n                                    <tr key={dataSourceType.dataSourceTypeId} onClick={() => this.editDataSourceType(dataSourceType)}>\n                                        <td>{dataSourceType.label.label_en}</td>\n                                        <td>{dataSourceType.label.label_fr}</td>\n                                        <td>{dataSourceType.label.label_sp}</td>\n                                        <td>{dataSourceType.label.label_pr}</td>\n                                        <td>{dataSourceType.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}</td>\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n            </>\n        );\n    }\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport DataSourceTypeService from '../../api/DataSourceTypeService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class UpdateDataSourceTypeComponent extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSourceType:\n            {\n                active: '',\n                \n                label: {\n                    label_en: '',\n                    // spaLabel: '',\n                    // freLabel: '',\n                    // porLabel: '',\n                    labelId: '',\n                }\n            }\n        }\n\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n        this.cancelClicked=this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        console.log(this.props.location.state.dataSourceType);\n        this.setState({\n            dataSourceType: this.props.location.state.dataSourceType\n        });\n\n\n        $(\"#updatyeDataSourceTypeForm\").validate({\n            ignore: [],\n            rules: {\n                'dataSourceType.label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                }\n                // 'dataSourceType.label.freLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'dataSourceType.label.spaLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'dataSourceType.label.porLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n\n    updateFieldData(event) {\n        let { dataSourceType } = this.state\n\n        if (event.target.name === \"dataSourceType.label.label_en\") {\n            console.log(\"inside if\")\n            dataSourceType.label.label_en = event.target.value\n        } \n        // if (event.target.name === \"dataSourceType.label.freLabel\") {\n        //     console.log(\"inside if\")\n        //     dataSourceType.label.freLabel = event.target.value\n        // } if (event.target.name === \"dataSourceType.label.spaLabel\") {\n        //     console.log(\"inside if\")\n        //     dataSourceType.label.spaLabel = event.target.value\n        // } if (event.target.name === \"dataSourceType.label.porLabel\") {\n        //     console.log(\"inside if\")\n        //     dataSourceType.label.porLabel = event.target.value\n        // }\n         else if (event.target.name === \"dataSourceType.active\") {\n            dataSourceType.active = event.target.id === \"dataSourceType.active2\" ? false : true\n        }\n\n\n        this.setState(\n            {\n                dataSourceType\n            }\n        )\n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    cancelClicked() {\n        this.props.history.push(`/dataSourceTypeList/` + \"Action Canceled\") \n    }\n\n    updateForm() {\n\n        if (navigator.onLine) {\n\n            if ($(\"#updatyeDataSourceTypeForm\").valid()) {\n\n                DataSourceTypeService.editDataSourceType(this.state.dataSourceType).then(response => {\n                    //this.props.history.push(`/languageList/${response.data.message}`)\n                    this.props.history.push(`/dataSourceTypeList/${response.data.message}`)\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n\n            }\n        }else{\n\n            alert(\"To perform this action you must be online.\");\n        }\n\n    }\n\n    render() {\n\n        return (\n            <>\n\n                <h3>{myConst.UPDATE_DATA_SOURCE_TYPE}</h3>\n                <form name=\"updatyeDataSourceTypeForm\" id=\"updatyeDataSourceTypeForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.label_en\" value={this.Capitalize(this.state.dataSourceType.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/* <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.freLabel\" value={this.state.dataSourceType.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.spaLabel\" value={this.state.dataSourceType.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.porLabel\" value={this.state.dataSourceType.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br /> */}\n                    <div>\n                        {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"dataSourceType.active1\" name=\"dataSourceType.active\" value={true} checked={this.state.dataSourceType.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"dataSourceType.active2\" name=\"dataSourceType.active\" value={false} checked={this.state.dataSourceType.active === false} onChange={this.updateFieldData} /> Disabled\n                     </div>\n                    {/* <input type=\"hidden\" name=\"dataSourceType.labelId\" value={this.state.dataSourceType.labelId} /> */}\n                    <div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                        <button type=\"button\" onClick={this.cancelClicked}>{myConst.BTN_CANCEL}</button><br></br><br></br>\n                    </div>\n                </form>\n\n\n\n            </>\n        );\n    }\n\n\n}\n\n","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass DataSourceService {\n\n    addDataSource(json) {\n        return axios.put(`${API_URL}/api/addDataSource/`, json, {}\n        );\n    }\n\n    getDataSourceList() {\n        return axios.get(`${API_URL}/api/getDataSourceList/`, {\n        });\n    }\n\n    editDataSource(json) {\n        return axios.put(`${API_URL}/api/editDataSource/`,json,{}\n            );\n        }\n    \n}\nexport default new DataSourceService();","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport DataSourceService from '../../api/DataSourceService';\nimport DataSourceTypeService from '../../api/DataSourceTypeService';\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class AddDataSource extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message:'',\n            label: {\n                label_en: ''\n                // freLabel: '',\n                // spaLabel: '',\n                // porLabel: ''\n            },\n            dataSourceType: {\n                dataSourceTypeId: ''\n            },\n            dataSourceTypeList: []\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        DataSourceTypeService.getDataSourceTypeListActive().then(response => {\n            //console.log(response.data)\n            this.setState({\n                dataSourceTypeList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n        $(\"#dataSourceForm\").validate({\n            ignore: [],\n            rules: {\n                'label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n                // 'label.freLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'label.spaLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'label.porLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                'dataSourceType.dataSourceTypeId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    updateFieldData(event) {\n        if (event.target.name === \"label.label_en\") {\n            //console.log(\"inside if\")\n            this.state.label.label_en = event.target.value\n        }\n        // if (event.target.name === \"label.freLabel\") {\n        //     //console.log(\"inside if\")\n        //     this.state.label.freLabel = event.target.value\n        // } if (event.target.name === \"label.spaLabel\") {\n        //     //console.log(\"inside if\")\n        //     this.state.label.spaLabel = event.target.value\n        // } if (event.target.name === \"label.porLabel\") {\n        //     //console.log(\"inside if\")\n        //     this.state.label.porLabel = event.target.value\n        // }\n        else if (event.target.name === \"dataSourceType.dataSourceTypeId\") {\n            this.state.dataSourceType.dataSourceTypeId = event.target.value\n        }\n\n        let { dataSource } = this.state\n        this.setState(\n            {\n                dataSource\n            }\n        )\n\n\n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    submitForm() {\n\n        if (navigator.onLine) {\n            if ($(\"#dataSourceForm\").valid()) {\n                console.log(this.state);\n                //delete this.state[\"dataSourceTypeList\"];\n                DataSourceService.addDataSource(this.state).then(response => {\n                    this.props.history.push(`/dataSourceList/${response.data.message}`)\n                    //console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n               \n\n            }\n        } else {\n            alert(\"To perform this action you must be online.\");\n\n        }\n\n    }\n\n\n    render() {\n        const { dataSourceTypeList } = this.state;\n        let dataSourceTypes = dataSourceTypeList.length > 0\n            && dataSourceTypeList.map((item, i) => {\n                return (\n                    <option key={i} value={item.dataSourceTypeId}>{item.label.label_en}</option>\n                )\n            }, this);\n        return (\n            <>\n                <div><h5>{this.state.message}</h5></div>\n                <h3>{myConst.ADD_DATASOURCE}</h3>\n                <form name=\"dataSourceForm\" id=\"dataSourceForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"label.label_en\" value={this.Capitalize(this.state.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/* <div>\n                        <label>{myConst.DATASOURCE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"label.freLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"label.spaLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"label.porLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br /> */}\n\n                    <div>\n                        {myConst.SELECT_DATA_SOURCE_TYPE} : <select id=\"dataSourceTypeId\" name=\"dataSourceType.dataSourceTypeId\" onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {dataSourceTypes}\n                        </select>\n                    </div>\n                    <br></br>\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n        );\n\n    }\n\n}","import React,{Compoent, Component} from 'react';\nimport DataSourceService from '../../api/DataSourceService';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\n\n\nexport default class DataSourceListComponent extends Component{\n\nconstructor(props){\nsuper(props);\nthis.state={\ndataSourceList:[]\n\n}\nthis.editDataSource=this.editDataSource.bind(this);\nthis.addNewDataSource=this.addNewDataSource.bind(this);\n}\n\ncomponentDidMount() {\n    AuthenticationService.setupAxiosInterceptors();\n    DataSourceService.getDataSourceList().then(response => {        \n        this.setState({\n            dataSourceList: response.data\n        })\n    })\n        .catch(\n            error => {\n                switch (error.message) {\n                    case \"Network Error\":\n                        this.setState({\n                            message: error.message\n                        })\n                        break\n                    default:\n                        this.setState({\n                            message: error.message\n                        })\n                        break\n                }\n            }\n        );\n}\n\neditDataSource(dataSource) {\n    this.props.history.push({\n        pathname: \"/editDataSource\",\n        state: { dataSource: dataSource }\n    });\n\n}\n\naddNewDataSource(){\n\n    if (navigator.onLine) {\n        this.props.history.push(`/addDataSource`)\n    } else {\n        alert(\"You must be Online.\")\n    }\n\n}\n\nrender() {\n    return (\n        <>\n\n            <p>{this.props.match.params.message}</p>\n            <div>\n                <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewDataSource}>{myConst.ADD_NEW_DATA_SOURCE}</button><br /><br />\n            </div>\n\n            <div className=\"dataSourceList\">\n\n                <h1>{myConst.DATA_SOURCE_LIST}</h1>\n                <table border=\"1\" align=\"center\">\n                    <thead>\n                        <tr>\n                            <th>{myConst.DATASOURCE_NAME_EN}</th>\n                            <th>{myConst.DATASOURCE_NAME_FR}</th>\n                            <th>{myConst.DATASOURCE_NAME_SP}</th>\n                            <th>{myConst.DATASOURCE_NAME_PO}</th>\n                            <th>{myConst.DATASOURCE_TYPE_NAME_EN}</th>\n                            <th>{myConst.DATASOURCE_ACTIVE}</th>\n                            \n\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.dataSourceList.map(dataSource =>\n\n                                <tr key={dataSource.dataSourceId} onClick={() => this.editDataSource(dataSource)}>\n                                    <td>{dataSource.label.label_en}</td>\n                                    <td>{dataSource.label.label_fr}</td>\n                                    <td>{dataSource.label.label_sp}</td>\n                                    <td>{dataSource.label.label_pr}</td>\n                                    <td>{dataSource.dataSourceType.label.engLabel}</td>\n                                    <td>{dataSource.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}</td>\n                                </tr>\n                            )\n\n                        }\n                    </tbody>\n                </table>\n            </div>\n\n        </>\n    );\n}\n\n}","import React, { Component } from 'react';\nimport DataSourceTypeService from '../../api/DataSourceTypeService';\nimport DataSourceService from '../../api/DataSourceService';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class UpdateDataSourceComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            dataSource: {\n                message:'',\n                active: '',\n                dataSourceId: '',\n                label: {\n                    label_en: '',\n                    // spaLabel: '',\n                    // freLabel: '',\n                    // porLabel: '',\n                    labelId: '',\n                },\n                dataSourceType: {\n                    dataSourceTypeId: ''\n                }\n            },\n            dataSourceTypeList: []\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n        this.cancelClicked=this.cancelClicked.bind(this);\n    }\n\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            dataSource: this.props.location.state.dataSource\n        });\n\n        DataSourceTypeService.getDataSourceTypeListActive().then(response => {\n            //console.log(response.data)\n            this.setState({\n                dataSourceTypeList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#updatyeDataSourceForm\").validate({\n            ignore: [],\n            rules: {\n                'dataSource.label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n                // 'dataSource.label.freLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'dataSource.label.spaLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'dataSource.label.porLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                'dataSource.dataSourceType.dataSourceTypeId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n\n    updateFieldData(event) {\n\n        let { dataSource } = this.state\n\n        if (event.target.name === \"dataSource.label.label_en\") {\n            // console.log(\"inside if\")\n            dataSource.label.label_en = event.target.value\n        } \n        // if (event.target.name === \"dataSource.label.freLabel\") {\n        //     //onsole.log(\"inside if\")\n        //     dataSource.label.freLabel = event.target.value\n        // } if (event.target.name === \"dataSource.label.spaLabel\") {\n        //     //console.log(\"inside if\")\n        //     dataSource.label.spaLabel = event.target.value\n        // } if (event.target.name === \"dataSource.label.porLabel\") {\n        //     //console.log(\"inside if\")\n        //     dataSource.label.porLabel = event.target.value\n        // } \n        if (event.target.name === \"dataSource.dataSourceType.dataSourceTypeId\") {\n            this.state.dataSource.dataSourceType.dataSourceTypeId = event.target.value\n        } else if (event.target.name === \"dataSource.active\") {\n            //console.log(\"hi----\");\n            dataSource.active = event.target.id === \"dataSource.active2\" ? false : true\n        }\n\n\n        this.setState(\n            {\n                dataSource\n            }\n        )\n\n\n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    cancelClicked() {\n        this.props.history.push(`/dataSourceList/` + \"Action Canceled\") \n    }\n    updateForm() {\n\n        if (navigator.onLine) {\n            if ($(\"#updatyeDataSourceForm\").valid()) {\n                //console.log(this.state);\n                DataSourceService.editDataSource(this.state.dataSource).then(response => {\n                    this.props.history.push(`/dataSourceList/${response.data.message}`)\n                    //console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n\n        } else {\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\n    render() {\n        const { dataSourceTypeList } = this.state;\n        let dataSourceTypes = dataSourceTypeList.length > 0\n            && dataSourceTypeList.map((item, i) => {\n                return (\n                    <option key={i} value={item.dataSourceTypeId}>{item.label.label_en}</option>\n                )\n            }, this);\n        return (\n\n            <>\n                <div><h5>{this.state.message}</h5></div>\n                <h3>{myConst.UPDATE_DATASOURCE}</h3>\n                <form name=\"updatyeDataSourceForm\" id=\"updatyeDataSourceForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.label_en\" value={this.Capitalize(this.state.dataSource.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/* <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.freLabel\" value={this.state.dataSource.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.spaLabel\" value={this.state.dataSource.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.porLabel\" value={this.state.dataSource.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br /> */}\n                    <div>\n                        {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"dataSource.active1\" name=\"dataSource.active\" value={true} checked={this.state.dataSource.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"dataSource.active2\" name=\"dataSource.active\" value={false} checked={this.state.dataSource.active === false} onChange={this.updateFieldData} /> Disabled\n                     </div>\n                    <br /><br />\n                    <div>\n                        {myConst.SELECT_DATA_SOURCE_TYPE} : <select id=\"dataSourceTypeId\" name=\"dataSource.dataSourceType.dataSourceTypeId\" value={this.state.dataSource.dataSourceType ? this.state.dataSource.dataSourceType.dataSourceTypeId : ''} onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {dataSourceTypes}\n                        </select>\n                    </div>\n                    <br /><br />\n                    <input type=\"hidden\" name=\"dataSource.dataSourceId\" value={this.state.dataSource.dataSourceId} />\n                    <input type=\"hidden\" name=\"dataSource.label.labelId\" value={this.state.dataSource.label.labelId} />\n                    <div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                        <button type=\"button\" onClick={this.cancelClicked}>{myConst.BTN_CANCEL}</button><br></br><br></br>\n                    </div>\n                </form>\n            </>\n\n        );\n\n\n    }\n\n}","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass CurrencyService {\n\n    addCurrency(json) {\n        return axios.put(`${API_URL}/api/addCurrency/`, json, {}\n        );\n    }\n\n    getCurrencyList() {\n        return axios.get(`${API_URL}/api/getCurrencyList/`, {\n        });\n    }\n    \n    getCurrencyListActive() {\n        return axios.get(`${API_URL}/api/getCurrencyListActive/`, {\n        });\n    }\n    editCurrency(json) {\n        return axios.put(`${API_URL}/api/editCurrency/`, json, {}\n        );\n    }\n}\nexport default new CurrencyService();","import React, { Component } from 'react';\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport CurrencyService from '../../api/CurrencyService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nexport default class AddCurrencyComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currencyCode: '',\n            currencySymbol: '',\n            label: {\n                label_en: ''\n                // freLabel: '',\n                // spaLabel: '',\n                // porLabel: ''\n            },\n            conversionRateToUsd: ''\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        // this.UpperCase=this.UpperCase.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        $(\"#currencyForm\").validate({\n            ignore: [],\n            rules: {\n                'label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n                // 'label.freLabel': {\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'label.spaLabel': {\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'label.porLabel': {\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                'currencyCode': {\n                    lettersonly: true,\n                    required: true,\n                    maxlength: 3\n                },\n                'currencySymbol': {\n                    lettersonlyspecialchar:true,\n                    required: true,\n                    maxlength: 3\n                },\n                'conversionRateToUsd': {\n                    positiveintegerdecimal:true,\n                    required: true\n                    //integer:true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    // UpperCase(str) {\n    //     return str.toUpperCase();\n    // }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    updateFieldData(event) {\n        // switch (event.target.name) {\n        //     case \"currencyCode\": this.state.currencyCode = event.target.value;\n        //     case \"currencySymbol\": this.state.currencySymbol = event.target.value;\n        //     case \"label.engLabel\": this.state.label.engLabel = event.target.value;\n        //     case \"label.freLabel\": this.state.label.freLabel = event.target.value;\n        //     case \"label.spaLabel\": this.state.label.spaLabel = event.target.value;\n        //     case \"label.porLabel\": this.state.label.porLabel = event.target.value;\n        //     case \"conversionRateToUsd\": this.state.conversionRateToUsd = event.target.value;\n        //     default: break;\n        // }\n        if(event.target.name === \"currencyCode\"){\n            this.state.currencyCode = event.target.value.toUpperCase();\n        }if(event.target.name === \"currencySymbol\"){\n            this.state.currencySymbol = event.target.value;\n        }if(event.target.name === \"label.label_en\"){\n            this.state.label.label_en = event.target.value;\n         }\n        // if(event.target.name === \"label.freLabel\"){\n        //     this.state.label.freLabel = event.target.value;\n        // }if(event.target.name === \"label.spaLabel\"){\n        //     this.state.label.spaLabel = event.target.value;\n        // }if(event.target.name === \"label.porLabel\"){\n        //     this.state.label.porLabel = event.target.value;\n        // }\n        else if(event.target.name === \"conversionRateToUsd\"){\n            this.state.conversionRateToUsd = event.target.value;\n        }\n        let { currency } = this.state\n        this.setState(\n            {\n                currency\n            }\n        )\n\n    }\n\n  \n    submitForm() {\n\n        if (navigator.onLine) {\n\n            if ($(\"#currencyForm\").valid()) {\n                console.log(this.state);\n                CurrencyService.addCurrency(this.state).then(response => {\n                    this.props.history.push(`/currencyList/${response.data.message}`)\n                    console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n        } else {\n\n            alert(\"To perform this action you must be online.\");\n        }\n\n    }\n\n    render() {\n        return (\n            <>\n                <h3>{myConst.ADD_CURRENCY}</h3>\n                <div><h5>{this.state.message}</h5></div>\n                <form name=\"currencyForm\" id=\"currencyForm\">\n                    <div>\n                        <label>{myConst.CURRENCY_CODE}:-</label>\n                        <input type=\"text\" name=\"currencyCode\" value={this.state.currencyCode} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_SYMBOL}:-</label>\n                        <input type=\"text\" name=\"currencySymbol\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"label.label_en\" value={this.Capitalize(this.state.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/* <div>\n                        <label>{myConst.CURRENCY_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"label.freLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"label.spaLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"label.porLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br /> */}\n                    <div>\n                        <label>{myConst.CONVERSIONRATE_TO_USD}:-</label>\n                        <input type=\"text\" name=\"conversionRateToUsd\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n\n            </>\n        );\n    }\n}","import React, { Compoent, Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport CurrencyService from '../../api/CurrencyService.js';\nimport * as myConst from '../../Labels.js';\n\n\nexport default class CurrencyListComponent extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currencyList: []\n        }\n        this.editCurrency = this.editCurrency.bind(this);\n        this.addNewCurrency=this.addNewCurrency.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        CurrencyService.getCurrencyList().then(response => {\n            this.setState({\n                currencyList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n\n    }\n\n    editCurrency(currency) {\n        this.props.history.push({\n            pathname: \"/editCurrency\",\n            state: { currency: currency }\n        });\n\n    }\n\n    addNewCurrency(){\n\n        if (navigator.onLine) {\n            this.props.history.push(`/addCurrency`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n    }\n    render() {\n\n        return (\n            <>\n                 <p>{this.props.match.params.message}</p>\n                <div>\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewCurrency}>{myConst.ADD_NEW_CURRENCY}</button><br /><br />\n                </div>\n\n                <div className=\"currencyList\">\n\n                    <h1>{myConst.CURRENCY_LIST}</h1>\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.CURRENCY_CODE}</th>\n                                <th>{myConst.CURRENCY_SYMBOL}</th>\n                                <th>{myConst.CURRENCY_NAME_EN}</th>\n                                <th>{myConst.CURRENCY_NAME_FR}</th>\n                                <th>{myConst.CURRENCY_NAME_SP}</th>\n                                <th>{myConst.CURRENCY_NAME_PO}</th>\n                                <th>{myConst.CONVERSIONRATE_TO_USD}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.currencyList.map(currency =>\n                                    <tr key={currency.currencyId} onClick={() => this.editCurrency(currency)}>\n                                        <td>{currency.currencyCode}</td>\n                                        <td>{currency.currencySymbol}</td>\n                                        <td>{currency.label.label_en}</td>\n                                        <td>{currency.label.label_fr}</td>\n                                        <td>{currency.label.label_sp}</td>\n                                        <td>{currency.label.label_pr}</td>\n                                        <td>{currency.conversionRateToUsd}</td>\n\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n            </>\n        );\n    }\n\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport CurrencyService from '../../api/CurrencyService.js';\n\nexport default class UpdateCurrencyComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currency: {\n                currencyCode: '',\n                currencySymbol: '',\n                label: {\n                    label_en: ''\n                    // freLabel: '',\n                    // spaLabel: '',\n                    // porLabel: ''\n                },\n                conversionRateToUsd: ''\n            }\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n        // this.UpperCase=this.UpperCase.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n        this.cancelClicked=this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            currency: this.props.location.state.currency\n        });\n        $(\"#updateCurrencyForm\").validate({\n            ignore: [],\n            rules: {\n                'currency.label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n                // 'currency.label.freLabel': {\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'currency.label.spaLabel': {\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'currency.label.porLabel': {\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                'currency.currencyCode': {\n                    lettersonly: true,\n                    required: true,\n                    maxlength: 3\n                },\n                'currency.currencySymbol': {\n                    required: true,\n                    lettersonlyspecialchar: true,\n                    maxlength: 3\n                },\n                'currency.conversionRateToUsd': {\n                    positiveintegerdecimal: true,\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n\n    updateFieldData(event) {\n        let { currency } = this.state\n\n        if (event.target.name === \"currency.currencyCode\") {\n            this.state.currency.currencyCode = event.target.value.toUpperCase();\n        }\n        if (event.target.name === \"currency.currencySymbol\") {\n            this.state.currency.currencySymbol = event.target.value;\n        }\n        if (event.target.name === \"currency.label.engLabel\") {\n            this.state.currency.label.engLabel = event.target.value\n        }\n        // if (event.target.name === \"currency.label.freLabel\") {\n        //     this.state.currency.label.freLabel = event.target.value\n        // }\n        // if (event.target.name === \"currency.label.spaLabel\") {\n        //     this.state.currency.label.spaLabel = event.target.value\n        // }\n        // if (event.target.name === \"currency.label.porLabel\") {\n        //     this.state.currency.label.porLabel = event.target.value\n        // }\n        else if (event.target.name === \"currency.conversionRateToUsd\") {\n            this.state.currency.conversionRateToUsd = event.target.value\n        }\n        // switch (event.target.name) {\n        //     case \"currency.currencyCode\": this.state.currency.currencyCode = event.target.value;\n        //     case \"currency.currencySymbol\": this.state.currency.currencySymbol = event.target.value;\n        //     case \"currency.label.engLabel\": this.state.currency.label.engLabel = event.target.value;\n        //     case \"currency.label.freLabel\": this.state.currency.label.freLabel = event.target.value;\n        //     case \"currency.label.spaLabel\": this.state.currency.label.spaLabel = event.target.value;\n        //     case \"currency.label.porLabel\": this.state.currency.label.porLabel = event.target.value;\n        //     case \"currency.conversionRateToUsd\": this.state.currency.conversionRateToUsd = event.target.value;\n        //     default: break;\n        // }\n        this.setState(\n            {\n                currency\n            }\n        )\n\n    }\n\n    // UpperCase(str) {\n    //     return str.toUpperCase();\n    // }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    cancelClicked() {\n        this.props.history.push(`/currencyList/` + \"Action Canceled\") \n    }\n    updateForm() {\n\n        if (navigator.onLine) {\n\n            if ($(\"#updateCurrencyForm\").valid()) {\n\n                CurrencyService.editCurrency(this.state.currency).then(response => {\n                    this.props.history.push(`/currencyList/${response.data.message}`)\n                    console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n\n\n        }\n\n        else {\n            alert(\"To perform this action you must be online.\");\n        }\n\n    }\n\n    render() {\n\n        return (\n            <>\n                <h3>{myConst.UPDATE_CURRENCY}</h3>\n                <form name=\"updateCurrencyForm\" id=\"updateCurrencyForm\">\n                    <div>\n                        <label>{myConst.CURRENCY_CODE}:-</label>\n                        <input type=\"text\" name=\"currency.currencyCode\" value={this.state.currency.currencyCode} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_SYMBOL}:-</label>\n                        <input type=\"text\" name=\"currency.currencySymbol\" value={this.state.currency.currencySymbol} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"currency.label.label_en\" value={this.Capitalize(this.state.currency.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/* <div>\n                        <label>{myConst.CURRENCY_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"currency.label.freLabel\" value={this.state.currency.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"currency.label.spaLabel\" value={this.state.currency.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"currency.label.porLabel\" value={this.state.currency.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br /> */}\n                    <div>\n                        <label>{myConst.CONVERSIONRATE_TO_USD}:-</label>\n                        <input type=\"text\" name=\"currency.conversionRateToUsd\" value={this.state.currency.conversionRateToUsd} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                        <button type=\"button\" onClick={this.cancelClicked}>{myConst.BTN_CANCEL}</button><br></br><br></br>\n                    </div>\n                </form> \n            </>\n        );\n\n    }\n\n\n}","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass CountryService {\n\n    addCountry(json) {\n        return axios.put(`${API_URL}/api/addCountry/`, json, {}\n        );\n    }\n\n    getCountryListAll() {\n        return axios.get(`${API_URL}/api/getCountryListAll/`, {\n        });\n    }\n    getCountryListActive() {\n        return axios.get(`${API_URL}/api/getCountryListActive/`, {\n        });\n    }\n\n    editCountry(json) {\n        return axios.put(`${API_URL}/api/editCountry/`, json, {}\n        );\n    }\n\n    getRealmCountryList() {\n        return axios.get(`${API_URL}/api/getRealmCountryList/`, {\n        });\n    }\n    getRealmCountryListByRealmId(realmId) {\n        return axios.get(`${API_URL}/api/getRealmCountryListByRealmId/${realmId}`, {\n        });\n    }\n\n}\nexport default new CountryService();","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport LanguageService from '../../api/LanguageService.js';\nimport CurrencyService from '../../api/CurrencyService.js';\nimport CountryService from '../../api/CountryService.js'\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class AddCountryComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            label: {\n                label_en:''\n            },\n            currency: {\n                currencyId: ''\n            },\n            language: {\n                languageId: ''\n            },\n            languageList: [],\n            currencyList: [],\n\n        }\n\n        this.submitForm = this.submitForm.bind(this);\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        LanguageService.getLanguageListActive().then(response => {\n            this.setState({\n                languageList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                });\n\n        CurrencyService.getCurrencyListActive().then(response => {\n            this.setState({\n                currencyList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                });\n\n\n        $(\"#countryForm\").validate({\n            ignore: [],\n            rules: {\n                'label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255,\n                    \n                },\n                // 'label.freLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'label.spaLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'label.porLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                'currency.currencyId': {\n                    required: true\n                },\n                'language.languageId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    updateFieldData(event) {\n        if (event.target.name === \"label.label_en\") {\n            this.state.label.label_en = event.target.value\n        }\n        // if (event.target.name === \"label.freLabel\") {\n        //     this.state.label.freLabel = event.target.value\n        // } if (event.target.name === \"label.spaLabel\") {\n        //     this.state.label.spaLabel = event.target.value\n        // } if (event.target.name === \"label.porLabel\") {\n        //     this.state.label.porLabel = event.target.value\n        // }\n        if (event.target.name === \"currency.currencyId\") {\n            this.state.currency.currencyId = event.target.value\n        } else if (event.target.name === \"language.languageId\") {\n            this.state.language.languageId = event.target.value\n        }\n        let { currency } = this.state\n        this.setState(\n            {\n                currency\n            }\n        )\n    }\n    submitForm() {\n\n        if (navigator.onLine) {\n\n            if ($(\"#countryForm\").valid()) {\n                CountryService.addCountry(this.state).then(response => {\n                    this.props.history.push(`/countryList/${response.data.message}`)\n                    //console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n        } else {\n\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n   \n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    render() {\n        const { languageList } = this.state;\n        let languageItems = languageList.length > 0\n            && languageList.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>{item.languageName}</option>\n                )\n            }, this);\n\n        const { currencyList } = this.state;\n        let currencyItems = currencyList.length > 0\n            && currencyList.map((itemOne, i) => {\n                return (\n                    <option key={i} value={itemOne.currencyId}>{itemOne.label.label_en}</option>\n                )\n            }, this);\n        return (\n\n            <>\n                <h3>{myConst.ADD_COUNTRY}</h3>\n                <form name=\"countryForm\" id=\"countryForm\">\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"label.label_en\" value={this.Capitalize(this.state.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/* <div>\n                        <label>{myConst.COUNTRY_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"label.freLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"label.spaLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"label.porLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br /> */}\n\n                    <div>\n                        {myConst.SELECT_LANGUAGE} : <select id=\"langaugeId\" name=\"language.languageId\" onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {languageItems}\n                        </select>\n                    </div>\n                    <br></br>\n                    <div>\n                        {myConst.SELECT_CURRENCY} : <select id=\"currencyId\" name=\"currency.currencyId\" onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {currencyItems}\n                        </select>\n                    </div>\n                    <br></br>\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n\n            </>\n        );\n    }\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport CountryService from '../../api/CountryService.js';\nimport * as myConst from '../../Labels.js';\n\nexport default class CountryListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            countryList: []\n        }\n        this.addNewCountry = this.addNewCountry.bind(this);\n        this.editCountry = this.editCountry.bind(this);\n    }\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        CountryService.getCountryListAll().then(response => {\n            this.setState({\n                countryList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n    }\n\n    addNewCountry() {\n        if (navigator.onLine) {\n            this.props.history.push(`/addCountry`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n    }\n    editCountry(country) {\n        console.log(country);\n        this.props.history.push({\n            pathname: \"/editCountry\",\n            state: { country: country }\n        });\n\n    }\n\n    render() {\n\n        return (\n\n            <>\n                <p>{this.props.match.params.message}</p>\n\n                <div>\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewCountry}>{myConst.ADD_NEW_COUNTRY}</button><br /><br />\n                </div>\n\n                <div className=\"countryList\">\n\n                    <h1>{myConst.COUNTRY_LIST}</h1>\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.COUNTRY_NAME_EN}</th>\n                                <th>{myConst.COUNTRY_NAME_FR}</th>\n                                <th>{myConst.COUNTRY_NAME_SP}</th>\n                                <th>{myConst.COUNTRY_NAME_PO}</th>\n                                <th>{myConst.COUNTRY_ACTIVE}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.countryList.map(country =>\n\n                                    <tr key={country.countryId} onClick={() => this.editCountry(country)}>\n                                        <td>{country.label.label_en}</td>\n                                        <td>{country.label.label_fr}</td>\n                                        <td>{country.label.label_sp}</td>\n                                        <td>{country.label.label_pr}</td>\n                                        <td>\n                                        {country.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}\n                                        </td>\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n\n\n\n            </>);\n    }\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport CountryService from '../../api/CountryService.js';\nimport LanguageService from '../../api/LanguageService.js';\nimport CurrencyService from '../../api/CurrencyService.js';\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class UpdateCountryComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            country: {\n                countryId:'',\n                label: {\n                    label_en: '',\n                    // spaLabel: '',\n                    // freLabel: '',\n                    // porLabel: '', \n                    labelId:''\n                },\n                currency: {\n                    curencyId: ''\n                },\n                language: {\n                    languageId: ''\n                },\n                active: ''\n\n            },\n            languageList:[],\n            currencyList:[]\n        }\n\n        this.updateFieldData=this.updateFieldData.bind(this);\n        this.updateForm=this.updateForm.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n        this.cancelClicked=this.cancelClicked.bind(this);\n\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            country: this.props.location.state.country\n        });\n\n        LanguageService.getLanguageListActive().then(response => {\n            this.setState({\n                languageList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                });\n\n        CurrencyService.getCurrencyListActive().then(response => {\n            this.setState({\n                currencyList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                });\n\n                $(\"#updateCountryForm\").validate({\n                    ignore: [],\n                    rules: {\n                        'country.label.label_en': {\n                            required: true,\n                            lettersonlywhitespace: true,\n                            maxlength: 255\n                        },\n                        // 'country.label.freLabel': {\n        \n                        //     lettersonly: true,\n                        //     maxlength: 255\n                        // },\n                        // 'country.label.spaLabel': {\n        \n                        //     lettersonly: true,\n                        //     maxlength: 255\n                        // },\n                        // 'country.label.porLabel': {\n        \n                        //     lettersonly: true,\n                        //     maxlength: 255\n                        // },\n                        'country.currency.currencyId': {\n                            required: true\n                        }, \n                        'country.language.languageId': {\n                            required: true\n                        }\n                    },\n                    errorPlacement: function (error, element) {\n                        error.insertAfter(element);\n                    }\n                });\n\n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    updateFieldData(event){\n        let { country } = this.state\n        if (event.target.name === \"country.label.label_en\") {\n           this.state.country.label.label_en = event.target.value\n        }\n        // if (event.target.name === \"country.label.freLabel\") {\n        //     this.state.country.label.freLabel = event.target.value\n        // } if (event.target.name === \"country.label.spaLabel\") {\n        //     this.state.country.label.spaLabel = event.target.value\n        // } if (event.target.name === \"country.label.porLabel\") {\n        //     this.state.country.label.porLabel = event.target.value\n        // }\n        if (event.target.name === \"country.currency.currencyId\") {\n            this.state.country.currency.currencyId = event.target.value\n        }if (event.target.name === \"country.language.languageId\") {\n            this.state.country.language.languageId = event.target.value\n        }else if(event.target.name === \"country.active\") { \n            console.log(\"hi----\");\n            this.state.country.active = event.target.id = \"country.active2\" ? false : true\n        }\n        \n        this.setState(\n            {\n                country\n            }\n        )\n\n\n    }\n    cancelClicked() {\n        this.props.history.push(`/countryList/` + \"Action Canceled\") \n    }\n\n    updateForm(){\n        if(navigator.onLine){\n\n            if($(\"#updateCountryForm\").valid()){\n        CountryService.editCountry(this.state.country).then(response => {\n            this.props.history.push(`/countryList/${response.data.message}`)\n            //console.log(\"success\");\n        }\n        )\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            )\n        }\n        }else{\n\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\n    render() {\n        const { languageList } = this.state;\n        let languageItems = languageList.length > 0\n            && languageList.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>{item.languageName}</option>\n                )\n            }, this);\n\n        const { currencyList } = this.state;\n        let currencyItems = currencyList.length > 0\n            && currencyList.map((itemOne, i) => {\n                return (\n                    <option key={i} value={itemOne.currencyId}>{itemOne.label.label_en}</option>\n                )\n            }, this);\n\n        return (\n            <>\n\n                <h3>{myConst.UPDATE_COUNTRY}</h3>\n                <form name=\"updateCountryForm\" id=\"updateCountryForm\">\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"country.label.engLabel\" value={this.Capitalize(this.state.country.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/* <div>\n                        <label>{myConst.COUNTRY_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"country.label.freLabel\" value={this.state.country.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"country.label.spaLabel\" value={this.state.country.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"country.label.porLabel\" value={this.state.country.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br /> */}\n                    <div>\n                        {myConst.ACTIVE}:\n        <input type=\"radio\" id=\"country.active1\" name=\"country.active\" value={true} checked={this.state.country.active === true} onChange={this.updateFieldData} /> Active\n        <input type=\"radio\" id=\"country.active2\" name=\"country.active\" value={false} checked={this.state.country.active === false} onChange={this.updateFieldData} /> Disabled\n         </div>\n                    <br /><br />\n                    <div>\n                        {myConst.SELECT_LANGUAGE} : <select id=\"langaugeId\" name=\"country.language.languageId\" value={this.state.country.language ? this.state.country.language.languageId : ''} onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {languageItems}\n                        </select>\n                    </div>\n                    <br></br>\n                    <div>\n                        {myConst.SELECT_CURRENCY} : <select id=\"currencyId\" name=\"country.currency.currencyId\" value={this.state.country.currency ? this.state.country.currency.currencyId : ''} onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {currencyItems}\n                        </select>\n                    </div>\n                    <br /><br />\n                    {/* <input type=\"hidden\" name=\"dataSource.dataSourceId\" value={this.state.dataSource.dataSourceId} /> */}\n                    {/* <input type=\"hidden\" name=\"dataSource.label.labelId\" value={this.state.dataSource.label.labelId} /> */}\n                    <div>\n\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                        <button type=\"button\" onClick={this.cancelClicked}>{myConst.BTN_CANCEL}</button><br></br><br></br>\n                    </div>\n                </form>\n\n            </>\n\n        );\n\n\n\n    }\n\n\n}","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass ShipmentStatusService{\n\n    addShipmentStatus(json) {\n        return axios.put(`${API_URL}/api/addShipmentStatus/`, json, {}\n        );\n    }\n\n    getShipmentStatusListAll(){\n        return axios.get(`${API_URL}/api/getShipmentStatusListAll/`, {\n        });\n    }\n    getShipmentStatusListActive(){\n        return axios.get(`${API_URL}/api/getShipmentStatusListActive/`, {\n        });\n    }\n    editShipmentStatus(json) {\n        return axios.put(`${API_URL}/api/editShipmentStatus/`, json, {\n        });\n    }\n\n}\nexport default new ShipmentStatusService();","import React, { Component } from 'react';\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport ShipmentStatusService from '../../api/ShipmentStatusService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class AddShipmentStatusComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            shipmentStatus: {\n                label: {\n                    label_en: '' \n                    // freLabel: '',\n                    // spaLabel: '',\n                    // porLabel: ''\n                },\n                nextShipmentStatusAllowed: []\n            },\n            shipmentStatusList: []\n        }\n\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n    }\n\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        ShipmentStatusService.getShipmentStatusListActive().then(response => {\n            //console.log(response.data)\n            this.setState({\n                shipmentStatusList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n        $(\"#shipmentStatusForm\").validate({\n            ignore: [],\n            rules: {\n                'shipmentStatus.label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                }\n                // 'shipmentStatus.label.freLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'shipmentStatus.label.spaLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'shipmentStatus.label.porLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n    updateFieldData(event) {\n        if (event.target.name === \"shipmentStatus.label.label_en\") {\n            //console.log(\"inside if\")\n            this.state.shipmentStatus.label.label_en = event.target.value\n        }\n        // if (event.target.name === \"shipmentStatus.label.freLabel\") {\n        //     //console.log(\"inside if\")\n        //     this.state.shipmentStatus.label.freLabel = event.target.value\n        // } if (event.target.name === \"shipmentStatus.label.spaLabel\") {\n        //     //console.log(\"inside if\")\n        //     this.state.shipmentStatus.label.spaLabel = event.target.value\n        // }if (event.target.name === \"shipmentStatus.label.porLabel\") {\n        //     //console.log(\"inside if\")\n        //     this.state.shipmentStatus.label.porLabel = event.target.value\n        // }\n        else if (event.target.name === \"shipmentStatus.nextShipmentStatusAllowed\") {\n            this.state.shipmentStatus.nextShipmentStatusAllowed = Array.from(event.target.selectedOptions, (item) => item.value)\n        }\n\n\n        let { shipmentStatus } = this.state\n        this.setState(\n            {\n                shipmentStatus\n            }\n        )\n    }\n\n    submitForm() {\n        if (navigator.onLine) {\n            if ($(\"#shipmentStatusForm\").valid()) {\n                console.log(this.state);\n                ShipmentStatusService.addShipmentStatus(this.state.shipmentStatus).then(response => {\n                    this.props.history.push(`/shipmentStatusListAll/${response.data.message}`)\n                    //console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n\n            }\n\n        } else {\n            alert(\"To perform this action you must be online.\");\n        }\n\n    } \n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    render() {\n\n        const { shipmentStatusList } = this.state;\n        let shipmentStatusItems = shipmentStatusList.length > 0\n            && shipmentStatusList.map((item, i) => {\n                return (\n                    <option key={i} value={item.shipmentStatusId}>{item.label.label_en}</option>\n                )\n            }, this);\n        return (\n            <>\n                <h3>{myConst.ADD_SHIPMENT_STATUS}</h3>\n                <form name=\"shipmentStatusForm\" id=\"shipmentStatusForm\">\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.label_en\" value={this.Capitalize(this.state.shipmentStatus.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/* <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.freLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.spaLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.porLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br /> */}\n                 \n                    <div>\n                       \n                        <label>  {myConst.SELECT_NEXT_SHIPMENT_STATUS} :- </label><select id=\"shipmentStatusId\" name=\"shipmentStatus.nextShipmentStatusAllowed\" multiple=\"true\" onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {shipmentStatusItems}\n                        </select>\n                        \n                    </div>\n                    \n                    <br /><br />\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n        );\n\n    }\n\n}","\nimport React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport ShipmentStatusService from '../../api/ShipmentStatusService.js';\nimport * as myConst from '../../Labels.js';\nexport default class ShipmentStatusListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            shipmentStatusList: []\n        }\n        this.editShipmentStatus=this.editShipmentStatus.bind(this);\n        this.addNewShipmentStatus=this.addNewShipmentStatus.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        ShipmentStatusService.getShipmentStatusListAll().then(response => {\n            //console.log(response.data)\n            this.setState({\n                shipmentStatusList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n    }\n\n    addNewShipmentStatus(){\n        if (navigator.onLine) {\n            this.props.history.push(`/addShipmentStatus`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n    }\n\n    editShipmentStatus(shipmentStatus){\n        this.props.history.push({\n            pathname: \"/editShipmentStatus\",\n            state: { shipmentStatus: shipmentStatus }\n        });\n\n    }\n\n    render() {\n        return (\n            <>\n                 <p>{this.props.match.params.message}</p>\n                <div>\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewShipmentStatus}>{myConst.ADD_NEW_SHIPMENT_STATUS}</button><br /><br />\n                </div>\n\n                <div className=\"shipmentStatusList\">\n\n                    <h1>{myConst.SHIPMENT_STATUS_LIST}</h1>\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.SHIPMENTSTATUS_NAME_EN}</th>\n                                <th>{myConst.SHIPMENTSTATUS_NAME_FR}</th>\n                                <th>{myConst.SHIPMENTSTATUS_NAME_SP}</th>\n                                <th>{myConst.SHIPMENTSTATUS_NAME_PO}</th>\n                                <th>{myConst.DATA_SOURCE_TYPE_ACTIVE}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.shipmentStatusList.map(shipmentStatus =>\n\n                                    <tr key={shipmentStatus.shipmentStatusId} onClick={() => this.editShipmentStatus(shipmentStatus)}>\n                                        <td>{shipmentStatus.label.label_en}</td>\n                                        <td>{shipmentStatus.label.label_fr}</td>\n                                        <td>{shipmentStatus.label.label_sp}</td>\n                                        <td>{shipmentStatus.label.label_pr}</td>\n                                        <td>{shipmentStatus.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}</td>\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n\n            </>\n\n        );\n\n\n    }\n\n}","import React, { Component } from 'react';\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport ShipmentStatusService from '../../api/ShipmentStatusService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nexport default class UpdateShipmentStatusComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            shipmentStatus: {\n                //nextShipmentStatusAllowed: [],\n                shipmentStatusId: '',\n                label: {\n                    label_en: ''\n                    // freLabel: '',\n                    // spaLabel: '',\n                    // porLabel: ''\n                },\n                active: ''\n \n            },\n            shipmentStatusList: []\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n        this.cancelClicked=this.cancelClicked.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        //console.log(this.props.location.state.shipmentStatus);\n        //AuthenticationService.setupAxiosInterceptors();\n        ShipmentStatusService.getShipmentStatusListActive().then(response => {\n            //console.log(response.data)\n            this.setState({\n                shipmentStatusList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n        this.setState({\n            shipmentStatus: this.props.location.state.shipmentStatus\n        });\n        $(\"#updateShipmentStatusForm\").validate({\n            ignore: [],\n            rules: {\n                'shipmentStatus.label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                }\n                // 'shipmentStatus.label.freLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'shipmentStatus.label.spaLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'shipmentStatus.label.porLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n    updateForm() {\n\n        if (navigator.onLine) {\n\n            if ($(\"#updateShipmentStatusForm\").valid()) {\n                //console.log(this.state.shipmentStatus);\n                ShipmentStatusService.editShipmentStatus(this.state.shipmentStatus).then(response => {\n                    //this.props.history.push(`/languageList/${response.data.message}`)\n                    this.props.history.push(`/shipmentStatusListAll/${response.data.message}`)\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n        }\n\n    }\n    cancelClicked() {\n        this.props.history.push(`/shipmentStatusListAll/` + \"Action Canceled\") \n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    updateFieldData(event) {\n        let { shipmentStatus } = this.state\n        if (event.target.name === \"shipmentStatus.label.label_en\") {\n            //console.log(\"inside if\")\n            this.state.shipmentStatus.label.label_en = event.target.value\n        }\n        // if (event.target.name === \"shipmentStatus.label.freLabel\") {\n        //     //console.log(\"inside if\")\n        //     this.state.shipmentStatus.label.freLabel = event.target.value\n        // } \n        // if (event.target.name === \"shipmentStatus.label.spaLabel\") {\n        //     //console.log(\"inside if\")\n        //     this.state.shipmentStatus.label.spaLabel = event.target.value\n        // } if (event.target.name === \"shipmentStatus.label.porLabel\") {\n        //     //console.log(\"inside if\")\n        //     this.state.shipmentStatus.label.porLabel = event.target.value\n        // }\n        if (event.target.name === \"shipmentStatus.nextShipmentStatusAllowed\") {\n            this.state.shipmentStatus.nextShipmentStatusAllowed = Array.from(event.target.selectedOptions, (item) => item.value)\n        } \n        else if (event.target.name === \"shipmentStatus.active\") {\n            this.state.shipmentStatus.active = event.target.id === \"shipmentStatus.active2\" ? false : true\n        }\n        this.setState(\n            {\n                shipmentStatus\n            }\n        )\n    }\n\n    render() {\n        const { shipmentStatusList } = this.state;\n        let shipmentStatusItems = shipmentStatusList.length > 0\n            && shipmentStatusList.map((item, i) => {\n                return (\n                    <option key={i} value={item.shipmentStatusId}>{item.label.label_en}</option>\n                )\n            }, this);\n        return (\n            <>\n                <h3>{myConst.UPDATE_SHIPMENT_STATUS}</h3>\n                <form name=\"updateShipmentStatusForm\" id=\"updateShipmentStatusForm\">\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.label_en\" value={this.Capitalize(this.state.shipmentStatus.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/* <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.freLabel\" value={this.state.shipmentStatus.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.spaLabel\" value={this.state.shipmentStatus.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.porLabel\" value={this.state.shipmentStatus.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br /> */}\n                    <div>\n                        {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"shipmentStatus.active1\" name=\"shipmentStatus.active\" value={true} checked={this.state.shipmentStatus.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"shipmentStatus.active2\" name=\"shipmentStatus.active\" value={false} checked={this.state.shipmentStatus.active === false} onChange={this.updateFieldData} /> Disabled\n                     </div>\n                    <br/><br />\n                        <div>\n                            <label>  {myConst.SELECT_NEXT_SHIPMENT_STATUS} :- </label><select id=\"shipmentStatusId\" name=\"shipmentStatus.nextShipmentStatusAllowed\" multiple=\"true\" value={this.state.shipmentStatus.nextShipmentStatusAllowed} onChange={this.updateFieldData}>\n                                <option value=\"\">-Nothing Selected-</option>\n                                {shipmentStatusItems}\n                            </select>\n                        </div>\n                        <br/><br/>\n                        {/* <input type=\"hidden\" name=\"dataSourceType.labelId\" value={this.state.dataSourceType.labelId} /> */}\n                        <div>\n                            <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                            <button type=\"button\" onClick={this.cancelClicked}>{myConst.BTN_CANCEL}</button><br></br><br></br>\n                        </div>\n                </form>\n\n\n\n            </>\n                );\n            }\n        \n}","import axios from \"axios\"\nimport { API_URL } from '../Constants.js'\n\nclass ProgramService {\n    getProgramData(programId) {\n        console.log(programId)\n        return axios.get(`${API_URL}/api/getProgramData?programId=${programId}`, {\n        });\n    }\n\n    getProgramList() {\n        return axios.get(`${API_URL}/api/getProgramList`, {\n        });\n    }\n}\nexport default new ProgramService()","import React, { Component } from 'react';\nimport { BTN_DOWNLOAD, DOWNLOAD_TITLE, DATA_DOWNLOAD_SUCCESS, PROGRAM } from '../../Labels.js';\nimport ProgramService from '../../api/ProgramService.js';\nimport CryptoJS from 'crypto-js';\nimport { SECRET_KEY } from '../../Constants.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport $ from 'jquery';\nimport 'jquery-validation';\n\nexport default class DownloadProgramDataComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            programList: [],\n            message: \"\"\n        }\n        this.downloadClicked = this.downloadClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        ProgramService.getProgramList().then(response => {\n            console.log(response.data)\n            this.setState({\n                programList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#downloadForm\").validate({\n            ignore: [],\n            rules: {\n                'programId': {\n                    required: true\n                },\n            }\n        })\n    }\n\n    render() {\n        const { programList } = this.state;\n        let programItems = programList.length > 0\n            && programList.map((item, i) => {\n                return (\n                    <option key={i} value={item.programId}>{item.label.engLabel}</option>\n                )\n            }, this);\n        return (\n            <div>\n                <div className=\"page-content-wrap\">\n\n                <div className=\"row\">\n                <div className=\"\">\n                    <ul class=\"breadcrumb\"></ul>\n                </div>\n\n                <div className=\"col-md-8 col-md-offset-2\">\n                    <div className=\"login mt-2 block\">\n                        <div className=\"panel panel-default\">\n                            <div className=\"panel-heading\">\n                            <h3 className=\"panel-title\">Download Program Data</h3>\n                            </div>\n                            <div className=\"panel-body\">\n                                <form name=\"downloadForm\" id=\"downloadForm\">\n\n                                <div className=\"form-group\">                                        \n                                        <select multiple class=\"form-control\">\n                                            <option>1</option>\n                                            <option>2</option>\n                                            <option>3</option>\n                                            <option>4</option>\n                                            <option>5</option>\n                                        </select>   \n                                    </div> \n\n                                </form>\n                            </div>\n                            <div className=\"panel-footer\">\n                            <button ype=\"button\" onClick={this.downloadClicked} className=\"btn btn-success pull-right\">{BTN_DOWNLOAD}</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                </div>\n                </div>\n                \n                <h4>{this.state.message}</h4>\n                <h4>{DOWNLOAD_TITLE}</h4><br></br>\n                <form name=\"downloadForm\" id=\"downloadForm\">\n                    {PROGRAM} : <select id=\"programId\" name=\"programId\" multiple={true}>\n                        {programItems}\n                    </select><br></br><br></br>\n                   <button type=\"button\" onClick={this.downloadClicked}>{BTN_DOWNLOAD}</button>\n                </form>\n            </div>\n        )\n    }\n\n    downloadClicked() {\n        if (navigator.onLine) {\n            if ($(\"#downloadForm\").valid()) {\n                var programArr = $(\"#programId\").val();\n                for (var j = 0; j < programArr.length; j++) {\n                    AuthenticationService.setupAxiosInterceptors();\n                    ProgramService.getProgramData(programArr[j])\n                        .then(response => {\n                            var json = response.data;\n                            var db1;\n                            var storeOS;\n                            var openRequest = indexedDB.open('fasp', 1);\n                            openRequest.onupgradeneeded = function (e) {\n                                var db1 = e.target.result;\n                                if (!db1.objectStoreNames.contains('programData')) {\n                                    storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n                                }\n                            };\n                            openRequest.onsuccess = function (e) {\n                                db1 = e.target.result;\n                                var transaction = db1.transaction(['programData'], 'readwrite');\n                                var program = transaction.objectStore('programData');\n                                var encryptedText = CryptoJS.AES.encrypt(JSON.stringify(json), SECRET_KEY);\n                                var item = {\n                                    id: json.programId + \"_v\" + json.programVersion,\n                                    programId: json.programId,\n                                    version: json.programVersion,\n                                    programName: (CryptoJS.AES.encrypt((json.label.labelEn), SECRET_KEY)).toString(),\n                                    programData: encryptedText.toString()\n                                };\n                                console.log(item)\n                                var putRequest = program.put(item);\n\n                                putRequest.onerror = function (event) {\n                                    // Handle errors!\n                                };\n                                putRequest.onsuccess = function (event) {\n                                    this.setState({\n                                        message: `${DATA_DOWNLOAD_SUCCESS}`\n                                    })\n                                }.bind(this);\n                            }.bind(this)\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            }\n        } else {\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport { IMPORT_TITLE, BTN_IMPORT, DATA_IMPORT_SUCCESS, IMPORT_PROGRAM, BTN_SUBMIT } from '../../Labels.js';\nimport { SECRET_KEY } from '../../Constants.js';\nimport JSZip from 'jszip';\nimport CryptoJS from 'crypto-js';\nimport $ from 'jquery';\nimport 'jquery-validation';\n\nexport default class ImportProgramDataComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\",\n            programList: []\n        }\n        this.importClicked = this.importClicked.bind(this);\n        this.programSubmitClicked = this.programSubmitClicked.bind(this);\n    }\n\n    componentDidMount() {\n        $(\"#programDiv\").hide();\n        $(\"#importDiv\").show();\n        $(\"#importForm\").validate({\n            ignore: [],\n            rules: {\n                'programId': {\n                    required: true\n                },\n            }\n        })\n    }\n\n    render() {\n        const { programList } = this.state;\n        let programItems = programList.length > 0\n            && programList.map((item, i) => {\n                return (\n                    <option key={i} value={item.id}>{item.name}</option>\n                )\n            }, this);\n        return (\n            <div>\n                <h4>{this.state.message}</h4>\n                <h4>{IMPORT_TITLE}</h4><br></br>\n                <form id=\"importForm\" name=\"importForm\">\n                    <div id=\"importDiv\">\n                        <input type=\"file\" /><br></br><br></br>\n                        <button type=\"button\" onClick={this.importClicked}>{BTN_IMPORT}</button>\n                    </div>\n                    <div id=\"programDiv\">\n                        {IMPORT_PROGRAM} : <select id=\"programId\" name=\"programId\" multiple={true}>\n                            {programItems}\n                        </select><br></br><br></br>\n                        <button type=\"button\" onClick={this.programSubmitClicked}>{BTN_SUBMIT}</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n\n    importClicked() {\n        if (window.File && window.FileReader && window.FileList && window.Blob) {\n            if (document.querySelector('input[type=file]').files[0] == undefined) {\n                alert(\"Please select a file\");\n            } else {\n                var file = document.querySelector('input[type=file]').files[0];\n                var fileName = file.name;\n                var fileExtenstion = fileName.split(\".\");\n                if (fileExtenstion[1] == \"zip\") {\n                    JSZip.loadAsync(file).then(function (zip) {\n                        var i = 0;\n                        var fileName = []\n                        var size = 0;\n                        Object.keys(zip.files).forEach(function (filename) {\n                            size++;\n                        })\n                        Object.keys(zip.files).forEach(function (filename) {\n                            zip.files[filename].async('string').then(function (fileData) {\n                                i++;\n                                var programDataJson = JSON.parse(fileData);\n                                var bytes = CryptoJS.AES.decrypt(programDataJson.programData, SECRET_KEY);\n                                var plaintext = bytes.toString(CryptoJS.enc.Utf8);\n                                var programDataJsonDecrypted = JSON.parse(plaintext);\n                                fileName[i] = {\n                                    id: filename,\n                                    name: programDataJsonDecrypted.label.labelEn + \"~v\" + programDataJsonDecrypted.programVersion\n                                }\n                                if (i === size) {\n                                    this.setState({\n                                        programList: fileName\n                                    })\n\n                                    $(\"#programDiv\").show();\n                                    $(\"#importDiv\").hide();\n                                }\n                            }.bind(this))\n\n                        }.bind(this))\n\n                    }.bind(this))\n                } else {\n                    alert(\"Please select zip file\")\n                }\n            }\n\n        }\n\n    }\n\n    programSubmitClicked() {\n        if ($(\"#importForm\").valid()) {\n            if (window.File && window.FileReader && window.FileList && window.Blob) {\n                if (document.querySelector('input[type=file]').files[0] == undefined) {\n                    alert(\"Please select a file\");\n                } else {\n                    var file = document.querySelector('input[type=file]').files[0];\n                    var db1;\n                    var storeOS;\n                    var openRequest = indexedDB.open('fasp', 1);\n                    var selectedPrgArr = $(\"#programId\").val();\n                    openRequest.onupgradeneeded = function (e) {\n                        var db1 = e.target.result;\n                        if (!db1.objectStoreNames.contains('programData')) {\n                            storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n                        }\n                    };\n                    openRequest.onsuccess = function (e) {\n                        db1 = e.target.result;\n                        var transaction = db1.transaction(['programData'], 'readwrite');\n                        var program = transaction.objectStore('programData');\n                        JSZip.loadAsync(file).then(function (zip) {\n                            Object.keys(zip.files).forEach(function (filename) {\n\n                                zip.files[filename].async('string').then(function (fileData) {\n                                    for (var j = 0; j < selectedPrgArr.length; j++) {\n                                        if (selectedPrgArr[j] == filename) {\n                                            db1 = e.target.result;\n                                            var transaction2 = db1.transaction(['programData'], 'readwrite');\n                                            var program2 = transaction2.objectStore('programData');\n                                            var addProgramDataRequest = program2.put(JSON.parse(fileData));\n                                            addProgramDataRequest.onerror = function (event) {\n                                            };\n                                            addProgramDataRequest.onsuccess = function (event) {\n                                            };\n                                        }\n\n                                    }\n                                })\n                            })\n                        })\n                        this.setState({\n                            message: `${DATA_IMPORT_SUCCESS}`\n                        })\n                        $(\"#programDiv\").hide();\n                        $(\"#importDiv\").show();\n                    }.bind(this)\n                }\n            }\n        }\n    }\n}\n","import React, { Component } from 'react';\nimport { BTN_EXPORT, EXPORT_TITLE, PROGRAM, DATA_EXPORT_SUCCESS } from '../../Labels.js';\nimport { SECRET_KEY } from '../../Constants.js';\nimport JSZip from 'jszip';\nimport FileSaver from 'file-saver';\nimport CryptoJS from 'crypto-js';\nimport $ from 'jquery';\nimport 'jquery-validation';\n\nexport default class ExportProgramDataComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            programList: [],\n            message: \"\"\n        }\n        this.exportClicked = this.exportClicked.bind(this);\n    }\n\n    componentDidMount() {\n        var db1;\n        var storeOS;\n        var openRequest = indexedDB.open('fasp', 1);\n        openRequest.onupgradeneeded = function (e) {\n            var db1 = e.target.result;\n            if (!db1.objectStoreNames.contains('programData')) {\n                storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n            }\n        };\n        openRequest.onsuccess = function (e) {\n            db1 = e.target.result;\n            var transaction = db1.transaction(['programData'], 'readwrite');\n            var program = transaction.objectStore('programData');\n            var getRequest = program.getAll();\n            var proList = []\n            getRequest.onerror = function (event) {\n                // Handle errors!\n            };\n            getRequest.onsuccess = function (event) {\n                var myResult = [];\n                myResult = getRequest.result;\n                for (var i = 0; i < myResult.length; i++) {\n                    var bytes = CryptoJS.AES.decrypt(myResult[i].programName, SECRET_KEY);\n                    var programName = bytes.toString(CryptoJS.enc.Utf8);\n                    console.log(programName);\n                    var programJson = {\n                        name: programName.toString() + \"~v\" + myResult[i].version,\n                        id: myResult[i].id\n                    }\n                    proList[i] = programJson\n                }\n                this.setState({\n                    programList: proList\n                })\n            }.bind(this);\n        }.bind(this)\n        $(\"#exportForm\").validate({\n            ignore: [],\n            rules: {\n                'programId': {\n                    required: true\n                },\n            }\n        })\n\n    }\n\n    render() {\n        const { programList } = this.state;\n        let programItems = programList.length > 0\n            && programList.map((item, i) => {\n                return (\n                    <option key={i} value={item.id}>{item.name}</option>\n                )\n            }, this);\n        return (\n            <div>\n                <h4>{this.state.message}</h4>\n                <h4>{EXPORT_TITLE}</h4><br></br>\n                <form name=\"exportForm\" id=\"exportForm\">\n                    {PROGRAM} : <select id=\"programId\" name=\"programId\" multiple={true}>\n                        {programItems}\n                    </select><br></br><br></br>\n                    <button type=\"button\" onClick={this.exportClicked}>{BTN_EXPORT}</button>\n                </form>\n            </div>\n        )\n    }\n\n    exportClicked() {\n        if ($(\"#exportForm\").valid()) {\n            var zip = new JSZip();\n            var selectedPrgArr = $(\"#programId\").val();\n            var selectedPrgArrText = $('#programId option:selected').toArray().map(item => item.text);\n            var db1;\n            var storeOS;\n            var openRequest = indexedDB.open('fasp', 1);\n            openRequest.onupgradeneeded = function (e) {\n                var db1 = e.target.result;\n                if (!db1.objectStoreNames.contains('programData')) {\n                    storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n                }\n            };\n            openRequest.onsuccess = function (e) {\n                db1 = e.target.result;\n                var transaction = db1.transaction(['programData'], 'readwrite');\n                var program = transaction.objectStore('programData');\n                var getRequest = program.getAll();\n                getRequest.onerror = function (event) {\n                    // Handle errors!\n                };\n                getRequest.onsuccess = function (event) {\n                    var myResult = [];\n                    myResult = getRequest.result;\n                    for (var i = 0; i < myResult.length; i++) {\n                        for (var j = 0; j < selectedPrgArr.length; j++) {\n                            if (myResult[i].id == selectedPrgArr[j]) {\n                                var txt = JSON.stringify(myResult[i]);\n                                zip.file(selectedPrgArrText[i] + \"_\" + parseInt(i + 1) + \".txt\", txt);\n\n                            }\n                        }\n                        if (i == myResult.length - 1) {\n                            zip.generateAsync({\n                                type: \"blob\"\n                            }).then(function (content) {\n                                FileSaver.saveAs(content, \"download.zip\");\n                            });\n                            this.setState({\n                                message: `${DATA_EXPORT_SUCCESS}`\n                            })\n                        }\n                    }\n\n\n                }.bind(this);\n            }.bind(this)\n        }\n    }\n}\n\n","import axios from \"axios\"\nimport { API_URL } from '../Constants.js'\n\nclass MasterSyncService {\n    getLanguageListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getLanguageListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getCountryListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getCountryListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getCurrencyListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getCurrencyListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getUnitListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getUnitListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getUnitTypeList() {\n        return axios.get(`${API_URL}/api/getUnitTypeListForSync`, {\n        });\n    }\n\n    getOrganisationListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getOrganisationListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getHealthAreaListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getHealthAreaListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getRegionListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getRegionListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getFundingSourceListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getFundingSourceListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n    getSubFundingSourceListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getSubFundingSourceListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getProductListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getProductListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getProductCategoryListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getProductCategoryListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getDataSourceListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getDataSourceListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getDataSourceTypeListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getDataSourceTypeListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getShipmentStatusListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getShipmentStatusListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getShipmentStatusAllowedListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getShipmentStatusAllowedListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getPlanningUnitListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getPlanningUnitListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getLogisticsUnitListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getLogisticsUnitListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getManufacturerListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getManufacturerListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n\n}\nexport default new MasterSyncService()","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport moment from 'moment';\nimport MasterSyncService from '../../api/MasterSyncService.js';\n\n\nexport default class SyncMasterDataComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            totalMasters: 19,\n            syncedMasters: 0,\n            syncedPercentage: 0\n        }\n        this.syncMasters = this.syncMasters.bind(this);\n    }\n\n    componentDidMount() {\n        this.syncMasters();\n    }\n\n    render() {\n        return (\n            <>\n                {this.state.message}\n                <div class=\"panel panel-default\">\n                    <div class=\"panel-heading ui-draggable-handle\">\n                        <h3 class=\"panel-title\">Master data sync</h3>\n                    </div>\n                    <div class=\"panel-body\">\n                        <div class=\"progress\">\n                            <div class=\"progress\">\n                                <div class=\"progress-bar progress-bar-success\" role=\"progressbar\" aria-valuenow={this.state.syncedPercentage} aria-valuemin=\"0\" aria-valuemax=\"100\" style={{ 'width': `${this.state.syncedPercentage}%` }}>\n                                    {this.state.syncedPercentage}% (Synced {this.state.syncedMasters} 0f {this.state.totalMasters} masters)\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    }\n\n    syncMasters() {\n        var db1;\n        var storeOS;\n        var openRequest = indexedDB.open('fasp', 1);\n        openRequest.onupgradeneeded = function (e) {\n            var db1 = e.target.result;\n            if (!db1.objectStoreNames.contains('programData')) {\n                storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('lastSyncDate')) {\n                storeOS = db1.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('language')) {\n                storeOS = db1.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('country')) {\n                storeOS = db1.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('currency')) {\n                storeOS = db1.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('unit')) {\n                storeOS = db1.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('unitType')) {\n                storeOS = db1.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('organisation')) {\n                storeOS = db1.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('healthArea')) {\n                storeOS = db1.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('region')) {\n                storeOS = db1.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('fundingSource')) {\n                storeOS = db1.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('subFundingSource')) {\n                storeOS = db1.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('product')) {\n                storeOS = db1.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('productCategory')) {\n                storeOS = db1.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('dataSource')) {\n                storeOS = db1.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('dataSourceType')) {\n                storeOS = db1.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('shipmentStatus')) {\n                storeOS = db1.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('shipmentStatusAllowed')) {\n                storeOS = db1.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('manufacturer')) {\n                storeOS = db1.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('logisticsUnit')) {\n                storeOS = db1.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('planningUnit')) {\n                storeOS = db1.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n            }\n        };\n        openRequest.onsuccess = function (e) {\n            db1 = e.target.result;\n            var transaction = db1.transaction(['lastSyncDate'], 'readwrite');\n            var lastSyncDateTransaction = transaction.objectStore('lastSyncDate');\n            var updatedSyncDate = moment(new Date()).format('YYYY-MM-DD HH:mm');\n            var lastSyncDateRequest = lastSyncDateTransaction.get(1);\n            lastSyncDateRequest.onsuccess = function (event) {\n                var lastSyncDate = lastSyncDateRequest.result;\n                console.log(lastSyncDate);\n                if (lastSyncDate == undefined) {\n                    lastSyncDate = null;\n                }\n                AuthenticationService.setupAxiosInterceptors();\n\n                //Code to Sync Country list\n                MasterSyncService.getCountryListForSync(lastSyncDate)\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var countryTransaction = db1.transaction(['country'], 'readwrite');\n                        var countryObjectStore = countryTransaction.objectStore('country');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for country\")\n                            countryObjectStore.put(json[i]);\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        });\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n                // Code to Sync Currency list\n                MasterSyncService.getCurrencyListForSync(lastSyncDate)\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var currencyTransaction = db1.transaction(['currency'], 'readwrite');\n                        var currencyObjectStore = currencyTransaction.objectStore('currency');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for currency\")\n                            currencyObjectStore.put(json[i]);\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        });\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n                // Code to sync unit list\n                MasterSyncService.getUnitListForSync(lastSyncDate)\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var unitTransaction = db1.transaction(['unit'], 'readwrite');\n                        var unitObjectStore = unitTransaction.objectStore('unit');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for unit\")\n                            unitObjectStore.put(json[i]);\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        });\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n                //Code to Sync UnitType list\n                MasterSyncService.getUnitTypeList()\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var unitTypeTransaction = db1.transaction(['unitType'], 'readwrite');\n                        var unitTypeObjectStore = unitTypeTransaction.objectStore('unitType');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for unitType\")\n                            unitTypeObjectStore.put(json[i]);\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        });\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n                //Code to Sync Organisation list\n                MasterSyncService.getOrganisationListForSync(lastSyncDate)\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var organisationTransaction = db1.transaction(['organisation'], 'readwrite');\n                        var organisationObjectStore = organisationTransaction.objectStore('organisation');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for organisation\")\n                            organisationObjectStore.put(json[i]);\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        });\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n                //Code to Sync HealthArea list\n                MasterSyncService.getHealthAreaListForSync(lastSyncDate)\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var healthAreaTransaction = db1.transaction(['healthArea'], 'readwrite');\n                        var healthAreaObjectStore = healthAreaTransaction.objectStore('healthArea');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for healthArea\")\n                            healthAreaObjectStore.put(json[i]);\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        });\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n                //Code to Sync Region list\n                MasterSyncService.getRegionListForSync(lastSyncDate)\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var regionTransaction = db1.transaction(['region'], 'readwrite');\n                        var regionObjectStore = regionTransaction.objectStore('region');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for region\")\n                            regionObjectStore.put(json[i]);\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        });\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n                //Code to Sync FundingSource list\n                MasterSyncService.getFundingSourceListForSync(lastSyncDate)\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var fundingSourceTransaction = db1.transaction(['fundingSource'], 'readwrite');\n                        var fundingSourceObjectStore = fundingSourceTransaction.objectStore('fundingSource');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for fundingSource\")\n                            fundingSourceObjectStore.put(json[i]);\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        });\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n                //Code to Sync SubFundingSource list\n                MasterSyncService.getSubFundingSourceListForSync(lastSyncDate)\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var subFundingSourceTransaction = db1.transaction(['subFundingSource'], 'readwrite');\n                        var subFundingSourceObjectStore = subFundingSourceTransaction.objectStore('subFundingSource');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for subFundingSource\")\n                            subFundingSourceObjectStore.put(json[i]);\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        });\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n                //Code to Sync Product list\n                MasterSyncService.getProductListForSync(lastSyncDate)\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var productTransaction = db1.transaction(['product'], 'readwrite');\n                        var productObjectStore = productTransaction.objectStore('product');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for product\")\n                            productObjectStore.put(json[i]);\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        });\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n                //Code to Sync ProductCategory list\n                MasterSyncService.getProductCategoryListForSync(lastSyncDate)\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var productCategoryTransaction = db1.transaction(['productCategory'], 'readwrite');\n                        var productCategoryObjectStore = productCategoryTransaction.objectStore('productCategory');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for productCategory\")\n                            productCategoryObjectStore.put(json[i]);\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        });\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n                //Code to Sync DataSource list\n                MasterSyncService.getDataSourceListForSync(lastSyncDate)\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var dataSourceTransaction = db1.transaction(['dataSource'], 'readwrite');\n                        var dataSourceObjectStore = dataSourceTransaction.objectStore('dataSource');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for dataSource\")\n                            dataSourceObjectStore.put(json[i]);\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        });\n\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n                //Code to Sync DataSourceType list\n                MasterSyncService.getDataSourceTypeListForSync(lastSyncDate)\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var dataSourceTypeTransaction = db1.transaction(['dataSourceType'], 'readwrite');\n                        var dataSourceTypeObjectStore = dataSourceTypeTransaction.objectStore('dataSourceType');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for dataSourceType\")\n                            dataSourceTypeObjectStore.put(json[i]);\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        });\n\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n                //Code to Sync ShipmentStatus list\n                MasterSyncService.getShipmentStatusListForSync(lastSyncDate)\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var shipmentStatusTransaction = db1.transaction(['shipmentStatus'], 'readwrite');\n                        var shipmentStatusObjectStore = shipmentStatusTransaction.objectStore('shipmentStatus');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for shipmentStatus\")\n                            shipmentStatusObjectStore.put(json[i]);\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        });\n\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n                //Code to Sync ShipmentStatusAllowed list\n                MasterSyncService.getShipmentStatusAllowedListForSync(lastSyncDate)\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var shipmentStatusAllowedTransaction = db1.transaction(['shipmentStatusAllowed'], 'readwrite');\n                        var shipmentStatusAllowedObjectStore = shipmentStatusAllowedTransaction.objectStore('shipmentStatusAllowed');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for shipmentStatusAllowed\")\n                            shipmentStatusAllowedObjectStore.put(json[i]);\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        });\n\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n\n                //Code to Sync LogisticsUnit list\n                MasterSyncService.getLogisticsUnitListForSync(lastSyncDate)\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var logisticsUnitTransaction = db1.transaction(['logisticsUnit'], 'readwrite');\n                        var logisticsUnitObjectStore = logisticsUnitTransaction.objectStore('logisticsUnit');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for logisticsUnit\")\n                            logisticsUnitObjectStore.put(json[i]);\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        });\n\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n                //Code to Sync PlanningUnit list\n                MasterSyncService.getPlanningUnitListForSync(lastSyncDate)\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var planningUnitTransaction = db1.transaction(['planningUnit'], 'readwrite');\n                        var planningUnitObjectStore = planningUnitTransaction.objectStore('planningUnit');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for planningUnit\")\n                            planningUnitObjectStore.put(json[i]);\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        });\n\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n                //Code to Sync Manufacturer list\n                MasterSyncService.getManufacturerListForSync(lastSyncDate)\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var manufacturerTransaction = db1.transaction(['manufacturer'], 'readwrite');\n                        var manufacturerObjectStore = manufacturerTransaction.objectStore('manufacturer');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for manufacturer\")\n                            manufacturerObjectStore.put(json[i]);\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        });\n\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n                MasterSyncService.getLanguageListForSync(lastSyncDate)\n                    .then(response => {\n                        console.log(response.data)\n                        var json = response.data;\n                        var languageTransaction = db1.transaction(['language'], 'readwrite');\n                        var languageObjectStore = languageTransaction.objectStore('language');\n                        for (var i = 0; i < json.length; i++) {\n                            console.log(\"in for language\")\n                            languageObjectStore.put(json[i]);\n                        }\n                        var transaction = db1.transaction(['lastSyncDate'], 'readwrite');\n                        var lastSyncDateTransaction = transaction.objectStore('lastSyncDate');\n                        var updatedLastSyncDateJson = {\n                            lastSyncDate: updatedSyncDate,\n                            id: 1\n                        }\n                        var updateLastSyncDate = lastSyncDateTransaction.put(updatedLastSyncDateJson)\n                        updateLastSyncDate.onsuccess = function (event) {\n                            console.log(\"in success\");\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n                this.setState({\n                    syncedMasters: this.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                })\n            }.bind(this)\n        }.bind(this)\n\n    }\n}","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass RegionService {\n\n    addRegion(json) {\n        console.log(json);\n        return axios.put(`${API_URL}/api/addRegion/`, json, {}\n        );\n    }\n\n    getRegionList() {\n        return axios.get(`${API_URL}/api/getRegionList/`, {\n        });\n    }\n    editRegion(json) {\n        return axios.put(`${API_URL}/api/editRegion/`, json, {}\n        );\n    }\n\n}\nexport default new RegionService();","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport CountryService from \"../../api/CountryService\";\nimport RegionService from \"../../api/RegionService\";\nimport UserService from \"../../api/UserService\";\nimport * as labels from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class AddRegionComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            countries: [],\n            realms: [],\n            region: {\n                label: {\n\n                },\n                realmCountry: {\n\n                }\n            },\n            selCountries:[],\n            message: ''\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n        this.getCountryListByRealmId = this.getCountryListByRealmId.bind(this);\n    }\n    dataChange(event) {\n        let { region } = this.state\n        if (event.target.name === \"region.label.label_en\") {\n            region.label.label_en = event.target.value\n        } else if (event.target.name === \"region.realmCountry.realmCountryId\") {\n            region.realmCountry.realmCountryId = event.target.value\n        }\n        this.setState({\n            region\n        }, (\n        ) => {\n            console.log(\"state after update---\", this.state.region)\n        })\n    }\n\n\n    componentDidMount() {\n        console.log(\"check---\" + AuthenticationService.checkTypeOfSession());\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        CountryService.getRealmCountryList()\n            .then(response => {\n                console.log(\"country list---\", response.data);\n                this.setState({\n                    countries: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRealmList()\n            .then(response => {\n                console.log(\"realm list---\", response.data);\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#regionForm\").validate({\n            ignore: [],\n            rules: {\n                'region.label.label_en': {\n                    required: true\n                },\n                'region.realmCountry.realmCountryId': {\n                    required: true\n                },\n                'region.realm.realmId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { selCountries } = this.state;\n        const { realms } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.label_pr !== null && item.label.label_pr !== \"\" ? item.label.label_pr : item.label.label_en);\n                                case 3: return (item.label.label_fr !== null && item.label.label_fr !== \"\" ? item.label.label_fr : item.label.label_en);\n                                case 4: return (item.label.label_sp !== null && item.label.label_sp !== \"\" ? item.label.label_sp : item.label.label_en);\n                                default: return item.label.label_en;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n\n        let countryList = selCountries.length > 0\n            && selCountries.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmCountryId}>\n                        {item.country.label.label_en}\n                    </option>\n                )\n            }, this);\n        return (\n            <div class=\"page-container page-navigation-toggled page-container-wide\">\n                <div class=\"page-content\">\n                    <ul class=\"breadcrumb\">\n                        <li><a href=\"#\">Home</a></li>\n                        <li><a href=\"#\">Admin</a></li>\n                        <li><a href=\"#\">Region</a></li>\n                        <li><a href=\"#\">Add Region</a></li>\n                    </ul>\n                    <div class=\"page-content-wrap\">\n                        <div><h5>{this.state.message}</h5></div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n\n                                <form name=\"regionForm\" id=\"regionForm\" class=\"form-horizontal\">\n                                    <div class=\"panel panel-default\">\n                                        <div class=\"panel-heading\">\n                                            <h3 class=\"panel-title\">{labels.TITLE_ADD_REGION}</h3>\n                                        </div>\n                                        <div class=\"panel-body\">\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.REALM}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"region.realm.realmId\" class=\"form-control select\" data-live-search=\"true\" name=\"region.realm.realmId\" onChange={this.dataChange, this.getCountryListByRealmId}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {realmList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.COUNTRY}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"region.realmCountry.realmCountryId\" class=\"form-control select\" data-live-search=\"true\" name=\"region.realmCountry.realmCountryId\" onChange={this.dataChange}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {countryList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.REGION_NAME_ENG}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"region.label.label_en\" class=\"form-control\" name=\"region.label.label_en\" onChange={this.dataChange} />\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"panel-footer\">\n                                            <div class=\"pull-right\">\n                                                <button type=\"button\" className=\"btn btn-success\" onClick={this.submitClicked}>{labels.BTN_SUBMIT}</button>\n                                                <button type=\"button\" className=\"btn btn-danger\" onClick={this.cancelClicked}>{labels.BTN_CANCEL}</button><br></br><br></br>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    getCountryListByRealmId(event) {\n        console.log(\"realm id---\" + event.target.value);\n        console.log(this.state.countries);\n        let realmId = event.target.value;\n        const selCountries = this.state.countries.filter(c => c.realm.realmId == realmId)\n        console.log(\"selCountries---\", selCountries);\n\n        this.setState({\n            selCountries:selCountries\n        });\n    }\n    submitClicked() {\n        console.log($(\"#countryIds\").val())\n        if (navigator.onLine) {\n            console.log(\"check---\" + AuthenticationService.checkTypeOfSession());\n            if (AuthenticationService.checkTypeOfSession()) {\n                console.log(\"state---\" + this.state.region);\n                if ($(\"#regionForm\").valid()) {\n                    // var json = {\n                    //     label: {\n                    //         label_en: $(\"#region\\\\.label\\\\.label_en\").val()\n                    //     },\n                    //     country: $(\"#roles\").val(),\n                    //     language: {\n                    //         languageId: $(\"#languageId\").val()\n                    //     },\n                    //     countryIds: $(\"#countryIds\").val()\n                    // }\n                    console.log(this.state.region);\n                    RegionService.addRegion(this.state.region)\n                        .then(response => {\n                            this.props.history.push(`/regionList/${response.data.message}`)\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline or vice versa.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/regionList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport CountryService from \"../../api/CountryService\";\nimport RegionService from \"../../api/RegionService\";\nimport UserService from \"../../api/UserService\";\nimport * as labels from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class EditRegionComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            countries: [],\n            realms: [],\n            region: this.props.location.state.region,\n            message: ''\n        }\n        this.updateClicked = this.updateClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n        this.getCountryListByRealmId = this.getCountryListByRealmId.bind(this);\n        this.realmOnChangeEvent = this.realmOnChangeEvent.bind(this);\n    }\n\n    realmOnChangeEvent(event) {\n        this.dataChange(event);\n        this.getCountryListByRealmId(event.target.value);\n    }\n    dataChange(event) {\n        let { region } = this.state\n        if (event.target.name === \"region.label.label_en\") {\n            region.label.label_en = event.target.value\n        } else if (event.target.name === \"region.realmCountry.realmCountryId\") {\n            region.realmCountry.realmCountryId = event.target.value\n        }\n        else if (event.target.name === \"region.realmCountry.realm.realmId\") {\n            region.realmCountry.realm.realmId = event.target.value\n        }\n        else if (event.target.name === \"region.active\") {\n            region.active = event.target.id === \"region.active2\" ? false : true\n        }\n        this.setState({\n            region\n        }, (\n        ) => {\n            console.log(\"state after update---\", this.state.region)\n        })\n    }\n\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        CountryService.getRealmCountryList()\n            .then(response => {\n                console.log(\"country list---\", response.data);\n                this.setState({\n                    countries: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRealmList()\n            .then(response => {\n                console.log(\"realm list---\", response.data);\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#regionForm\").validate({\n            ignore: [],\n            rules: {\n                'region.label.label_en': {\n                    required: true\n                },\n                'region.realmCountry.realmCountryId': {\n                    required: true\n                },\n                'region.realmCountry.realm.realmId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { countries } = this.state;\n        const { realms } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.label_pr !== null && item.label.label_pr !== \"\" ? item.label.label_pr : item.label.label_en);\n                                case 3: return (item.label.label_fr !== null && item.label.label_fr !== \"\" ? item.label.label_fr : item.label.label_en);\n                                case 4: return (item.label.label_sp !== null && item.label.label_sp !== \"\" ? item.label.label_sp : item.label.label_en);\n                                default: return item.label.label_en;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n\n        let countryList = countries.length > 0\n            && countries.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmCountryId}>\n                        {item.country.label.label_en}\n                    </option>\n                )\n            }, this);\n        return (\n            <div class=\"page-container page-navigation-toggled page-container-wide\">\n                <div class=\"page-content\">\n                    <ul class=\"breadcrumb\">\n                        <li><a href=\"#\">Home</a></li>\n                        <li><a href=\"#\">Admin</a></li>\n                        <li><a href=\"#\">Region</a></li>\n                        <li><a href=\"#\">Update Region</a></li>\n                    </ul>\n                    <div class=\"page-content-wrap\">\n                        <div><h5>{this.state.message}</h5></div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n\n                                <form name=\"regionForm\" id=\"regionForm\" class=\"form-horizontal\">\n                                    <div class=\"panel panel-default\">\n                                        <div class=\"panel-heading\">\n                                            <h3 class=\"panel-title\">{labels.TITLE_EDIT_REGION}</h3>\n                                        </div>\n                                        <div class=\"panel-body\">\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.REALM}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"region.realmCountry.realm.realmId\" class=\"form-control select\" data-live-search=\"true\" name=\"region.realmCountry.realm.realmId\" onChange={this.realmOnChangeEvent} value={this.state.region.realmCountry.realm.realmId}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {realmList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.COUNTRY}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"region.realmCountry.realmCountryId\" class=\"form-control select\" data-live-search=\"true\" name=\"region.realmCountry.realmCountryId\" onChange={this.dataChange} value={this.state.region.realmCountry.realmCountryId}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {countryList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.REGION_NAME_ENG}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"region.label.label_en\" class=\"form-control\" name=\"region.label.label_en\" onChange={this.dataChange} value={this.state.region.label.label_en} />\n                                                </div>\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label className=\"col-md-4 control-label\">{labels.ACTIVE}</label>\n                                                <div className=\"col-md-8\">\n                                                    <input type=\"radio\" id=\"region.active1\" name=\"region.active\" value={true} checked={this.state.region.active === true} onChange={this.dataChange} /> Active\n                                                            <input type=\"radio\" id=\"region.active2\" name=\"region.active\" value={false} checked={this.state.region.active === false} onChange={this.dataChange} /> Disabled\n                                                        </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"panel-footer\">\n                                            <div class=\"pull-right\">\n                                                <button type=\"button\" className=\"btn btn-success\" onClick={this.updateClicked}>{labels.BTN_UPDATE}</button>\n                                                <button type=\"button\" className=\"btn btn-danger\" onClick={this.cancelClicked}>{labels.BTN_CANCEL}</button><br></br><br></br>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    getCountryListByRealmId(realmId) {\n        CountryService.getRealmCountryListByRealmId(realmId !== \"\" ? realmId : 0)\n            .then(response => {\n                this.setState({\n                    countries: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n    }\n    updateClicked() {\n        console.log($(\"#countryIds\").val())\n        if (navigator.onLine) {\n            console.log(\"check---\" + AuthenticationService.checkTypeOfSession());\n            if (AuthenticationService.checkTypeOfSession()) {\n                console.log(\"state---\" + this.state.region);\n                if ($(\"#regionForm\").valid()) {\n                    console.log(this.state.region);\n                    RegionService.editRegion(this.state.region)\n                        .then(response => {\n                            this.props.history.push(`/regionList/${response.data.message}`)\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline or vice versa.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/regionList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport UserService from \"../../api/UserService.js\";\nimport RegionService from \"../../api/RegionService.js\";\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as labels from '../../Labels.js'\n\n\nexport default class RegionListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            regions: [],\n            message: \"\"\n        }\n        this.editRegion = this.editRegion.bind(this);\n        this.addRegion = this.addRegion.bind(this);\n    }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        RegionService.getRegionList()\n            .then(response => {\n                console.log(\"rol list---\" + response.data);\n                this.setState({\n                    regions: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    render() {\n        return (\n            <div className=\"regionList\">\n                <p>{this.props.match.params.message}</p>\n                <h3>{this.state.message}</h3>\n                <div>{labels.TITLE_REGION_LIST}</div>\n                <button className=\"btn btn-add\" type=\"button\" style={{ marginLeft: '-736px' }} onClick={this.addRegion}>{labels.TITLE_ADD_REGION}</button><br /><br />\n                <table border=\"1\" align=\"center\">\n                    <thead>\n                        <tr>\n                            <th>Region</th>\n                            <th>Country</th>\n                            <th>Realm</th>\n                            <th>Status</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.regions.map(region =>\n                                <tr key={region.regionId} onClick={() => this.editRegion(region)}>\n                                    <td>{region.label.label_en}</td>\n                                    <td>{region.realmCountry.country.label.label_en}</td>\n                                    <td>{region.realmCountry.realm.label.label_en}</td>\n                                    <td>{region.active.toString() === \"true\" ? \"Active\" : \"Disabled\"}</td>\n                                </tr>)\n                        }\n                    </tbody>\n                </table>\n                <br />\n            </div>\n        );\n    }\n    editRegion(region) {\n        this.props.history.push({\n            pathname: \"/editRegion\",\n            state: { region: region }\n        });\n    }\n    addRegion() {\n        if (navigator.onLine) {\n            this.props.history.push(`/addRegion`);\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n\n}","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass LabelsService {\n    getLabelsListAll() {\n        return axios.get(`${API_URL}/api/getLabelsListAll/`, {\n        });\n    } \n\n    updateLabels(json) {\n        return axios.put(`${API_URL}/api/updateLabels/`, json, {}\n        );\n    }\n\n}\nexport default new LabelsService();","import React, { Component } from 'react';\nimport { Offline, Online } from \"react-detect-offline\";\nimport LabelsService from '../../api/LabelService.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class UpdateLabelsComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            label: {\n                labelId: '',\n                label_sp: '',\n                label_pr: '',\n                label_fr: '',\n                label_en: ''\n            },\n            // labelList: []\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n    }\n\n    componentDidMount() {\n\n        AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            label: this.props.location.state.label\n        });\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                'label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n                'label.label_fr': {\n                    \n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n                'label.label_sp': {\n                   \n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n                'label.label_pr': {\n                    \n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                }\n\n            }\n        });\n\n    }\n    updateFieldData(event) {\n        let { label } = this.state\n        if (event.target.name === \"label.label_en\") {\n            label.label_en = event.target.value\n        }\n        if (event.target.name === \"label.label_fr\") {\n            label.label_fr = event.target.value\n        } if (event.target.name === \"label.label_sp\") {\n            label.label_sp = event.target.value\n        } else if (event.target.name === \"label.label_pr\") {\n            label.label_pr = event.target.value\n        }\n\n\n        this.setState(\n            {\n                label\n            }\n        )\n\n    }\n\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    submitForm() {\n\n        if ($(\"#form1\").valid()) {\n            delete (this.state.label[\"createdDate\"]);\n            delete (this.state.label[\"lastModifiedDate\"]);\n            LabelsService.updateLabels(this.state.label).then(response => {\n                this.props.history.push(`/labelList/${response.data.message}`)\n            }\n            )\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                        }\n                    }\n                )\n        }\n\n\n    }\n    render() {\n\n\n        return (\n            <>\n                <div className=\"page-content-wrap\">\n                    <div className=\"row\">\n                        <div>\n                            <ul className=\"breadcrumb\">\n                                <li><a href=\"#\">Home</a></li>\n                                <li><a href=\"#\">Forms Stuff</a></li>\n                                <li className=\"active\">Form Wizards</li>\n                            </ul>\n                        </div>\n\n                        <div className=\"col-md-8 col-md-offset-2\">\n                            <div className=\"login mt-2 block\">\n                                <div className=\"panel panel-default\">\n                                    <div className=\"panel-heading\">\n                                        <h3 className=\"panel-title\">Label</h3>\n                                    </div>\n                                    <div className=\"panel-body\">\n                                        <div className=\"col-md-6 col-md-offset-3\">\n                                            <div className=\"block\">\n\n                                                <form className=\"form-horizontal\" name=\"form1\" id=\"form1\">\n\n\n                                                    {/* <div className=\"form-group\">\n                                                        <label className=\"col-md-5 control-label \">Label :</label>\n                                                        <div className=\"col-md-7\">\n                                                            <select name=\"label.labelId\" className=\"validate[required] form-control select\" id=\"formGender\" onChange={this.updateFieldData}>\n                                                                <option value=\"\">Choose option</option>\n                                                                {labelItems}\n                                                            </select>\n                                                            <span className=\"help-block\"></span>\n                                                        </div>\n                                                    </div> */}\n\n                                                    <input type=\"hidden\" id=\"oldPassword\" name=\"label.labelId\" value={this.state.label.labelId} className=\"form-control\" onChange={this.updateFieldData}></input>\n\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-5 control-label\">English  Label :</label>\n                                                        <div className=\"col-md-7\">\n                                                            <input type=\"text\" id=\"oldPassword\" name=\"label.label_en\" value={this.Capitalize(this.state.label.label_en)} className=\"form-control\" onChange={this.updateFieldData}></input>\n                                                            <span className=\"help-block\"></span>\n                                                        </div>\n                                                    </div>\n\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-5 control-label\">French Label :</label>\n                                                        <div className=\"col-md-7\">\n                                                            <input type=\"text\" id=\"oldPassword\" name=\"label.label_fr\" value={this.Capitalize(this.state.label.label_fr)} className=\"form-control\" onChange={this.updateFieldData}></input>\n                                                            <span className=\"help-block\"></span>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-5 control-label \">Spanish Label  :</label>\n                                                        <div className=\"col-md-7\">\n                                                            <input type=\"text\" id=\"oldPassword\" name=\"label.label_sp\" value={this.Capitalize(this.state.label.label_sp)} className=\"form-control\" onChange={this.updateFieldData}></input>\n                                                            <span className=\"help-block\"></span>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-5 control-label \">Portuguese Label :</label>\n                                                        <div className=\"col-md-7\">\n                                                            <input type=\"text\" id=\"oldPassword\" name=\"label.label_pr\" value={this.Capitalize(this.state.label.label_pr)} className=\"form-control\" onChange={this.updateFieldData}></input>\n                                                            <span className=\"help-block\"></span>\n                                                        </div>\n                                                    </div>\n\n\n                                                </form>\n\n                                            </div>\n                                        </div>\n\n                                    </div>\n                                    <div className=\"panel-footer\">\n\n                                        <Online>\n                                            <button type=\"button\" className=\"btn btn-primary pull-right ml-1\">cancel</button>\n                                        </Online>\n                                        <Online>\n                                            <button type=\"button\" onClick={this.submitForm} className=\"btn btn-success pull-right\">Submit</button>\n                                        </Online>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div></div></div>\n\n            </>\n        );\n\n    }\n\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport LabelsService from '../../api/LabelService.js';\n\nexport default class LabelListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            labelList: []\n        }\n        this.editLabel=this.editLabel.bind(this);\n    }\n    componentDidMount() {\n\n        AuthenticationService.setupAxiosInterceptors();\n        LabelsService.getLabelsListAll().then(response => {\n            //console.log(response.data)\n            this.setState({\n                labelList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n    }\n\n    editLabel(label){\n        this.props.history.push({\n            pathname: \"/editLabels\",\n            state: { label: label }\n        });\n\n    }\n    render() {\n\n        return (\n\n            <div className=\"page-content-wrap\">\n\n\n                <div className=\"row\">\n                    <div>\n                        <ul class=\"breadcrumb\">\n                            <li><a href=\"#\">Home</a></li>\n                            <li><a href=\"#\">Forms Stuff</a></li>\n                            <li class=\"active\">Form Wizards</li>\n\n\n                        </ul>\n                    </div>\n\n                    <div className=\"col-md-8 col-md-offset-2\">\n\n                        <div className=\"mt-2\">\n\n\n                            <div className=\"panel panel-default\">\n\n\n                                <div className=\"panel-heading\">\n                                    <h3 className=\"panel-title\">Label List</h3>\n                                </div>\n                                <div className=\"panel-body\">\n                                    <div className=\"col-md-12\">\n\n\n\n                                        <div className=\"table-responsive\">\n                                            <table className=\"table datatable\">\n                                                <thead>\n                                                    <tr>\n                                                        <th>LABEL_EN</th>\n                                                        <th>LABEL_FR</th>\n                                                        <th>LABEL_PR</th>\n                                                        <th>LABEL_SP</th>\n                                                        {/* <th>ACTIVE</th> */}\n                                                        <th>CREATED DATE</th>\n                                                         <th>MODIFIED DATE</th>\n\n\n\n                                                    </tr>\n                                                </thead>\n                                                <tbody>\n                                                    {\n                                                        this.state.labelList.map(label =>\n\n                                                            <tr key={label.labelId} onClick={() => this.editLabel(label)}>\n                                                                <td>{label.label_en}</td>\n                                                                <td>{label.label_fr}</td>\n                                                                <td>{label.label_pr}</td>\n                                                                <td>{label.label_sp}</td>\n                                                                \n                                                                {/* <td>{label.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}</td> */}\n                                                                <td>{label.createdDate}</td> \n                                                                 <td>{label.lastModifiedDate}</td>\n                                                            </tr>\n                                                        )\n\n                                                    }\n                                                </tbody>\n                                            </table>\n                                        </div>\n\n                                    </div>\n\n                                </div>\n\n\n\n                            </div>\n\n\n                        </div>\n\n\n                    </div>\n\n\n                </div>\n\n\n            </div>\n\n        );\n\n    }\n\n}","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass UnitTypeSerice {\n\n    addUniType(json) {\n        return axios.put(`${API_URL}/api/addUnitType/`, json, {\n        });\n    }\n\n    getUnitTypeListAll() {\n        return axios.get(`${API_URL}/api/unitTypeList/`, {\n        });\n    } \n\n    updateUnitType(json) {\n        return axios.put(`${API_URL}/api/editUnitType/`, json, {\n        });\n    }\n}\n\nexport default new UnitTypeSerice()","import React, { Component } from 'react';\nimport * as myConst from '../../Labels.js';\nimport UnitTypeService from '../../api/UnitTypeService.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class AddUnitTypeComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            unitType: {\n                label: {\n                    label_en: ''\n                }\n            }\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.Capitalize = this.Capitalize.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        $(\"#unitTypeForm\").validate({\n            ignore: [],\n            rules: {\n                'label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n    updateFieldData(event) {\n        let { unitType } = this.state\n        if (event.target.name === \"label.label_en\") {\n            //console.log(\"inside if\")\n            unitType.label.label_en = event.target.value\n        }\n        this.setState(\n            {\n                unitType\n            }\n        )\n    }\n\n    submitForm() {\n        if ($(\"#unitTypeForm\").valid()) {\n            UnitTypeService.addUniType(this.state.unitType).then(response => {\n                this.props.history.push(`/unitTypeList/${response.data.message}`)\n                console.log(\"success\");\n            }\n            )\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.response.data.message\n                                })\n                                break\n                        }\n                    }\n                )\n        }\n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    render() {\n        return (\n            <>\n                <h3>Add Unit Type</h3>\n                <form name=\"unitTypeForm\" id=\"unitTypeForm\">\n                    <div>\n                        <label>Unit Type:-</label>\n                        <input type=\"text\" name=\"label.label_en\" value={this.Capitalize(this.state.unitType.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n        );\n    }\n} ","import React, { Component } from 'react';\nimport UnitTypeService from '../../api/UnitTypeService.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\n\n\nexport default class UnitTypeListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            unitTypeList: []\n        }\n        this.addNewUnitType = this.addNewUnitType.bind(this);\n        this.editUnitType = this.editUnitType.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        UnitTypeService.getUnitTypeListAll().then(response => {\n            console.log(response.data)\n            this.setState({\n                unitTypeList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    editUnitType(unitType) {\n        this.props.history.push({\n            pathname: \"/editUnitType\",\n            state: { unitType: unitType }\n        });\n    }\n\n    addNewUnitType() {\n        if (navigator.onLine) {\n            this.props.history.push(`/addUnitType`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n    }\n    render() {\n\n        return (\n            <>\n                <p>{this.props.match.params.message}</p>\n                <div>\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewUnitType}>{myConst.ADD_NEW_UNIT_TYPE}</button><br /><br />\n                </div>\n\n                <div className=\"unitTypeList\">\n\n                    <h1>{myConst.UNIT_TYPE_LIST}</h1>\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.UNIT_TYPE_NAME_EN}</th>\n                                <th>{myConst.UNIT_TYPE_NAME_FR}</th>\n                                <th>{myConst.UNIT_TYPE_NAME_SP}</th>\n                                <th>{myConst.UNIT_TYPE_NAME_PO}</th>\n                                <th>{myConst.CREATED_DATE}</th>\n                                <th>{myConst.LAST_MODIFIED_DATE}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.unitTypeList.map(unityType =>\n\n                                    <tr key={unityType.unitTypeId} onClick={() => this.editUnitType(unityType)}>\n                                        <td>{unityType.label.label_en}</td>\n                                        <td>{unityType.label.label_fr}</td>\n                                        <td>{unityType.label.label_sp}</td>\n                                        <td>{unityType.label.label_pr}</td>\n                                        <td>{unityType.createdDate}</td>\n                                        <td>{unityType.lastModifiedDate}</td>\n                                        {/* <td>{dataSourceType.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}</td> */}\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n\n            </>\n        );\n    }\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport UnitTypeService from '../../api/UnitTypeService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\n\nexport default class UpdateUnitTypeComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            unitType: {\n                unitTypeId: '',\n                label: {\n                    labelId: '',\n                    label_en: ''\n                }\n            }\n        }\n        this.Capitalize = this.Capitalize.bind(this);\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        console.log(this.props.location.state.unitType);\n        this.setState({\n            unitType: this.props.location.state.unitType\n        });\n        $(\"#updateUnitTypeForm\").validate({\n            ignore: [],\n            rules: {\n                'unitType.label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    updateFieldData(event) {\n        let { unitType } = this.state\n        if (event.target.name === \"unitType.label.label_en\") {\n            //console.log(\"inside if\")\n            unitType.label.label_en = event.target.value\n        }\n        this.setState(\n            {\n                unitType\n            }\n        )\n\n    }\n\n    updateForm() {\n        if ($(\"#updateUnitTypeForm\").valid()) {\n            delete (this.state.unitType[\"createdDate\"]);\n            delete (this.state.unitType[\"lastModifiedDate\"]);\n            console.log(this.state);\n            UnitTypeService.updateUnitType(this.state.unitType).then(response => {\n                this.props.history.push(`/unitTypeList/${response.data.message}`)\n                console.log(\"success\");\n            }\n            )\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                        }\n                    }\n                )\n        }\n    }\n\n    cancelClicked() {\n        this.props.history.push(`/unitTypeList/` + \"Action Canceled\")\n    }\n\n    render() {\n\n        return (\n            <>\n                <h3>{myConst.UPDATE_UNIT_TYPE}</h3>\n                <form name=\"updateUnitTypeForm\" id=\"updateUnitTypeForm\">\n                    <div>\n                        <label>{myConst.UNIT_TYPE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"unitType.label.label_en\" value={this.Capitalize(this.state.unitType.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/*                   \n                    <div>\n                        {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"dataSourceType.active1\" name=\"dataSourceType.active\" value={true} checked={this.state.dataSourceType.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"dataSourceType.active2\" name=\"dataSourceType.active\" value={false} checked={this.state.dataSourceType.active === false} onChange={this.updateFieldData} /> Disabled\n                     </div> */}\n\n                    <div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                        <button type=\"button\" onClick={this.cancelClicked}>{myConst.BTN_CANCEL}</button><br></br><br></br>\n                    </div>\n                </form>\n\n\n            </>\n\n        );\n    }\n}","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport IdleTimer from 'react-idle-timer';\nimport WelcomeComponent from \"../home/WelcomeComponent\";\n// import { IdleTimeOutModal } from './IdleModal.js';\nimport PropTypes from 'prop-types';\nimport '../../css/bootstrap/bootstrap.min.css';\nimport '../../css/theme-default.css';\nimport '../../css/custom.css';\n\n\nimport '../../css/mcustomscrollbar/jquery.mCustomScrollbar.css';\n//import  action from '../../Js/actions.js'\nimport '../../App.css'\nimport AddUserComponent from \"../user/AddUserComponent.jsx\";\nimport UserListComponent from \"../user/UserListComponent.jsx\";\nimport EditUserComponent from \"../user/EditUserComponent.jsx\";\nimport ChangePasswordComponent from \"../home/ChangePasswordComponent.jsx\";\nimport LoginComponent from \"../home/LoginComponent.jsx\";\nimport RoleListComponent from \"../user/RoleListComponent.jsx\";\nimport AddRoleComponent from \"../user/AddRoleComponent.jsx\";\nimport EditRoleComponent from \"../user/EditRoleComponent.jsx\";\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport AddLanguageComponent from '../language/AddLanguageComponent'\nimport LanguageListComponent from \"../language/LanguageListComponent.jsx\"\nimport EditLanguageComponent from \"../language/EditLanguageComponent.jsx\"\nimport AddDataSourceTypeComponent from \"../datasourceType/AddDataSourceTypeComponent.jsx\"\nimport DataSourceTypeListComponent from \"../datasourceType/DataSourceTypeListComponent.jsx\"\nimport UpdateDataSourceTypeComponent from \"../datasourceType/UpdateDataSourceTypeComponent.jsx\"\nimport AddDataSource from \"../dataSource/AddDataSource.jsx\"\nimport DataSourceListComponent from \"../dataSource/DataSourceListComponent.jsx\"\nimport UpdateDataSourceComponent from \"../dataSource/UpdateDataSourceComponent.jsx\"\nimport AddCurrencyComponent from \"../currency/AddCurrencyComponent.jsx\"\nimport CurrencyListComponent from \"../currency/CurrencyListComponent.jsx\"\nimport UpdateCurrencyComponent from \"../currency/UpdateCurrencyComponent.jsx\"\nimport AddCountryComponent from \"../country/AddCountryComponent.jsx\"\nimport CountryListComponent from \"../country/CountryListComponent.jsx\"\nimport UpdateCountryComponent from \"../country/UpdateCountryComponent.jsx\"\nimport AddShipmentStatusComponent from \"../shipmentStatus/AddShipmentStatusComponent.jsx\"\nimport ShipmentStatusListComponent from \"../shipmentStatus/ShipmentStatusListComponent.jsx\"\nimport UpdateShipmentStatusComponent from \"../shipmentStatus/UpdateShipmentStatusComponent.jsx\"\nimport DownloadProgramDataComponent from '../program/DownloadProgramDataComponent';\nimport ImportProgramDataComponent from '../program/ImportProgramDataComponent';\nimport ExportProgramDataComponent from '../program/ExportProgramDataComponent';\nimport SyncMasterDataComponent from '../masterSync/SyncMasterDataComponent';\nimport AddRegionComponent from '../region/AddRegionComponent';\nimport EditRegionComponent from '../region/EditRegionComponent';\nimport RegionListComponent from '../region/RegionListComponent';\nimport UpdateLabelsComponent from '../label/UpdateLabelsComponent.jsx';\nimport LabelListComponent from '../label/LabelListComponent.jsx';\nimport AddUnitTypeComponent from '../unitType/AddUnitTypeComponent.jsx';\nimport UnitTypeListComponent from '../unitType/UnitTypeListComponent.jsx';\nimport UpdateUnitTypeComponent from '../unitType/UpdateUnityTypeComponent.jsx';\n\n\nclass Layout extends React.Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            timeout: AuthenticationService.checkSessionTimeOut(),\n            showModal: false,\n            userLoggedIn: false,\n            isTimedOut: false\n        }\n\n        this.idleTimer = null\n        this.onAction = this._onAction.bind(this)\n        this.onActive = this._onActive.bind(this)\n        this.onIdle = this._onIdle.bind(this)\n        this.handleClose = this.handleClose.bind(this)\n        this.handleLogout = this.handleLogout.bind(this)\n    }\n\n    _onAction(e) {\n      console.log('user did something', e)\n      this.setState({isTimedOut: false})\n    }\n   \n    _onActive(e) {\n      console.log('user is active', e)\n      this.setState({isTimedOut: false})\n    }\n   \n    _onIdle(e) {\n      console.log('user is idle', e)\n      const isTimedOut = this.state.isTimedOut\n      if (isTimedOut) {\n          this.props.history.push('/')\n      } else {\n        this.setState({showModal: true})\n        this.idleTimer.reset();\n        this.setState({isTimedOut: true})\n      }\n      \n    }\n\n    handleClose() {\n      this.setState({showModal: false})\n    }\n\n    handleLogout() {\n      this.setState({showModal: false})\n      this.props.history.push('/')\n    }\n\n    render(){\n      const { match } = this.props\n      return(\n        <>\n          <IdleTimer\n            ref={ref => { this.idleTimer = ref }}\n            element={document}\n            onActive={this.onActive}\n            onIdle={this.onIdle}\n            onAction={this.onAction}\n            debounce={250}\n            timeout={this.state.timeout} />\n\n            <div className=\"\">\n               \n            {/* {AuthenticationService.setupAxiosInterceptors()} */}\n                <Switch>\n\n                {/* <Route path=\"/\" exact component={LoginComponent} /> */}\n                <Route path=\"/login/:message\" exact component={LoginComponent} />\n                    <Route \n                        exact path={`${match.path}welcome`}\n                        render={(props) => <WelcomeComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}welcome/:message`}\n                        render={(props) => <WelcomeComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}addUser`}\n                        render={(props) => <AddUserComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}userList`}\n                        render={(props) => <UserListComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}userList/:message`}\n                        render={(props) => <UserListComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}editUser`}\n                        render={(props) => <EditUserComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}changePassword`}\n                        render={(props) => <ChangePasswordComponent {...props} /> }/>\n                    />\n                    \n                    <Route \n                        exact path={`${match.path}addRole`}\n                        render={(props) => <AddRoleComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}roleList`}\n                        render={(props) => <RoleListComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}roleList/:message`}\n                        render={(props) => <RoleListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editRole`}\n                        render={(props) => <EditRoleComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}addLanguage`}\n                        render={(props) => <AddLanguageComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editLanguage`}\n                        render={(props) => <EditLanguageComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}languageList/:message`}\n                        render={(props) => <LanguageListComponent {...props} /> }/>\n                    />\n                    \n                    <Route \n                        exact path={`${match.path}addDataSourceType`}\n                        render={(props) => <AddDataSourceTypeComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editDataSourceType`}\n                        render={(props) => <UpdateDataSourceTypeComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}dataSourceTypeList/:message`}\n                        render={(props) => <DataSourceTypeListComponent {...props} /> }/>\n                    />\n\n\n                    <Route \n                        exact path={`${match.path}addDataSource`}\n                        render={(props) => <AddDataSource {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editDataSource`}\n                        render={(props) => <UpdateDataSourceComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}dataSourceList/:message`}\n                        render={(props) => <DataSourceListComponent {...props} /> }/>\n                    />\n\n\n                    <Route \n                        exact path={`${match.path}addCurrency`}\n                        render={(props) => <AddCurrencyComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editCurrency`}\n                        render={(props) => <UpdateCurrencyComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}currencyList/:message`}\n                        render={(props) => <CurrencyListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}downloadProgramData/`}\n                        render={(props) => <DownloadProgramDataComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}importProgramData/`}\n                        render={(props) => <ImportProgramDataComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}exportProgramData/`}\n                        render={(props) => <ExportProgramDataComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}syncMasterData/`}\n                        render={(props) => <SyncMasterDataComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}addCountry`}\n                        render={(props) => <AddCountryComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}countryList/:message`}\n                        render={(props) => <CountryListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editCountry`}\n                        render={(props) => <UpdateCountryComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}addShipmentStatus`}\n                        render={(props) => <AddShipmentStatusComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}shipmentStatusListAll/:message`}\n                        render={(props) => <ShipmentStatusListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editShipmentStatus`}\n                        render={(props) => <UpdateShipmentStatusComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}addRegion`}\n                        render={(props) => <AddRegionComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}regionList`}\n                        render={(props) => <RegionListComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}regionList/:message`}\n                        render={(props) => <RegionListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editRegion`}\n                        render={(props) => <EditRegionComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editLabels`}\n                        render={(props) => <UpdateLabelsComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}labelList/:message`}\n                        render={(props) => <LabelListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}addUnitType`}\n                        render={(props) => <AddUnitTypeComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}unitTypeList/:message`}\n                        render={(props) => <UnitTypeListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editUnitType`}\n                        render={(props) => <UpdateUnitTypeComponent {...props} /> }/>\n                    />\n                </Switch>\n                \n              {/*  <IdleTimeOutModal \n                    showModal={this.state.showModal} \n                    handleClose={this.handleClose}\n                    handleLogout={this.handleLogout}\n                />*/}\n            </div>\n        </>\n      )\n   }\n\n }\n\n Layout.propTypes = {\n     match: PropTypes.any.isRequired,\n     history: PropTypes.func.isRequired\n }\n\nexport default Layout","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from '../../api/UserService'\nimport CryptoJS from 'crypto-js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\nimport { SECRET_KEY } from '../../Constants.js'\nimport jwt_decode from 'jwt-decode'\n\n\nexport default class UpdateExpiredPasswordComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\",\n            username: this.props.location.state.username\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.logoutClicked = this.logoutClicked.bind(this);\n    }\n\n\n    componentDidMount() {\n        console.log(\"username expired page---\"+this.props.location.state.username)\n        console.log(\"mount called for\");\n        // AuthenticationService.setupAxiosInterceptors();\n        $.validator.addMethod('checkPassword', function () {\n            if ($('#newPassword').val() === $('#confirmNewPassword').val()) {\n                return true;\n            } else {\n                return false;\n            }\n        }, 'The New passwords do not match.');\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                oldPassword: {\n                    required: true\n                },\n                newPassword: {\n                    required: true\n                },\n                confirmNewPassword: {\n                    required: true,\n                    checkPassword: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"login\">\n                <form name=\"form1\" id=\"form1\">\n                    <h3>Update Password</h3>\n                    Old password : <input type=\"password\" id=\"oldPassword\" name=\"oldPassword\" /><br></br><br></br>\n                    New password : <input type=\"password\" id=\"newPassword\" name=\"newPassword\" /><br></br><br></br>\n                    Confirm new password : <input type=\"password\" id=\"confirmNewPassword\" name=\"confirmNewPassword\" /><br></br><br></br>\n                    <Online><button type=\"button\" onClick={this.submitClicked}>Submit</button></Online>\n                    <Online><button type=\"button\" onClick={this.logoutClicked}>Logout</button><br></br><br></br></Online>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n\n    submitClicked() {\n        if ($(\"#form1\").valid()) {\n            if (navigator.onLine) {\n                console.log(\"state username ---\"+this.state.username)\n                UserService.updateExpiredPassword(this.state.username, $('#oldPassword').val(), $('#newPassword').val())\n                    .then(response => {\n                        console.log(response.data.data)\n                        var decoded = jwt_decode(response.data.token);\n                        localStorage.setItem('token', response.data.token);\n                        localStorage.setItem('typeOfSession', \"Online\");\n                        localStorage.setItem('userId', CryptoJS.AES.encrypt((decoded.userId).toString(), `${SECRET_KEY}`));\n                        localStorage.setItem('username', CryptoJS.AES.encrypt((decoded.sub).toString(), `${SECRET_KEY}`));\n                        localStorage.setItem('password', CryptoJS.AES.encrypt((decoded.user.password).toString(), `${SECRET_KEY}`));\n                        localStorage.setItem('languageId', CryptoJS.AES.encrypt((decoded.user.language.languageId).toString(), `${SECRET_KEY}`));\n                        this.props.history.push(`/welcome/Password updated successfully.`)\n                    })\n                    .catch(\n                        error => {\n                            console.log(error.message);\n                            console.log(error.text);\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            } else {\n                alert(\"You must be Online to update the password.\")\n            }\n        }\n    }\n\n    logoutClicked() {\n        this.props.history.push(`/login/You are logged out.`)\n    }\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from '../../api/UserService'\nimport { Online } from \"react-detect-offline\";\n\nexport default class ForgotPasswordComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                username: {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n\n            <div className=\"page-content-wrap\">\n\n    <div className=\"row\">\n        <div className=\"\">\n            <ul class=\"breadcrumb\">\n\n            </ul>\n        </div>\n\n        <div className=\"col-md-6 col-md-offset-3\">\n            <div className=\"login mt-2\">\n                <div className=\"panel panel-default\">\n                    <div className=\"panel-heading\">\n                        <h3 className=\"panel-title\">Forgot Password</h3>\n                    </div>\n                    <div className=\"panel-body\">\n                        <div className=\"col-md-8 col-md-offset-2\">\n                            <div className=\"block login\">\n\n                                <form className=\"form-horizontal\"name=\"form1\" id=\"form1\">\n                                    <div className=\"form-group\">\n                                        <label className=\"col-md-4 control-label\">  Username :</label>\n                                        <div className=\"col-md-8\">\n                                            <input type=\"text\" id=\"username\" name=\"username\" className=\"form-control\"></input>\n                                        </div>\n                                    </div>\n\n                                    <div>\n                                        <h5>{this.state.message}</h5></div>\n                                </form>\n                            </div>\n                        </div>\n\n                    </div>\n                    <div className=\"panel-footer\">\n\n                        <Online>\n                            <button onClick={this.cancelClicked} type=\"button\" className=\"btn btn-primary pull-right ml-1\">cancel</button>\n                        </Online>\n                        <Online>\n                            <button onClick={this.submitClicked} type=\"button\" className=\"btn btn-success pull-right\">Submit</button>\n                        </Online>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n            \n    \n        )\n    }\n\n    submitClicked() {\n        if ($(\"#form1\").valid()) {\n            if (navigator.onLine) {\n                UserService.forgotPassword($('#username').val())\n                    .then(response => {\n                        // console.log(response.statusText)\n                        this.props.history.push(`/login/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            console.log(error.message);\n                            console.log(error.text);\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            } else {\n                alert(\"You must be Online to update the password.\")\n            }\n        }\n    }\n\n    cancelClicked() {\n        this.props.history.push(`/login/Action Canceled.`)\n    }\n}\n\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n/*import '../../js/plugins/bootstrap/bootstrap-select';*/\nimport '../../Js/actions';\n\nimport ErrorComponent from \"../common/ErrorComponent\";\nimport LoginComponent from \"../home/LoginComponent.jsx\";\nimport Layout from './Layout.js';\n\n\n\n\nimport UpdateExpiredPasswordComponent from \"../home/UpdateExpiredPasswordComponent.jsx\";\nimport ForgotPasswordComponent from \"../home/ForgotPasswordComponent.jsx\";\n\nclass Sidebar extends Component {\n\n\n    render() {\n        return (\n            <div className=\"Sidebar\">\n\n\n                {/* MESSAGE BOX*/}\n                <div className=\"message-box animated fadeIn\" data-sound=\"alert\" id=\"mb-signout\">\n                    <div className=\"mb-container\">\n                        <div className=\"mb-middle\">\n                            <div className=\"mb-title\"><span className=\"fa fa-sign-out\"></span> Log <strong>Out</strong> ?</div>\n                            <div className=\"mb-content\">\n                                <p>Are you sure you want to log out?</p>\n                                <p>Press No if youwant to continue work. Press Yes to logout current user.</p>\n                            </div>\n                            <div className=\"mb-footer\">\n                                <div className=\"pull-right\">\n                                    <a href=\"/\" className=\"btn btn-success btn-lg\">Yes</a>\n                                    <button className=\"btn btn-default btn-lg mb-control-close\">No</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                {/* <Router> */}\n\n                    <Router basename=\"/palashSprint1\">\n\n\n                    <>\n                        <Switch>\n                            <Route path=\"/updateExpiredPassword\" exact component={UpdateExpiredPasswordComponent} />\n                            <Route path=\"/forgotPassword\" exact component={ForgotPasswordComponent} />\n                            <Route path=\"/\" exact component={LoginComponent} />\n                            <Route path=\"/login/:message\" component={LoginComponent} />\n                            {/* START PAGE CONTAINER */}\n                            <div className=\"page-container page-navigation-toggled page-container-wide\">\n\n                                {/* START PAGE SIDEBAR */}\n                                <div className=\"page-sidebar\">\n                                    {/* START X-NAVIGATION */}\n                                    <ul className=\"x-navigation x-navigation-minimized\">\n                                        <li className=\"xn-logo\">\n                                            <a href=\"index.html\">FASP</a>\n                                            <a href=\"#\" className=\"x-navigation-control\"></a>\n\n                                        </li>\n\n\n                                        <li><a href=\"#\"><span className=\"\"></span> </a></li>\n\n\n                                        <li className=\"active\">\n                                            {<a href=\"welcome\"><span className=\"fa fa-list-alt\"></span> <span className=\"xn-text\">Home</span></a>}\n                                            {/* <ul>\n\n                 <li className=\"\">\n                     <a href=\"consumption.html\"><span className=\"\"></span> Consumption</a>\n\n                 </li>\n\n                 <li><a href=\"pages-messages.html\"><span className=\"\"></span> Shipments</a></li>\n                 <li><a href=\"pages-calendar.html\"><span className=\"\"></span> Stocks</a></li>\n\n             </ul> */}\n                                        </li>\n\n                                        {/*  <li className=\"xn-openable\">\n             <a href=\"#\"><span className=\"fa fa-table\"></span> <span className=\"xn-text\">Commodities Data</span></a>\n             <ul>\n\n                 <li className=\"\">\n                     <a href=\"#\"><span className=\"\"></span> Consumption</a>\n\n                 </li>\n\n                 <li><a href=\"#\"><span className=\"\"></span> Shipments</a></li>\n                 <li><a href=\"#\"><span className=\"\"></span> Stocks</a></li>\n\n             </ul>\n            </li>*/}\n            \n                                        <li className=\"xn-openable\">\n                                            <a href=\"\"><span className=\"fa fa-table\"></span> <span className=\"xn-text\">Program data</span></a>\n                                            <ul>\n\n                                                <li className=\"\">\n                                                    <a href=\"../downloadProgramData\"><span className=\"\"></span> Download</a>\n\n                                                </li>\n\n                                                <li><a href=\"../exportProgramData\"><span className=\"\"></span> Export</a></li>\n                                                <li><a href=\"../syncMasterData\"><span className=\"\"></span> Sync Master data</a></li>\n                                                <li><a href=\"../importProgramData\"><span className=\"\"></span> Import</a></li>\n\n                                            </ul>\n                                        </li>\n\n                                        <li className=\"xn-openable\">\n                                            <a href=\"#\"><span className=\"fa fa-file\"></span> <span className=\"xn-text\">Admin</span></a>\n                                            <ul className=\"sidebarUl\">\n\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> User</a>\n                                                    <ul>\n                                                        <li><a href=\"../addUser\"><span className=\"\"></span> Add User</a></li>\n                                                        <li><a href=\"../listUser\"><span className=\"\"></span>User List</a></li>\n                                                    </ul>\n                                                </li>\n\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Role</a>\n                                                    <ul>\n                                                        <li><a href=\"../addRole\"><span className=\"\"></span> Add Role</a></li>\n                                                        <li><a href=\"../listRole\"><span className=\"\"></span>Role List</a></li>\n                                                    </ul>\n                                                </li>\n\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Language</a>\n                                                    <ul>\n                                                        <li><a href=\"../addLanguage\"><span className=\"\"></span> Add Language</a></li>\n                                                        <li><a href=\"../languageList/success\"><span className=\"\"></span>Language List</a></li>\n                                                    </ul>\n                                                </li>\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Country</a>\n                                                    <ul>\n                                                        <li><a href=\"../addCountry\"><span className=\"\"></span> Add Country</a></li>\n                                                        <li><a href=\"../countryList/success\"><span className=\"\"></span>Country List</a></li>\n                                                    </ul>\n                                                </li>\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Currency</a>\n                                                    <ul>\n                                                        <li><a href=\"../addCurrency\"><span className=\"\"></span> Add Currency</a></li>\n                                                        <li><a href=\"../currencyList/success\"><span className=\"\"></span>Currency List</a></li>\n                                                    </ul>\n                                                </li>\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> DataSource</a>\n                                                    <ul>\n                                                        <li><a href=\"../addDataSource\"><span className=\"\"></span> Add DataSource</a></li>\n                                                        <li><a href=\"../dataSourceList/success\"><span className=\"\"></span>DataSource List</a></li>\n                                                    </ul>\n                                                </li>\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> DataSource Type</a>\n                                                    <ul>\n                                                        <li><a href=\"../addDataSourceType\"><span className=\"\"></span> Add DataSource Type</a></li>\n                                                        <li><a href=\"../dataSourceTypeList/success\"><span className=\"\"></span>DataSource Type List</a></li>\n                                                    </ul>\n                                                </li>\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Shipment Status</a>\n                                                    <ul>\n                                                        <li><a href=\"../addShipmentStatus\"><span className=\"\"></span> Add Shipment Status</a></li>\n                                                        <li><a href=\"../shipmentStatusListAll/success\"><span className=\"\"></span>Shipment Status List</a></li>\n                                                    </ul>\n                                                </li>\n\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Region</a>\n                                                    <ul>\n                                                        <li><a href=\"../addRegion\"><span className=\"\"></span> Add Region</a></li>\n                                                        <li><a href=\"../regionList/:message\"><span className=\"\"></span>Region List</a></li>\n                                                    </ul>\n                                                </li>\n\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Labels</a>\n                                                    <ul>\n                                                    <li><a href=\"../labelList/success\"><span className=\"\"></span>Labels List</a></li>\n                                                        {/* <li><a href=\"../addLabels\"><span className=\"\"></span> Add Labels</a></li> */} \n                                                    </ul>\n                                                </li>\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Unit Type</a>\n                                                    <ul>\n                                                    \n                                                        <li><a href=\"../addUnitType\"><span className=\"\"></span> Add Unit Type</a></li> \n                                                        <li><a href=\"../unitTypeList/success\"><span className=\"\"></span>Unit type List</a></li>\n                                                    </ul>\n                                                </li>\n                                            </ul>\n                                        </li>\n\n                                        {/*   <li className=\"xn-openable\">\n             <a href=\"#\"><span className=\"fa fa-file\"></span> <span className=\"xn-text\">Background Data</span></a>\n             <ul>\n\n                 <li className=\"xn-openable\">\n                     <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Products</a>\n                     <ul>\n                         <li><a href=\"\"><span className=\"\"></span> Case Sizes</a></li>\n                         <li><a href=\"\"><span className=\"\"></span>Costs</a></li>\n                     </ul>\n                 </li>\n                 <li className=\"xn-openable\">\n                     <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Categories</a>\n                     <ul>\n                         <li><a href=\"\"><span className=\"\"></span> View Categories</a></li>\n\n                     </ul>\n                 </li>\n\n                 <li><a href=\"\"><span className=\"\"></span> Suppliers</a></li>\n                 <li><a href=\"\"><span className=\"\"></span> Data Sources</a></li>\n                 <li><a href=\"\"><span className=\"\"></span> Funding Sources</a></li>\n             </ul>\n         </li>\n\n         <li className=\"xn-openable\">\n             <a href=\"#\"><span className=\"fa fa-bar-chart-o\"></span> <span className=\"xn-text\">Graphs    </span></a>\n             <ul>\n\n                 <li className=\"\">\n                     <a href=\"#\"><span className=\"\"></span> Stock Status</a>\n\n                 </li>\n\n                 <li><a href=\"#\"><span className=\"\"></span> Consumption</a></li>\n                 <li><a href=\"#\"><span className=\"\"></span> Trend Analysis</a></li>\n\n                 <li><a href=\"#\"><span className=\"\"></span> Couple Year Protection(CYP)</a></li>\n             </ul>\n         </li>\n\n         <li className=\"xn-openable\">\n             <a href=\"#\"><span className=\"fa fa-files-o\"></span> <span className=\"xn-text\">Reports    </span></a>\n             <ul>\n\n                 <li className=\"\">\n                     <a href=\"#\"><span className=\"\"></span> Stock Status</a>\n\n                 </li>\n\n                 <li><a href=\"#\"><span className=\"\"></span> Stock Status Matrix</a></li>\n                 <li><a href=\"#\"><span className=\"\"></span> Shipment Summary</a></li>\n\n                 <li><a href=\"#\"><span className=\"\"></span> Supply Plans</a></li>\n\n                 <li><a href=\"#\"><span className=\"\"></span> Shipment Orders</a></li>\n\n                 <li><a href=\"#\"><span className=\"\"></span> Annual Shipment Costs</a></li>\n                 <li><a href=\"#\"><span className=\"\"></span> Pipeline Action</a></li>\n                 <li><a href=\"#\"><span className=\"\"></span> Pipeline Problem</a></li>\n                 <li><a href=\"#\"><span className=\"\"></span> Procurement</a></li>\n             </ul>\n         </li>*/}\n                                    </ul>\n                                    {/* END X-NAVIGATION */}\n                                </div>\n                                {/* END PAGE SIDEBAR */}\n\n                                {/* PAGE CONTENT */}\n\n                                <div className=\"page-content\">\n                                    {/* START X-NAVIGATION VERTICAL */}\n                                    <ul className=\"x-navigation x-navigation-horizontal x-navigation-panel\">\n                                        {/* TOGGLE NAVIGATION */}\n                                        <li className=\"xn-icon-button\">\n                                            <a href=\"#\" className=\"x-navigation-minimize\"><span className=\"fa fa-dedent\"></span></a>\n                                        </li>\n                                        {/* END TOGGLE NAVIGATION */}\n                                        {/* SEARCH */}\n                                        {/* <li className=\"xn-search\">\n                 <form role=\"form\">\n                     <input type=\"text\" name=\"search\" placeholder=\"Search...\"/>\n                 </form>\n             </li> */}\n                                        {/* END SEARCH */}\n                                        {/* SIGN OUT */}\n                                        <li className=\"xn-icon-button pull-right\">\n                                            <a href=\"\" className=\"mb-control\" data-box=\"#mb-signout\"><span className=\"fa fa-sign-out\"></span></a>\n                                        </li>\n                                        {/* END SIGN OUT */}\n                                        {/* MESSAGES */}\n                                        <li className=\"xn-icon-button pull-right\">\n                                            <a href=\"#\"><span className=\"fa fa-user\"></span>\n\n                                            </a>\n\n                                            <div className=\"panel panel-primary animated zoomIn xn-drop-left xn-panel-dragging user-panel\" >\n                                                <div className=\"panel-heading\">\n                                                    <div className=\"profile\">\n                                                        <div className=\"profile-image\">\n                                                            <img className=\"profile-img\" src=\"img/noimage.jpg\" alt=\"John Doe\" >\n                                                            </img></div>\n                                                        <div className=\"profile-data\">\n                                                            <div className=\"profile-data-name\">XYZ</div>\n                                                            <div className=\"profile-data-title\">Admin User</div>\n                                                            <div className=\"profile-data-title\"><span>Online</span></div>\n                                                            <div className=\"profile-data-title\"><span>  <span className=\"online\"></span></span>\n                                                            </div>\n\n\n\n\n                                                        </div>\n\n                                                    </div>\n                                                </div>\n\n                                            </div>\n                                        </li>\n                                        <li class=\"xn-icon-button pull-right\">\n       <a href=\"../changePassword\" title=\"Change Password\"><span class=\"fa fa-key\"></span> <span class=\"xn-text\"></span></a>\n   </li>\n                                        <li className=\"xn-icon-button pull-right Langli\">\n                                            <a href=\"#\" className=\"lang-align\" ><span className=\"\"> Languages</span> <span className=\"fa fa-caret-down lang-caret\"\n                                            ></span></a>\n                                            {/*    <div className=\"informer informer-warning\">3</div> */}\n                                            <div className=\"panel panel-primary animated zoomIn xn-drop-left xn-panel-dragging lang-width\">\n                                                {/*  <div className=\"panel-heading\">\n                         <h3 className=\"panel-title\"><span className=\"fa fa-tasks\"></span> Program Name</h3>                                \n                         <div className=\"pull-right\">\n                             <span className=\"label label-warning\">3 active</span>\n                         </div>\n                     </div> */}\n                                                <div className=\"panel-body list-group scroll lang-box\">\n                                                    <a className=\"list-group-item\" href=\"#\">\n                                                        <strong>Français | FRA</strong>\n                                                        {/*     <div className=\"progress progress-small progress-striped active\">\n                                 <div className=\"progress-bar progress-bar-danger\" role=\"progressbar\" aria-valuenow=\"50\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 50%;\">50%</div>\n                             </div>\n                             <small className=\"text-muted\">John Doe, 25 Sep 2014 / 50%</small> */}\n                                                    </a>\n                                                    <a className=\"list-group-item\" href=\"#\">\n                                                        <strong>Português | PRT</strong>\n                                                        {/*      <div className=\"progress progress-small progress-striped active\">\n                                 <div className=\"progress-bar progress-bar-warning\" role=\"progressbar\" aria-valuenow=\"80\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 80%;\">80%</div>\n                             </div>\n                             <small className=\"text-muted\">Dmitry Ivaniuk, 24 Sep 2014 / 80%</small> */}\n                                                    </a>\n                                                    <a className=\"list-group-item\" href=\"#\">\n                                                        <strong>Español | ESP</strong>\n\n                                                    </a>\n                                                    <a className=\"list-group-item\" href=\"#\">\n                                                        <strong>STiếng Việt | VIE</strong>\n\n                                                    </a>\n                                                </div>\n\n                                            </div>\n                                        </li>\n\n\n                                        {/* END TASKS */}\n                                    </ul>\n                                    {/* END X-NAVIGATION VERTICAL */}\n\n                                    {/* START BREADCRUMB */}\n\n                                    {/* END BREADCRUMB */}\n\n                                    {/* PAGE CONTENT WRAPPER */}\n\n\n                                    <Route path='/' render={(props) => <Layout {...props} />} />\n                                    {/* <Route path=\"/login/:message\" component={LoginComponent} /> */}\n                                    {/* <Route path=\"/addUser\" component={AddUserComponent} /> */}\n                                    {/* <Route path=\"/userList\" exact component={UserListComponent} /> */}\n                                    {/* <Route path=\"/userList/:message\" component={UserListComponent} /> */}\n                                    {/* <Route path=\"/editUser\" component={EditUserComponent} /> */}\n                                    {/* <Route path=\"/addRole\" component={AddRoleComponent} /> */}\n                                    {/* <Route path=\"/roleList\" component={RoleListComponent} /> */}\n                                    {/* <Route path=\"/roleList/:message\" component={RoleListComponent} /> */}\n                                    {/* <Route path=\"/editRole\" component={RoleListComponent} /> */}\n                                    {/* <AuthenticatedRoute path=\"/updateExpiredPassword\" component={UpdateExpiredPasswordComponent} /> */}\n                                    {/* <AuthenticatedRoute path=\"/welcome\" component={WelcomeComponent} /> */}\n                                    {/* <AuthenticatedRoute path=\"/registration\" component={RegistrationComponent} /> */}\n                                    {/* <AuthenticatedRoute path=\"/listUserApproval/:message\" component={UserApprovalComponent} /> */}\n                                    {/* <AuthenticatedRoute path=\"/listUserApproval\" component={UserApprovalComponent} /> */}\n                                    {/* <AuthenticatedRoute path=\"/editUserApproval/:registrationId/:emailId\" component={EditUserApprovalComponent} /> */}\n                                    {/* <Route component={ErrorComponent} /> */}\n\n\n                                    {/* END PAGE CONTENT WRAPPER */}\n                                </div>\n                                {/* END PAGE CONTENT */}\n                            </div>\n                            {/* END PAGE CONTAINER */}\n\n                        </Switch>\n                    </>\n                </Router>\n            </div>\n        );\n    }\n\n}\n\nexport default Sidebar;","import React from 'react';\nimport './App.css';\n\n\nimport Sidebar from './components/common/Sidebar';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Sidebar></Sidebar>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// AuthenticationService.setupAxiosInterceptors();\nserviceWorker.register();"],"sourceRoot":""}