{"version":3,"sources":["Constants.js","components/common/AuthenticationService.js","components/common/AuthenticatedRoute.jsx","Js/validation.js","api/LoginService.js","components/home/LoginComponent.jsx","components/home/WelcomeComponent.jsx","components/common/ErrorComponent.jsx","api/RegistrationService.js","api/UserService.js","components/user/RegistrationComponent.jsx","components/user/UserApprovalComponent.jsx","components/user/AddUserComponent.jsx","Labels.js","components/user/UserListComponent.jsx","components/user/EditUserComponent.jsx","components/user/EditUserApprovalComponent.jsx","api/SignUpService.js","components/user/RoleListComponent.jsx","api/LanguageService.js","components/language/AddLanguageComponent.jsx","components/user/AddRoleComponent.jsx","components/home/UpdateExpiredPasswordComponent.jsx","components/home/ChangePasswordComponent.jsx","components/home/ForgotPasswordComponent.jsx","components/language/LanguageListComponent.jsx","components/language/EditLanguageComponent.jsx","api/DataSourceTypeService.js","components/datasourceType/AddDataSourceTypeComponent.jsx","components/datasourceType/DataSourceTypeListComponent.jsx","components/datasourceType/UpdateDataSourceTypeComponent.jsx","api/DataSourceService.js","components/dataSource/AddDataSource.jsx","components/dataSource/DataSourceListComponent.jsx","components/dataSource/UpdateDataSourceComponent.jsx","api/CurrencyService.js","components/currency/AddCurrencyComponent.jsx","components/currency/CurrencyListComponent.jsx","components/currency/UpdateCurrencyComponent.jsx","components/common/Layout.js","components/common/Sidebar.jsx","App.js","serviceWorker.js","index.js"],"names":["API_URL","SECRET_KEY","localStorage","getItem","token","jwt_decode","userId","typeOfSession","navigator","onLine","decoded","console","log","Date","exp","curDate","user","sessionExpiresOn","this","setupAxiosInterceptors","axios","get","then","response","catch","error","basicAuthHeader","interceptors","request","use","config","headers","authorization","Component","$","validator","addMethod","value","element","optional","test","username","password","post","LoginComponent","props","state","message","loginClicked","bind","forgotPassword","validate","ignore","rules","emailId","required","errorPlacement","insertAfter","className","name","id","match","params","type","onClick","val","valid","AuthenticationService","isUserLoggedIn","LoginService","authenticate","data","setItem","CryptoJS","AES","encrypt","toString","sub","language","languageId","history","push","status","setState","JSON","parse","decryptedUsername","decrypt","enc","Utf8","decryptedPassword","bcrypt","compare","err","res","alert","WelcomeComponent","listUserApproval","ErrorComponent","countryId","stateId","json","put","oldPassword","newPassword","AddUserComponent","realms","languages","roles","submitClicked","cancelClicked","checkTypeOfSession","UserService","getRealmList","getLanguageList","getRoleList","email","phoneNumber","number","roleId","realmList","length","map","item","i","key","realmId","realmCode","languagesList","languageName","roleList","roleName","style","margin","border","background","maxLength","minLength","checkIfTokenExpired","realm","role","countryIds","addNewUser","UserListComponent","userList","editUser","unlockAccount","getUserList","marginLeft","align","lastLoginDate","faildAttempts","active","e","stopPropagation","pathname","window","location","reload","EditUserComponent","_isMounted","updateClicked","dataChange","event","target","onChange","checked","RoleListComponent","AddLanguageComponent","updateFieldData","submitForm","lettersonly","maxlength","LanguageService","addLanguage","AddRoleComponent","businessFunctions","getBusinessFunctionList","businessFunctionsList","businessFunctionId","businessFunctionDesc","multiple","UpdateExpiredPasswordComponent","logoutClicked","confirmNewPassword","checkPassword","updateExpiredPassword","getLoggedInUserId","statusText","text","ChangePasswordComponent","ForgotPasswordComponent","LanguageListComponent","langaugeList","editLanguage","addNewLanguage","EditLanguageComponent","updateForm","AddDataSourceTypeComponent","DataSourceTypeService","addDataSourceType","DataSourceListComponent","dataSourceList","editDataSourceType","addNewDataSourceType","getDataSourceTypeList","dataSourceType","dataSourceTypeId","label","engLabel","freLabel","spaLabel","porLabel","UpdateDataSourceTypeComponent","labelId","AddDataSource","dataSourceTypeList","getDataSourceTypeListActive","dataSource","DataSourceService","addDataSource","dataSourceTypes","editDataSource","addNewDataSource","getDataSourceList","dataSourceId","UpdateDataSourceComponent","AddCurrencyComponent","currencyCode","currencySymbol","conversionRateToUsd","integer","currency","CurrencyService","addCurrency","CurrencyListComponent","currencyList","editCurrency","addNewCurrency","getCurrencyList","currencyId","UpdateCurrencyComponent","Layout","timeout","checkSessionTimeOut","showModal","userLoggedIn","isTimedOut","idleTimer","onAction","_onAction","onActive","_onActive","onIdle","_onIdle","handleClose","handleLogout","reset","ref","document","debounce","path","exact","component","render","React","Sidebar","App","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5f32c6f4.chunk.js","sourcesContent":["//export const API_URL = 'http://localhost:8081'\nexport const API_URL = 'https://fasp.altius.cc/FASP'\n\n//export const API_URL='http://localhost:8084/FASP'\n// export const API_URL = 'http://localhost:8081'\nexport const SECRET_KEY = 'my-secret-key@123'\n","import axios from 'axios'\nimport { Online } from \"react-detect-offline\";\nimport jwt_decode from 'jwt-decode'\nimport { API_URL } from '../../Constants.js'\n\nclass AuthenticationService {\n\n    isUserLoggedIn() {\n        let user = localStorage.getItem('userId');\n        if (user === null) return false\n        return true\n    }\n    getLoggedInUserId() {\n        let token = localStorage.getItem('token');\n        var decoded = jwt_decode(token);\n        return decoded.userId;\n    }\n\n    checkTypeOfSession() {\n        let typeOfSession = localStorage.getItem('typeOfSession');\n        if ((typeOfSession === null || typeOfSession === \"\" || typeOfSession === 'Online') && !navigator.onLine) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    checkIfTokenExpired() {\n        let token = localStorage.getItem('token');\n        var decoded = jwt_decode(token);\n        console.log(decoded);\n        let tokenExpiryTime = new Date(decoded.exp * 1000);\n        var curDate = new Date();\n        console.log(new Date(decoded.exp * 1000));\n        console.log(\"cur date---\" + curDate);\n\n        if (new Date(decoded.exp * 1000) > new Date()) {\n            console.log(\"Token not expired\");\n            return true;\n        } else {\n            console.log(\"Token expired\");\n            return false;\n        }\n    }\n\n    checkSessionTimeOut(){\n        let token = localStorage.getItem('token');\n        var decoded = jwt_decode(token);\n        console.log(\"decoded---\",decoded);\n        console.log(\"Session expires on---\"+decoded.user.sessionExpiresOn);\n        return decoded.user.sessionExpiresOn;   \n    }\n\n    refreshToken() {\n        let token = localStorage.getItem('token');\n        console.log(\"token---\" + token);\n        this.setupAxiosInterceptors();\n        return axios.get(`${API_URL}/refresh`, {}).then(response => {\n            console.log(\"response----------------\", response)\n        }).catch(\n            error => {\n                console.log(\"error----------\", error);\n            })\n    }\n\n    setupAxiosInterceptors() {\n        //console.log(\"Inside interceptor setup\");\n        let token = localStorage.getItem('token');\n        let basicAuthHeader = 'Bearer ' + token\n        console.log(\"headers=\" + basicAuthHeader);\n        axios.interceptors.request.use(\n            // if (this.isUserLoggedIn) {\n            (config) => {\n                config.headers.authorization = basicAuthHeader\n                return config;\n            }\n            // }\n        )\n\n    }\n}\n\n\nexport default new AuthenticationService()","import React, { Component } from \"react\";\nimport AuthenticationService from \"./AuthenticationService.js\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nclass AuthenticatedRoute extends Component {\n\n    render() {\n        if (AuthenticationService.isUserLoggedIn()) {\n            console.log(\"in user logged in\");\n            //console.log(AuthenticationService.isUserLoggedIn);\n\n            return <Route {...this.props} />\n        } else {\n            console.log(\"in else\")\n            return <Redirect to=\"/login\"/>\n        }\n    }\n\n}\n\nexport default AuthenticatedRoute","import $ from 'jquery';\nimport 'jquery-validation';\n\n\n\n$.validator.addMethod('emailId', function (value, element) {\n\n    return this.optional(element) || /^[\\w][\\w.-]{0,127}$/.test(value)\n  \n  }, \"Please enter a valid Docker image tag, like 'latest' or '1.10.0'\");\n\n  $.validator.addMethod( \"lettersonly\", function( value, element ) {\n    return this.optional( element ) || /^[a-z]+$/i.test( value );\n  }, \"Letters only please\" );\n\n  $.validator.addMethod( \"integer\", function( value, element ) {\n    return this.optional( element ) || /^-?\\d+$/.test( value );\n  }, \"A positive or negative non-decimal number please\" );\n  ","import axios from \"axios\"\nimport {API_URL} from '../Constants.js'\n\nclass LoginService {\n\n\n\n    authenticate(username, password) {\n        console.log(\"username---\"+username);\n        console.log(\"password---\"+password);\n        return axios.post(`${API_URL}/authenticate`,{username, password},{});\n    }\n\n    \n}\n\nexport default new LoginService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport LoginService from '../../api/LoginService'\nimport CryptoJS from 'crypto-js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\nimport moment from 'moment';\nimport bcrypt from 'bcryptjs';\nimport jwt_decode from 'jwt-decode'\nimport { SECRET_KEY } from '../../Constants.js'\n\n\nexport default class LoginComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.loginClicked = this.loginClicked.bind(this);\n        this.forgotPassword = this.forgotPassword.bind(this);\n    }\n\n    componentDidMount() {\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                emailId: {\n                    required: true\n                },\n                password: {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"login\">\n                <form name=\"form1\" id=\"form1\">\n                    <h3>Login</h3>\n                    <p>{this.props.match.params.message}</p>\n                    Username : <input type=\"text\" id=\"emailId\" name=\"emailId\" /><br></br><br></br>\n                    Password : <input type=\"password\" id=\"password\" name=\"password\" /><br></br><br></br>\n                    <button className=\"btn btn-success\" type=\"button\" onClick={this.loginClicked}>Login</button><br></br><br></br>\n                    <Online><button className=\"btn btn-danger\" type=\"button\" onClick={this.forgotPassword}>Forgot Password</button><br></br><br></br></Online>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n\n    loginClicked() {\n        var username = $(\"#emailId\").val();\n        var password = $(\"#password\").val();\n        if ($(\"#form1\").valid()) {\n            console.log(\"Going to perform login----\" + AuthenticationService.isUserLoggedIn());\n\n            if (navigator.onLine) {\n                console.log(\"Inside Authentication not found\");\n                LoginService.authenticate(username, password)\n                    .then(response => {\n                        var decoded = jwt_decode(response.data.token);\n\n                        // console.log(new Date(decoded.iat*1000));\n                        // console.log(new Date(decoded.exp*1000));\n                        console.log(\"username---\", decoded);\n\n                        localStorage.setItem('token', response.data.token);\n                        localStorage.setItem('typeOfSession', \"Online\");\n                        localStorage.setItem('userId', CryptoJS.AES.encrypt((decoded.userId).toString(), `${SECRET_KEY}`));\n                        localStorage.setItem('username', CryptoJS.AES.encrypt((decoded.sub).toString(), `${SECRET_KEY}`));\n                        localStorage.setItem('password', CryptoJS.AES.encrypt((decoded.user.password).toString(), `${SECRET_KEY}`));\n                        localStorage.setItem('languageId', CryptoJS.AES.encrypt((decoded.user.language.languageId).toString(), `${SECRET_KEY}`));\n\n                        // response.data.password = CryptoJS.AES.encrypt(JSON.stringify(password), 'my-secret-key@123').toString();\n\n                        AuthenticationService.setupAxiosInterceptors();\n                       \n                        this.props.history.push(`/welcome`)\n\n                    })\n                    .catch(\n                        error => {\n                            // console.log(\"response in catch---\"+error.response);\n                            if (error.response != null && error.response.status === 401) {\n                                switch (error.response.data) {\n                                    case \"Account Expired\":\n                                        this.setState({\n                                            message: error.response.data\n                                        })\n                                        this.props.history.push(`/updateExpiredPassword`);\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data\n                                        })\n                                        break\n                                }\n                            } else {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        }\n                    );\n            }\n            else {\n                if (AuthenticationService.isUserLoggedIn()) {\n                    localStorage.setItem('typeOfSession', \"Offline\");\n                    console.log(\"Offline authentication\");\n                    let userOff = JSON.parse(localStorage.getItem('user'));\n\n                    var usernameBytes = CryptoJS.AES.decrypt(localStorage.getItem('username').toString(), 'my-secret-key@123');\n                    var decryptedUsername = usernameBytes.toString(CryptoJS.enc.Utf8);\n\n                    var passWordBytes = CryptoJS.AES.decrypt(localStorage.getItem('password').toString(), 'my-secret-key@123');\n                    var decryptedPassword = passWordBytes.toString(CryptoJS.enc.Utf8);\n\n                    if (username === decryptedUsername) {\n                        bcrypt.compare(password, decryptedPassword, function (err, res) {\n                            if (err) {\n                                console.log(\"error---\" + err);\n                            }\n                            if (res) {\n                                this.props.history.push(`/welcome`)\n                            } else {\n                                this.setState({ message: 'Password do not match' });\n                                console.log(\"Password do not match\");\n                            }\n                        }.bind(this));\n                    } else {\n                        this.setState({ message: 'Username does not match' });\n                        console.log(\"Username do not match\");\n                    }\n                    // bcrypt.compare(password, userOff.password, function (err, res) {\n                    //     if (err) {\n                    //         console.log(\"error---\" + err);\n                    //     }\n                    //     if (res && username == userOff.username) {\n                    //         userOff.sessionExpiresOn = moment(new Date(new Date().getTime() + 30 * 60000)).format('YYYY-MM-DD HH:mm');\n                    //         localStorage.setItem('user', JSON.stringify(userOff));\n                    //         this.props.history.push(`/welcome`)\n                    //     } else {\n                    //         this.setState({ message: 'Password do not match' });\n                    //         console.log(\"Password do not match\");\n                    //     }\n                    // }.bind(this));\n                } else {\n                    alert(\"You must be Online for a first time login.\")\n                }\n            }\n        }\n    }\n\n    forgotPassword() {\n        this.props.history.push(`/forgotPassword`)\n    }\n}\n\n","import React, { Component } from \"react\";\n\nclass WelcomeComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.listUserApproval=this.listUserApproval.bind(this);\n    }\n\n    render() {\n        return (\n            <>\n                <h1>Welcome!!</h1>\n                <button type=\"button\" onClick={this.listUserApproval}>User Approval</button><br></br><br></br>\n            </>\n        );\n    }\n\n    listUserApproval() {\n        this.props.history.push(`/listUserApproval`)\n    }\n}\n\nexport default WelcomeComponent","import React from \"react\";\n\nfunction ErrorComponent() {\n    return (\n        <div>An Error occurred</div>\n    )\n}\n\nexport default ErrorComponent","import axios from \"axios\"\nimport {API_URL} from '../Constants.js' \n\nclass RegistrationService {\n    getCountryList() {\n        return axios.get(`${API_URL}/api/getCountryList`, {\n        });\n    }\n\n    getStateList(countryId) {\n        return axios.get(`${API_URL}/api/getStateList/${countryId}`, {\n        });\n    }\n\n    getCityList(countryId, stateId) {\n        return axios.get(`${API_URL}/api/getCityList/${countryId}/${stateId}`, {\n        });\n    }\n\n    saveRegistration(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`${API_URL}/api/saveRegistration/`, json, {\n        });\n    }\n\n    getUserApprovalList() {\n        return axios.get(`${API_URL}/api/getUserApprovalList`, {\n        });\n    }\n\n    saveApproval(json) {\n        return axios.put(`${API_URL}/api/saveApproval`, json, {\n        });\n    }\n}\n\nexport default new RegistrationService()","import axios from \"axios\";\nimport { API_URL } from '../Constants';\n\n\nclass UserService {\n    getLanguageList() {\n        return axios.get(`http://localhost:8081/api/getLanguageList`, {\n        });\n    }\n    getRoleList() {\n        return axios.get(`http://localhost:8081/api/getRoleList`, {\n        });\n    }\n    getBusinessFunctionList() {\n        return axios.get(`http://localhost:8081/api/getBusinessFunctionList`, {\n        });\n    }\n    getRealmList() {\n        return axios.get(`http://localhost:8081/api/getRealmList`, {\n        });\n    }\n    addNewUser(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`http://localhost:8081/api/addNewUser/`, json, {\n        });\n    }\n    getUserList() {\n        return axios.get(`http://localhost:8081/api/getUserList`, {\n        });\n    }\n    getUserByUserId(userId) {\n        return axios.get(`http://localhost:8081/api/getUserByUserId/${userId}`, {\n        });\n    }\n    editUser(json) {\n        return axios.put(`http://localhost:8081/api/editUser/`, json, {\n        });\n    }\n    unlockAccount(user) {\n        return axios.put(`http://localhost:8081/api/unlockAccount/`, user, {\n        });\n    }\n    updateExpiredPassword(userId, oldPassword, newPassword) {\n        return axios.post(`http://localhost:8081/api/updateExpiredPassword/`, { userId, oldPassword, newPassword }, {});\n    }\n    forgotPassword(username) {\n        return axios.get(`http://localhost:8081/api/forgotPassword/${username}`,{});\n    }\n}\n\nexport default new UserService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport RegistrationService from \"../../api/RegistrationService.js\";\n\n\nexport default class RegistrationComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.registerClicked = this.registerClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n    }\n\n    componentDidMount() {\n        $.validator.addMethod('nofreeemail', function (value) {\n            return /^([\\w-.]+@(?!gmail\\.com)(?!yahoo\\.com)(?!hotmail\\.com)([\\w-]+.)+[\\w-]{2,4})?$/.test(value);\n        }, 'Free email addresses are not allowed.');\n\n\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                firstName: {\n                    required: true\n                },\n                lastName: {\n                    required: true\n                },\n                emailId: {\n                    required: true,\n                    email: true,\n                    nofreeemail:true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    dataChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"register\">\n                <form name=\"form1\" id=\"form1\" onSubmit={this.registerClicked}>\n                    <h3>Sign Up</h3>\n                    First Name : <input type=\"text\" id=\"firstName\" name=\"firstName\" onChange={this.dataChange} /><br></br><br></br>\n                    Last Name : <input type=\"text\" id=\"lastName\" name=\"lastName\" onChange={this.dataChange} /><br></br><br></br>\n                    Email Id : <input type=\"text\" id=\"emailId\" name=\"emailId\" onChange={this.dataChange} /><br></br><br></br>\n                    <button type=\"submit\">Sign Up</button><br></br><br></br>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n\n    registerClicked(event) {\n        event.preventDefault();\n        if (navigator.onLine) {\n            var json = this.state\n            if ($(\"#form1\").valid()) {\n                RegistrationService.saveRegistration(json)\n                    .then(response => {\n                        this.props.history.push(`/login/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n\n}\n\n","import React, { Component } from \"react\";\nimport RegistrationService from '../../api/RegistrationService.js';\n\nclass UserApprovalComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listUserApproval: []\n        }\n        this.updateUserApproval = this.updateUserApproval.bind(this);\n    }\n\n\n    componentDidMount() {\n        RegistrationService.getUserApprovalList()\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    listUserApproval: response.data\n                })\n            })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    render() {\n        return (\n            <>\n                <h1>List User Approval</h1>\n                <p>{this.props.match.params.message}</p>\n                <div className=\"container\">\n                    <table border=\"1\">\n                        <thead>\n                            <tr>\n                                <th>First Name</th>\n                                <th>Last Name</th>\n                                <th>Email Id</th>\n                                <th>Created date</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.listUserApproval.map(\n                                    listUserApproval =>\n                                        <tr key={listUserApproval.registrationId} onClick={() => this.updateUserApproval(listUserApproval.registrationId, listUserApproval.emailId)}>\n                                            <td>{listUserApproval.firstName}</td>\n                                            <td>{listUserApproval.lastName}</td>\n                                            <td>{listUserApproval.emailId}</td>\n                                            <td>{listUserApproval.createdDate}</td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n            </>\n        );\n    }\n\n    updateUserApproval(id, emailId) {\n        console.log(id);\n        console.log(emailId);\n        this.props.history.push(`/editUserApproval/${id}/${emailId}`)\n    }\n}\n\nexport default UserApprovalComponent","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { COUNTRY, EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, ADDRESS, BTN_SUBMIT, BTN_CANCEL, TITLE_ADD_USER, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class AddUserComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            realms: [],\n            languages: [],\n            roles: []\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        if(AuthenticationService.checkTypeOfSession()){\n            alert(\"You are offline.Please login again to continue in offline mode.\");\n            this.props.history.push(`/`)\n        }\n        UserService.getRealmList()\n            .then(response => {\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getLanguageList()\n            .then(response => {\n                this.setState({\n                    languages: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#userForm\").validate({\n            ignore: [],\n            rules: {\n                emailId: {\n                    required: true,\n                    email: true\n                },\n                phoneNumber: {\n                    required: true,\n                    number: true\n                },\n                languageId: {\n                    required: true\n                },\n                roleId: {\n                    required: true\n                },\n                username: {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { realms } = this.state;\n        const { languages } = this.state;\n        const { roles } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>{item.realmCode}</option>\n                )\n            }, this);\n        let languagesList = languages.length > 0\n            && languages.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>{item.languageName}</option>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>{item.roleName}</option>\n                )\n            }, this);\n        return (\n            <div className=\"addUser\">\n                <div className=\"page-navigation-toggled page-container-wide\">\n                    <div className=\"page-content\">\n                        <div className=\"page-content-wrap\">\n\n                            <div className=\"row\">\n                                <div className=\"col-md-offset-3 col-md-6\" style={{ margin: '40px', border: '5px solid black' }} >\n                                    <form name=\"userForm\" id=\"userForm\">\n                                        <div className=\"panel panel-default\" style={{ background: '#ffffffad' }}>\n                                            <div className=\"panel-heading\"> <h3>{TITLE_ADD_USER}</h3> </div>\n                                            <div className=\"col-md-offset-1 panel-body\">\n                                                <div className=\"form-group\">\n                                                    <label className=\"req col-md-3 col-xs-12 control-label\"> {REALM}</label>\n                                                    <div className=\"col-md-6 col-xs-12\">\n                                                        <select className=\"form-control select\" id=\"realmId\" name=\"realmId\">\n                                                            <option value=\"\">-Nothing Selected-</option>\n                                                            {realmList}\n                                                        </select>\n                                                    </div>\n                                                </div><br />\n                                                <div className=\"form-group\">\n                                                    <label className=\"req col-md-3 col-xs-12 control-label\">{USERNAME} </label>\n                                                    <div className=\"col-md-6 col-xs-12\"> <input className=\"form-control\" type=\"text\" id=\"username\" name=\"username\" />\n                                                    </div>\n                                                </div><br />\n                                                <div className=\"form-group\">\n                                                <label className=\"req col-md-3 col-xs-12 control-label\">{EMAIL_ID} </label>\n                                                <div className=\"col-md-6 col-xs-12\">\n                                                  <input className=\"form-control\" type=\"text\" id=\"emailId\" name=\"emailId\" />\n                                                  </div>\n                                                </div><br />\n                                                <div className=\"form-group\">\n                                                <label className=\"req col-md-3 col-xs-12 control-label\">{PHONE_NO}</label> \n                                                <div className=\"col-md-6 col-xs-12\"> \n                                                <input className=\"form-control\" type=\"text\" id=\"phoneNumber\" name=\"phoneNumber\" maxLength=\"15\" minLength=\"4\" />\n                                                </div>\n                                                </div><br />\n                                                <div className=\"form-group\">\n                                                <label className=\"req col-md-3 col-xs-12 control-label\">{ROLE} </label><div className=\"col-md-6 col-xs-12\"> <select className=\"form-control select\" id=\"roleId\" name=\"roleId\">\n                                                    <option value=\"\">-Nothing Selected-</option>\n                                                    {roleList}\n                                                </select></div>\n                                                </div><br />\n                                                <div className=\"form-group\">\n                                                <label className=\"req col-md-3 col-xs-12 control-label\">{COUNTRY} </label><div className=\"col-md-6 col-xs-12\"> <select className=\" form-control mdb-select colorful-select dropdown-primary md-form\" id=\"countryIds\" name=\"countryIds\">\n                                                    <option value=\"\">-Nothing Selected-</option>\n                                                    {roleList}\n                                                </select></div>\n                                                </div><br />\n                                                <div className=\"form-group\">\n                                                <label className=\"req col-md-3 col-xs-12 control-label\">{PREFERRED_LANGUAGE} </label> <div className=\"col-md-6 col-xs-12\"><select className=\"form-control select\" id=\"languageId\" name=\"languageId\">\n                                                    <option value=\"\">-Nothing Selected-</option>\n                                                    {languagesList}\n                                                </select></div>\n                                                </div><br/>\n                                                <div className=\"form-group\">\n                                                <div className=\"col-md-6 col-xs-12\"><button className=\"btn btn-success\" type=\"button\" onClick={this.submitClicked}>{BTN_SUBMIT}</button>\n                                                   <button className=\"btn btn-primary\" type=\"button\" onClick={this.cancelClicked}>{BTN_CANCEL}</button></div>\n\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </form>\n                                </div></div></div></div></div></div>\n        )\n    }\n    submitClicked() {\n        console.log($(\"#countryIds\").val())\n        if (navigator.onLine) {\n            if(AuthenticationService.checkIfTokenExpired()){\n            var json = {\n                username: $(\"#username\").val(),\n                emailId: $(\"#emailId\").val(),\n                phoneNumber: $(\"#phoneNumber\").val(),\n                realm: {\n                    realmId: $(\"#realmId\").val()\n                },\n                role: {\n                    roleId: $(\"#roleId\").val()\n                },\n                language: {\n                    languageId: $(\"#languageId\").val()\n                },\n                countryIds: $(\"#countryIds\").val()\n            }\n            if ($(\"#userForm\").valid()) {\n                UserService.addNewUser(json)\n                    .then(response => {\n                        this.props.history.push(`/userList/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            }\n        }else{\n            alert(\"Your session has been expired.Please login again to continue.\");\n        }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/userList/` + \"Action Canceled\")\n    }\n\n}\n\n","export const TITLE_ADD_USER = 'Create new user'\nexport const TITLE_USER_LIST = 'User List'\nexport const TITLE_EDIT_USER = 'Update user - '\nexport const TITLE_ADD_ROLE = 'Add new role'\nexport const TITLE_ROLE_LIST = 'Role List'\nexport const TITLE_EDIT_ROLE = 'Update role - '\nexport const USERNAME = 'Username'\nexport const EMAIL_ID = 'Email Id'\nexport const PHONE_NO = 'Phone No'\nexport const ADDRESS = 'Address'\nexport const COUNTRY = 'Country'\nexport const REALM = 'Realm'\nexport const STATE = 'State/Province'\nexport const CITY = 'City'\nexport const ROLE = 'Role'\nexport const ACTIVE = 'Status'\nexport const LAST_LOGIN_DATE = 'Last Login Date'\nexport const FAILED_ATTEMPTS = 'Failed Attempts'\nexport const PREFERRED_LANGUAGE = 'Preferred Language'\nexport const BTN_SUBMIT = 'Submit'\nexport const BTN_CANCEL = 'Cancel'\nexport const BTN_UPDATE = 'Update'\nexport const BTN_EDIT = 'Update'\nexport const BTN_FAILED_ATTEMPTS = 'Unlock account'\nexport const LANGUAGE_NAME = 'Language name'\nexport const HEALTH_AREA = 'Health Area'\nexport const ORGANISATION = 'Organisation'\nexport const REGION = 'Region'\nexport const ROLE_NAME = 'Role Name'\nexport const ROLE_ID = 'Role Id'\nexport const BUSINESS_FUNCTION = 'Business function'\nexport const CAN_CREATE_ROLE = 'Can create role'\nexport const IS_ACTIVE = 'Active'\nexport const ADD_LANGUAGE = 'Add Language'\nexport const UPDATE_LANGUAGE = 'Update Language'\nexport const SUBMIT_BUTTON = 'Submit'\nexport const UPDATE_BUTTON = 'Update'\nexport const ADD_NEW_LANGUAGE_TITLE = 'Add New Language'\nexport const ADD_DATASOURCE_TYPE = 'Add Data Source Type'\nexport const DATASOURCE_TYPE_NAME_EN = 'Data source type name (English)'\nexport const DATASOURCE_TYPE_NAME_FR = 'Data source  type name (French)'\nexport const DATASOURCE_TYPE_NAME_SP = 'Data source type  name (Spanish)'\nexport const DATASOURCE_TYPE_NAME_PO = 'Data source type name (Portugese)'\nexport const DATA_SOURCE_TYPE_LIST = 'Data Source Type List'\nexport const DATA_SOURCE_TYPE_ACTIVE = 'Active'\nexport const UPDATE_DATA_SOURCE_TYPE = \"Update Data Source Type\"\nexport const ADD_NEW_DATA_SOURCE_TYPE = \"Add New Data Source Type\"\nexport const ADD_DATASOURCE = 'Add Data Source'\nexport const UPDATE_DATASOURCE = 'Update Data Source'\nexport const DATASOURCE_NAME_EN = 'Data source name (English)'\nexport const DATASOURCE_NAME_FR = 'Data source name (French)'\nexport const DATASOURCE_NAME_SP = 'Data source name (Spanish)'\nexport const DATASOURCE_NAME_PO = 'Data source name (Portugese)'\nexport const DATASOURCE_ACTIVE = 'Active'\nexport const DATA_SOURCE_LIST = 'Data Source  List'\nexport const SELECT_DATA_SOURCE_TYPE='Select Data Source Type'\nexport const ADD_NEW_DATA_SOURCE = \"Add New Data Source\"\n\nexport const ADD_CURRENCY = 'Add Currency'\nexport const UPDATE_CURRENCY = 'Update Currency'\nexport const CURRENCY_NAME_EN = 'Currency name (English)'\nexport const CURRENCY_NAME_FR = 'Currency name (French)'\nexport const CURRENCY_NAME_SP = 'Currency name (Spanish)'\nexport const CURRENCY_NAME_PO = 'Currency name (Portugese)'\nexport const CURRENCY_CODE = 'Currency code'\nexport const CURRENCY_SYMBOL = 'Currency symbol'\nexport const CONVERSIONRATE_TO_USD = 'Conversion rate to usd'\nexport const CURRENCY_LIST=\"Currency List\"\nexport const ADD_NEW_CURRENCY=\"Add New Currency\"\n\n\n\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, TITLE_USER_LIST, TITLE_ADD_USER, ACTIVE, LAST_LOGIN_DATE, FAILED_ATTEMPTS, BTN_EDIT, BTN_FAILED_ATTEMPTS, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\nconst cache = {}\nexport default class UserListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userList: []\n        }\n        this.editUser = this.editUser.bind(this);\n        this.unlockAccount = this.unlockAccount.bind(this);\n        this.addNewUser = this.addNewUser.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getUserList()\n            .then(response => {\n                this.setState({\n                    userList: response.data\n                })\n            })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n    render() {\n        return (\n            <div className=\"userList\">\n                <p>{this.props.match.params.message}</p>\n                <h1>{TITLE_USER_LIST}</h1>\n                <div className=\"container\">\n                    <button className=\"btn btn-add\"type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewUser}>{TITLE_ADD_USER}</button><br /><br />\n                    <div className=\"row\">\n                                        <div className=\"col-md-12 scrollable\"></div>\n                    <table className=\"table table-responsive\" border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{REALM}</th>\n                                <th>{USERNAME}</th>\n                                <th>{EMAIL_ID}</th>\n                                <th>{PHONE_NO}</th>\n                                <th>{ROLE}</th>\n                                <th>{PREFERRED_LANGUAGE}</th>\n                                <th>{LAST_LOGIN_DATE}</th>\n                                <th>{FAILED_ATTEMPTS}</th>\n                                <th>{ACTIVE}</th>\n                                <th>{BTN_EDIT}</th>\n                                <th>{BTN_FAILED_ATTEMPTS}</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.userList.map(\n                                    user =>\n                                        // <tr key={user.userId} onClick={() => this.editUser(user.userId)}>\n                                        <tr key={user.userId} onClick={() => this.editUser(user)}>\n                                            <td>{user.realm.realmCode}</td>\n                                            <td>{user.username}</td>\n                                            <td>{user.emailId}</td>\n                                            <td>{user.phoneNumber}</td>\n                                            <td>{user.role.roleName}</td>\n                                            <td>{user.language.languageName}</td>\n                                            <td>{user.lastLoginDate}</td>\n                                            <td>{user.faildAttempts}</td>\n                                            <td>{user.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}\n                                            </td>\n                                            <td><button type=\"button\" onClick={() => this.editUser(user)}>{BTN_EDIT}</button></td>\n                                            <td><button type=\"button\" onClick={(e) => { e.stopPropagation(); this.unlockAccount(user) }}>{BTN_FAILED_ATTEMPTS}</button></td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table></div>\n                </div>\n\n            </div>\n        )\n    }\n    editUser(user) {\n        this.props.history.push({\n            pathname: \"/editUser\",\n            state: { user: user }\n        });\n    }\n    unlockAccount(user) {\n        if (navigator.onLine) {\n            UserService.unlockAccount(user)\n                .then(response => {\n                    this.props.history.push(`/userList/${response.data.message}`)\n                    window.location.reload();\n                })\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.response.data.message\n                                })\n                                break\n                        }\n                    }\n                );\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    addNewUser() {\n        if (navigator.onLine) {\n            this.props.history.push(`/addUser`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport SignUpService from \"../../api/SignUpService\";\nimport UserService from \"../../api/UserService\";\nimport { EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, ACTIVE, BTN_UPDATE, BTN_CANCEL, TITLE_EDIT_USER, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class EditUserComponent extends Component {\n    _isMounted = false;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            realms: [],\n            languages: [],\n            roles: [],\n            user: '',\n            'user.active': true\n        }\n        this.updateClicked = this.updateClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n\n    }\n    dataChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            user: this.props.location.state.user\n        });\n        UserService.getRealmList()\n            .then(response => {\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getLanguageList()\n            .then(response => {\n                this.setState({\n                    languages: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#userForm\").validate({\n            ignore: [],\n            rules: {\n                'user.emailId': {\n                    required: true,\n                    email: true\n                },\n                'user.phoneNumber': {\n                    required: true,\n                    number: true\n                },\n                'username': {\n                    required: true\n                },\n                'user.language.languageId': {\n                    required: true\n                },\n                'user.role.roleId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    dataChange(event) {\n        let { user } = this.state\n        [event.target.name] = event.target.value\n        if (event.target.name === \"user.realm.realmId\") {\n            user.realm.realmId = event.target.value\n        }\n        else if (event.target.name === \"user.realm.realmId\") {\n            user.realm.realmId = event.target.value\n        }\n        else if (event.target.name === \"user.role.roleId\") {\n            user.role.roleId = event.target.value\n        }\n        else if (event.target.name === \"user.language.languageId\") {\n            user.language.languageId = event.target.value\n        }\n        else if (event.target.name === \"user.emailId\") {\n            user.emailId = event.target.value\n        }\n        else if (event.target.name === \"user.username\") {\n            user.username = event.target.value\n        }\n        else if (event.target.name === \"user.phoneNumber\") {\n            user.phoneNumber = event.target.value\n        }\n        else if (event.target.name === \"user.active\") {\n            user.active = event.target.id === \"user.active2\" ? false : true\n        }\n\n        this.setState({\n            user\n        }, (\n        ) => {\n            // console.log(\"state after update---\",this.state.user)\n        })\n    }\n\n    render() {\n        const { realms } = this.state;\n        const { languages } = this.state;\n        const { roles } = this.state;\n        const { user } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>{item.realmCode}</option>\n                )\n            }, this);\n        let languagesList = languages.length > 0\n            && languages.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>{item.languageName}</option>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>{item.roleName}</option>\n                )\n            }, this);\n        return (\n            <div className=\"addUser\">\n                <form name=\"userForm\" id=\"userForm\">\n                    <h3>{TITLE_EDIT_USER}{this.state.user.userId}</h3>\n                    {REALM} : <select id=\"user.realm.realmId\" name=\"user.realm.realmId\" value={this.state.user.realm ? this.state.user.realm.realmId : ''} onChange={this.dataChange}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {realmList}\n                    </select><br></br><br></br>\n                    {USERNAME} : <input type=\"text\" id=\"user.username\" name=\"user.username\" value={this.state.user.username} onChange={this.dataChange} /><br></br><br></br>\n                    {EMAIL_ID} : <input type=\"text\" id=\"user.emailId\" name=\"user.emailId\" value={this.state.user.emailId} onChange={this.dataChange} /><br></br><br></br>\n                    {PHONE_NO} : <input type=\"text\" id=\"user.phoneNumber\" name=\"user.phoneNumber\" value={this.state.user.phoneNumber} onChange={this.dataChange} maxLength=\"15\" minLength=\"4\" /><br></br><br></br>\n                    {ROLE} : <select id=\"user.role.roleId\" name=\"user.role.roleId\" value={this.state.user.role ? this.state.user.role.roleId : ''} onChange={this.dataChange}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {roleList}\n                    </select><br></br><br></br>\n                    {PREFERRED_LANGUAGE} : <select id=\"user.language.languageId\" name=\"user.language.languageId\" value={this.state.user.language ? this.state.user.language.languageId : ''} onChange={this.dataChange}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {languagesList}\n                    </select><br></br><br></br>\n                    {ACTIVE}:\n                    <input type=\"radio\" id=\"user.active1\" name=\"user.active\" value={true} checked={this.state.user.active === true} onChange={this.dataChange} /> Active\n                    <input type=\"radio\" id=\"user.active2\" name=\"user.active\" value={false} checked={this.state.user.active === false} onChange={this.dataChange} /> Disabled\n                    <br></br><br></br>\n\n                    <button type=\"button\" onClick={this.updateClicked}>{BTN_UPDATE}</button>\n                    <button type=\"button\" onClick={this.cancelClicked}>{BTN_CANCEL}</button><br></br><br></br>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n    updateClicked() {\n        if (navigator.onLine) {\n            var json = this.state.user;\n            if ($(\"#userForm\").valid()) {\n                UserService.editUser(json)\n                    .then(response => {\n                        this.props.history.push(`/userList/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/userList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport RegistrationService from '../../api/RegistrationService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\n\nexport default class EditUserApprovalComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.dataChange = this.dataChange.bind(this);\n        this.submitUserApproval = this.submitUserApproval.bind(this);\n        this.state = {\n            registrationId: this.props.match.params.registrationId,\n            status:true\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    dataChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"editUserApproval\">\n                <form name=\"form1\" id=\"form1\" onSubmit={this.submitUserApproval}>\n                    <h3>User Approval</h3>\n                    <input type=\"hidden\" id=\"registrationId\" name=\"registrationId\" value={this.props.match.params.registrationId}></input>\n                    Email Id : <input type=\"text\" id=\"emailId\" name=\"emailId\" readOnly value={this.props.match.params.emailId} /><br></br><br></br>\n                    Status:\n                    <input type=\"radio\" id=\"status\" name=\"status\" value=\"TRUE\" onChange={this.dataChange} checked/> Approve\n                    <input type=\"radio\" id=\"status\" name=\"status\" onChange={this.dataChange} value=\"FALSE\" /> Reject\n                    <br></br><br></br>\n                    Notes : <textarea id=\"notes\" name=\"notes\" onChange={this.dataChange}></textarea><br></br><br></br>\n                    <button type=\"submit\">Submit</button><br></br><br></br>\n                </form>\n            </div>\n        )\n    }\n\n    submitUserApproval(event) {\n        event.preventDefault();\n        if (navigator.onLine) {\n            if($(\"#form1\").valid()){\n            var json = this.state\n            console.log(json);\n            RegistrationService.saveApproval(json)\n                .then(response => {\n                    this.props.history.push(`/listUserApproval/Approval updated successfully`)\n                })\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.response.data.message\n                                })\n                                break\n                        }\n                    }\n                );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n\n}\n\n","import axios from \"axios\"\n\nclass SignUpService {\n    getCountryList() {\n        return axios.get(`http://localhost:8081/api/getCountryList`, {\n        });\n    }\n\n    getStateListByCountryId(countryId) {\n        return axios.get(`http://localhost:8081/api/getStateListByCountryId/${countryId}`, {\n        });\n    }\n    getStateList() {\n        return axios.get(`http://localhost:8081/api/getStateList`, {\n        });\n    }\n\n    getCityListByStateIdAndCountryId(countryId, stateId) {\n        return axios.get(`http://localhost:8081/api/getCityList/${countryId}/${stateId}`, {\n        });\n    }\n    getCityList() {\n        return axios.get(`http://localhost:8081/api/getCityList`, {\n        });\n    }\n\n    saveRegistration(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`http://localhost:8081/api/saveRegistration/`, json, {\n        });\n    }\n}\n\nexport default new SignUpService()","import React, { Component } from 'react';\nimport UserService from \"../../api/UserService.js\";\n\n\nexport default class RoleListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            roles: [],\n            message: \"Initial message\"\n        }\n    }\n\n    componentDidMount() {\n        console.log(\"Going to call axios setup\");\n        \n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    render() {\n        return (\n            <>\n                <div>Hi this is the Role list page</div>\n                <table border=\"1\" align=\"center\">\n                    <thead>\n                        <tr>\n                            <th>Role Id</th>\n                            <th>Role name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.roles.map(role =>\n                                <tr key={role.roleId}>\n                                    <td>{role.roleId}</td>\n                                    <td>{role.roleName}</td>\n                                </tr>)\n                        }\n                    </tbody>\n                </table>\n                <br />\n                <h3>{this.state.message}</h3>\n            </>\n        );\n    }\n\n}","import axios from \"axios\";\nimport {API_URL} from '../Constants.js'\nclass LanguageService{\n\naddLanguage(json){\n    return axios.put(`${API_URL}/api/addLanguage/`, json, {\n    });\n}\n\ngetLanguageList() {\n    return axios.get(`${API_URL}/api/getLanguageListAll/`, {\n    });\n}\neditLanguage(json) {\n    return axios.put(`${API_URL}/api/editLanguage/`, json, {\n    });\n}\n\n}\n\nexport default new LanguageService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport * as myConst from '../../Labels.js';\nimport LanguageService from '../../api/LanguageService.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nclass AddLanguageComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            languageName: ''\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n    }\n    updateFieldData(event) {\n        this.setState(\n            {\n                [event.target.name]: event.target.value\n            }\n        )\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        $(\"#languageForm\").validate({\n            ignore: [],\n            rules: {\n                languageName: {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 100\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    submitForm(event) {\n        if (navigator.onLine) {\n            console.log(\"user in online-----\");\n            if ($(\"#languageForm\").valid()) {\n                LanguageService.addLanguage(this.state).then(response => {\n                    this.props.history.push(`/languageList/${response.data.message}`)\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n        } else {\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <h3>{myConst.ADD_LANGUAGE}</h3>\n                <form name=\"languageForm\" id=\"languageForm\">\n                    <div>\n                        <label>{myConst.LANGUAGE_NAME}:-</label>\n                        <input type=\"text\" name=\"languageName\" value={this.state.languageName} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n        );\n    }\n}\nexport default AddLanguageComponent;","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { ROLE_NAME,ROLE_ID,BUSINESS_FUNCTION,CAN_CREATE_ROLE,TITLE_ADD_ROLE,BTN_SUBMIT, BTN_CANCEL} from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class AddRoleComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            businessFunctions: [],\n            roles: []\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getBusinessFunctionList()\n            .then(response => {\n                this.setState({\n                    businessFunctions: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n            UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n       \n\n        $(\"#userForm\").validate({\n            ignore: [],\n            rules: {\n                languageId: {\n                    required: true\n                },\n                roleId: {\n                    required: true\n                },\n                username:{\n                    required:true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { businessFunctions } = this.state;\n        const { roles } = this.state;\n\n        let businessFunctionsList = businessFunctions.length > 0\n            && businessFunctions.map((item, i) => {\n                return (\n                    <option key={i} value={item.businessFunctionId}>{item.businessFunctionDesc}</option>\n                )\n            }, this);\n            let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>{item.roleName}</option>\n                )\n            }, this);\n        return (\n            <div className=\"addRole\">\n                <form name=\"roleForm\" id=\"roleForm\">\n                    <h3>{TITLE_ADD_ROLE}</h3>\n                    {ROLE_NAME} : <input type=\"text\" id=\"username\" name=\"username\" /><br></br><br></br>\n                    {ROLE_ID} : <input type=\"text\" id=\"emailId\" name=\"emailId\" /><br></br><br></br>\n                    {BUSINESS_FUNCTION} : <select id=\"businessFunctionIds\" name=\"businessFunctionIds\" multiple={true}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {businessFunctionsList}\n                    </select><br></br><br></br>\n                    {CAN_CREATE_ROLE} : <select id=\"canCreateRoleIds\" name=\"canCreateRoleIds\" multiple={true}>\n                        <option value=\"\">-Nothing Selected-</option>\n                        {roleList}\n                    </select><br></br><br></br>\n\n                    <button type=\"button\" onClick={this.submitClicked}>{BTN_SUBMIT}</button>\n                    <button type=\"button\" onClick={this.cancelClicked}>{BTN_CANCEL}</button><br></br><br></br>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n    submitClicked() {\n        // console.log($(\"#countryIds\").val())\n        if (navigator.onLine) {\n            var json = {\n                username: $(\"#username\").val(),\n                emailId: $(\"#emailId\").val(),\n                phoneNumber: $(\"#phoneNumber\").val(),\n                realm: {\n                    realmId: $(\"#realmId\").val()\n                },\n                role: {\n                    roleId: $(\"#roleId\").val()\n                },\n                language: {\n                    languageId: $(\"#languageId\").val()\n                },\n                countryIds:$(\"#countryIds\").val()\n            }\n            if ($(\"#userForm\").valid()) {\n                UserService.addNewUser(json)\n                    .then(response => {\n                        this.props.history.push(`/userList/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/userList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from '../../api/UserService'\nimport CryptoJS from 'crypto-js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\nimport bcrypt from 'bcryptjs';\n\n\nexport default class UpdateExpiredPasswordComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.logoutClicked = this.logoutClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        $.validator.addMethod('checkPassword', function () {\n            if ($('#newPassword').val() === $('#confirmNewPassword').val()) {\n                return true;\n            } else {\n                return false;\n            }\n        }, 'The New passwords do not match.');\n\n        // $.validator.addMethod('checkOldPassword', function () {\n        //     let userOff = JSON.parse(localStorage.getItem('user'));\n        //     let val;\n        //     console.log(\"password---\"+$('#oldPassword').val())\n        //     bcrypt.compare($('#oldPassword').val(), userOff.password, function (err, res) {\n        //         console.log(\"res---\"+res);\n        //             val = res; \n        //     });\n        //     if (val === true) {\n        //         return true;\n        //     } \n        //     if(val === false) {\n        //         return false;\n        //     }\n        //     // return val;\n        // }, 'Old password is incorrect.');\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                oldPassword: {\n                    required: true\n                },\n                newPassword: {\n                    required: true\n                },\n                confirmNewPassword: {\n                    required: true,\n                    checkPassword: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"login\">\n                <form name=\"form1\" id=\"form1\">\n                    <h3>Update Password</h3>\n                    Old password : <input type=\"password\" id=\"oldPassword\" name=\"oldPassword\" /><br></br><br></br>\n                    New password : <input type=\"password\" id=\"newPassword\" name=\"newPassword\" /><br></br><br></br>\n                    Confirm new password : <input type=\"password\" id=\"confirmNewPassword\" name=\"confirmNewPassword\" /><br></br><br></br>\n                    <Online><button type=\"button\" onClick={this.submitClicked}>Submit</button></Online>\n                    <Online><button type=\"button\" onClick={this.logoutClicked}>Logout</button><br></br><br></br></Online>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n\n    submitClicked() {\n        if ($(\"#form1\").valid()) {\n            if (navigator.onLine) {\n                UserService.updateExpiredPassword(AuthenticationService.getLoggedInUserId(),$('#oldPassword').val(),$('#newPassword').val())\n                    .then(response => {\n                        console.log(response.statusText)\n                        this.props.history.push(`/welcome/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            console.log(error.message);\n                            console.log(error.text);\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            } else {\n                alert(\"You must be Online to update the password.\")\n            }\n        }\n    }\n\n    logoutClicked() {\n        this.props.history.push(`/login/You are logged out.`)\n    }\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from '../../api/UserService'\nimport CryptoJS from 'crypto-js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\nimport bcrypt from 'bcryptjs';\n\n\nexport default class ChangePasswordComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.logoutClicked = this.logoutClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        $.validator.addMethod('checkPassword', function () {\n            if ($('#newPassword').val() === $('#confirmNewPassword').val()) {\n                return true;\n            } else {\n                return false;\n            }\n        }, 'The New passwords do not match.');\n\n        // $.validator.addMethod('checkOldPassword', function () {\n        //     let userOff = JSON.parse(localStorage.getItem('user'));\n        //     let val;\n        //     console.log(\"password---\"+$('#oldPassword').val())\n        //     bcrypt.compare($('#oldPassword').val(), userOff.password, function (err, res) {\n        //         console.log(\"res---\"+res);\n        //             val = res; \n        //     });\n        //     if (val === true) {\n        //         return true;\n        //     } \n        //     if(val === false) {\n        //         return false;\n        //     }\n        //     // return val;\n        // }, 'Old password is incorrect.');\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                oldPassword: {\n                    required: true\n                },\n                newPassword: {\n                    required: true\n                },\n                confirmNewPassword: {\n                    required: true,\n                    checkPassword: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"login\">\n                <form name=\"form1\" id=\"form1\">\n                    <h3>Update Password</h3>\n                    Old password : <input type=\"password\" id=\"oldPassword\" name=\"oldPassword\" /><br></br><br></br>\n                    New password : <input type=\"password\" id=\"newPassword\" name=\"newPassword\" /><br></br><br></br>\n                    Confirm new password : <input type=\"password\" id=\"confirmNewPassword\" name=\"confirmNewPassword\" /><br></br><br></br>\n                    <Online><button type=\"button\" onClick={this.submitClicked}>Submit</button></Online>\n                    <Online><button type=\"button\" onClick={this.logoutClicked}>Logout</button><br></br><br></br></Online>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n\n    submitClicked() {\n        if ($(\"#form1\").valid()) {\n            if (navigator.onLine) {\n                UserService.updateExpiredPassword(AuthenticationService.getLoggedInUserId(),$('#oldPassword').val(),$('#newPassword').val())\n                    .then(response => {\n                        console.log(response.statusText)\n                        this.props.history.push(`/welcome/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            console.log(error.message);\n                            console.log(error.text);\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            } else {\n                alert(\"You must be Online to update the password.\")\n            }\n        }\n    }\n\n    logoutClicked() {\n        this.props.history.push(`/login/You are logged out.`)\n    }\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from '../../api/UserService'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\n\nexport default class ForgotPasswordComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                username: {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"login\">\n                <form name=\"form1\" id=\"form1\">\n                    <h3>Forgot Password</h3>\n                    Username : <input type=\"text\" id=\"username\" name=\"username\" /><br></br><br></br>\n                    <Online><button type=\"button\" onClick={this.submitClicked}>Submit</button></Online>\n                    <Online><button type=\"button\" onClick={this.cancelClicked}>Cancel</button><br></br><br></br></Online>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n\n    submitClicked() {\n        if ($(\"#form1\").valid()) {\n            if (navigator.onLine) {\n                UserService.forgotPassword($('#username').val())\n                    .then(response => {\n                        // console.log(response.statusText)\n                        this.props.history.push(`/login/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            console.log(error.message);\n                            console.log(error.text);\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            } else {\n                alert(\"You must be Online to update the password.\")\n            }\n        }\n    }\n\n    cancelClicked() {\n        this.props.history.push(`/login/Action Canceled.`)\n    }\n}\n\n","import React, { Component } from 'react';\nimport LanguageService from '../../api/LanguageService.js'\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\n\nexport default class LanguageListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            langaugeList: []\n        }\n        this.editLanguage = this.editLanguage.bind(this);\n        this.addNewLanguage = this.addNewLanguage.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        LanguageService.getLanguageList()\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    langaugeList: response.data\n                })\n            })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n    }\n\n    editLanguage(language) {\n        this.props.history.push({\n            pathname: \"/editLanguage\",\n            state: { language: language }\n        });\n    }\n\n    addNewLanguage(){\n        if (navigator.onLine) {\n            this.props.history.push(`/addLanguage`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n    }\n\n    render() {\n        return (\n            <>\n            <div>\n             <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewLanguage}>{myConst.ADD_NEW_LANGUAGE_TITLE}</button><br /><br />\n            </div>  \n              <div className=\"langaugeList\">\n\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.LANGUAGE_NAME}</th>\n                                <th>{myConst.IS_ACTIVE}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.langaugeList.map(language =>\n\n                                    <tr key={language.languageId} onClick={() => this.editLanguage(language)}>\n                                        <td>{language.languageName}</td>\n                                        <td>{language.active.toString()}</td>\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </>\n        );\n    }\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport LanguageService from '../../api/LanguageService.js'\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\n\nexport default class EditLanguageComponent extends Component {\n\n    constructor(props) {\n\n        super(props);\n        this.state = { language: '' }\n\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n    }\n    componentDidMount() {\n       AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            language: this.props.location.state.language\n        });\n        console.log(this.state);\n        $(\"#updateLanguageForm\").validate({\n            ignore: [],\n            rules: {\n                'language.languageName': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 100\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    updateFieldData(event) {\n\n        let { language } = this.state\n\n        if (event.target.name === \"language.languageName\") {\n            console.log(\"inside if\")\n            language.languageName = event.target.value\n        } else if (event.target.name === \"language.active\") {\n            language.active = event.target.id === \"language.active2\" ? false : true\n        }\n\n        this.setState(\n            {\n                language\n            }\n        );\n    }\n\n    updateForm() {\n        if (navigator.onLine) {\n            if ($(\"#updateLanguageForm\").valid()) {\n\n                LanguageService.editLanguage(this.state.language).then(response => {\n                    this.props.history.push(`/languageList/${response.data.message}`)\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n\n            }\n        } else { alert(\"To perform this action you must be online.\"); }\n    }\n\n    render() {\n\n        return (\n            <>\n                <h3>{myConst.UPDATE_LANGUAGE}</h3>\n                <form name=\"updatyeLanguageForm\" id=\"updateLanguageForm\">\n                    <div>\n                        <label>{myConst.LANGUAGE_NAME}:-</label>\n                        <input type=\"text\" name=\"language.languageName\" value={this.state.language.languageName} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <div>\n                            {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"language.active1\" name=\"language.active\" value={true} checked={this.state.language.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"language.active2\" name=\"language.active\" value={false} checked={this.state.language.active === false} onChange={this.updateFieldData} /> Disabled\n        </div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n\n        );\n    }\n}","import axios from \"axios\";\nimport {API_URL} from '../Constants.js';\n\nclass DataSourceTypeService{\n\naddDataSourceType(json){\nreturn axios.put(`${API_URL}/api/addDataSourceType/`,json,{}\n);\n}\n\ngetDataSourceTypeList() {\n    return axios.get(`${API_URL}/api/getDataSourceTypeList/`, {\n    });\n}\n\ngetDataSourceTypeListActive() {\n    return axios.get(`${API_URL}/api/getDataSourceTypeListActive/`, {\n    });\n}\n\neditDataSourceType(json) {\n    return axios.put(`${API_URL}/api/editDataSourceType/`, json, {\n    });\n}\n}\nexport default new DataSourceTypeService();","import React,{Component} from 'react';\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport DataSourceTypeService from '../../api/DataSourceTypeService.js'\n\nexport default class AddDataSourceTypeComponent extends Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            \n         }\n\n         this.updateFieldData=this.updateFieldData.bind(this);\n         this.submitForm=this.submitForm.bind(this);\n\n    }\n\n    componentDidMount(){\n        AuthenticationService.setupAxiosInterceptors();\n        $(\"#dataSourceTypeForm\").validate({\n            ignore: [],\n            rules: {\n                'engLabel': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'freLabel': {\n                   \n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'spaLabel': {\n                    \n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'porLabel': {\n                    \n                    lettersonly: true,\n                    maxlength: 255\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n\n    }\n\n    updateFieldData(event){\n       //console.log(event.target.name); \n        this.setState(\n           {\n                [event.target.name]: event.target.value      \n            }\n        )\n\n    }\n\n    submitForm(){\n        if (navigator.onLine) {\n            if ($(\"#dataSourceTypeForm\").valid()) {\n                console.log(this.state);\n                DataSourceTypeService.addDataSourceType(this.state).then(response => {\n                    this.props.history.push(`/dataSourceTypeList/${response.data.message}`)\n                    console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n               \n\n\n            }\n        }else{\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\nrender(){\n        return(\n         <>\n        <h3>{myConst.ADD_DATASOURCE_TYPE}</h3>\n                <form name=\"dataSourceTypeForm\" id=\"dataSourceTypeForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"engLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"freLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"spaLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"porLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n        </>);\n    }\n}","import React, { Component } from 'react';\nimport DataSourceTypeService from '../../api/DataSourceTypeService'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\n\nexport default class DataSourceListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSourceList: []\n\n        }\n\n        this.editDataSourceType = this.editDataSourceType.bind(this);\n        this.addNewDataSourceType = this.addNewDataSourceType.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        DataSourceTypeService.getDataSourceTypeList().then(response => {\n            //console.log(response.data)\n            this.setState({\n                dataSourceList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    editDataSourceType(dataSourceType) {\n        this.props.history.push({\n            pathname: \"/editDataSourceType\",\n            state: { dataSourceType: dataSourceType }\n        });\n\n    }\n\n    addNewDataSourceType() {\n\n        if (navigator.onLine) {\n            this.props.history.push(`/addDataSourceType`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n\n    }\n    render() {\n        return (\n            <>\n\n\n                <div>\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewDataSourceType}>{myConst.ADD_NEW_DATA_SOURCE_TYPE}</button><br /><br />\n                </div>\n\n                <div className=\"dataSourceTypeList\">\n\n                    <h1>{myConst.DATA_SOURCE_TYPE_LIST}</h1>\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_EN}</th>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_FR}</th>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_SP}</th>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_PO}</th>\n                                <th>{myConst.DATA_SOURCE_TYPE_ACTIVE}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.dataSourceList.map(dataSourceType =>\n\n                                    <tr key={dataSourceType.dataSourceTypeId} onClick={() => this.editDataSourceType(dataSourceType)}>\n                                        <td>{dataSourceType.label.engLabel}</td>\n                                        <td>{dataSourceType.label.freLabel}</td>\n                                        <td>{dataSourceType.label.spaLabel}</td>\n                                        <td>{dataSourceType.label.porLabel}</td>\n                                        <td>{dataSourceType.active.toString()}</td>\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n            </>\n        );\n    }\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport DataSourceTypeService from '../../api/DataSourceTypeService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class UpdateDataSourceTypeComponent extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSourceType:\n            {\n                active: '',\n                labelId: '',\n                label: {\n                    engLabel: '',\n                    spaLabel: '',\n                    freLabel: '',\n                    porLabel: ''\n                }\n            }\n        }\n\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        console.log(this.props.location.state.dataSourceType);\n        this.setState({\n            dataSourceType: this.props.location.state.dataSourceType\n        });\n\n\n        $(\"#updatyeDataSourceTypeForm\").validate({\n            ignore: [],\n            rules: {\n                'dataSourceType.label.engLabel': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSourceType.label.freLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSourceType.label.spaLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSourceType.label.porLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n\n    updateFieldData(event) {\n        let { dataSourceType } = this.state\n\n        if (event.target.name === \"dataSourceType.label.engLabel\") {\n            console.log(\"inside if\")\n            dataSourceType.label.engLabel = event.target.value\n        } if (event.target.name === \"dataSourceType.label.freLabel\") {\n            console.log(\"inside if\")\n            dataSourceType.label.freLabel = event.target.value\n        } if (event.target.name === \"dataSourceType.label.spaLabel\") {\n            console.log(\"inside if\")\n            dataSourceType.label.spaLabel = event.target.value\n        } if (event.target.name === \"dataSourceType.label.porLabel\") {\n            console.log(\"inside if\")\n            dataSourceType.label.porLabel = event.target.value\n        } else if (event.target.name === \"dataSourceType.active\") {\n            dataSourceType.active = event.target.id === \"dataSourceType.active2\" ? false : true\n        }\n\n\n        this.setState(\n            {\n                dataSourceType\n            }\n        )\n    }\n\n    updateForm() {\n\n        if (navigator.onLine) {\n\n            if ($(\"#updatyeDataSourceTypeForm\").valid()) {\n\n                DataSourceTypeService.editDataSourceType(this.state.dataSourceType).then(response => {\n                    //this.props.history.push(`/languageList/${response.data.message}`)\n                    this.props.history.push(`/dataSourceTypeList/${response.data.message}`)\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n\n            }\n        }else{\n\n            alert(\"To perform this action you must be online.\");\n        }\n\n    }\n\n    render() {\n\n        return (\n            <>\n\n                <h3>{myConst.UPDATE_DATA_SOURCE_TYPE}</h3>\n                <form name=\"updatyeDataSourceTypeForm\" id=\"updatyeDataSourceTypeForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.engLabel\" value={this.state.dataSourceType.label.engLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.freLabel\" value={this.state.dataSourceType.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.spaLabel\" value={this.state.dataSourceType.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.porLabel\" value={this.state.dataSourceType.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"dataSourceType.active1\" name=\"dataSourceType.active\" value={true} checked={this.state.dataSourceType.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"dataSourceType.active2\" name=\"dataSourceType.active\" value={false} checked={this.state.dataSourceType.active === false} onChange={this.updateFieldData} /> Disabled\n                     </div>\n                    <input type=\"hidden\" name=\"dataSourceType.labelId\" value={this.state.dataSourceType.labelId} />\n                    <div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                    </div>\n                </form>\n\n\n\n            </>\n        );\n    }\n\n\n}\n\n","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass DataSourceService {\n\n    addDataSource(json) {\n        return axios.put(`${API_URL}/api/addDataSource/`, json, {}\n        );\n    }\n\n    getDataSourceList() {\n        return axios.get(`${API_URL}/api/getDataSourceList/`, {\n        });\n    }\n\n    editDataSource(json) {\n        return axios.put(`${API_URL}/api/editDataSource/`,json,{}\n            );\n        }\n    \n}\nexport default new DataSourceService();","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport DataSourceService from '../../api/DataSourceService';\nimport DataSourceTypeService from '../../api/DataSourceTypeService';\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class AddDataSource extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            label: {\n                engLabel: '',\n                freLabel: '',\n                spaLabel: '',\n                porLabel: ''\n            },\n            dataSourceType: {\n                dataSourceTypeId: ''\n            },\n            dataSourceTypeList: []\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        DataSourceTypeService.getDataSourceTypeListActive().then(response => {\n            //console.log(response.data)\n            this.setState({\n                dataSourceTypeList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n        $(\"#dataSourceForm\").validate({\n            ignore: [],\n            rules: {\n                'label.engLabel': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'label.freLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'label.spaLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'label.porLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSourceType.dataSourceTypeId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    updateFieldData(event) {\n        if (event.target.name === \"label.engLabel\") {\n            //console.log(\"inside if\")\n            this.state.label.engLabel = event.target.value\n        }\n        if (event.target.name === \"label.freLabel\") {\n            //console.log(\"inside if\")\n            this.state.label.freLabel = event.target.value\n        } if (event.target.name === \"label.spaLabel\") {\n            //console.log(\"inside if\")\n            this.state.label.spaLabel = event.target.value\n        } if (event.target.name === \"label.porLabel\") {\n            //console.log(\"inside if\")\n            this.state.label.porLabel = event.target.value\n        }\n        else if (event.target.name === \"dataSourceType.dataSourceTypeId\") {\n            this.state.dataSourceType.dataSourceTypeId = event.target.value\n        }\n\n        let { dataSource } = this.state\n        this.setState(\n            {\n                dataSource\n            }\n        )\n\n\n    }\n\n    submitForm() {\n\n        if (navigator.onLine) {\n            if ($(\"#dataSourceForm\").valid()) {\n                console.log(this.state);\n                delete this.state[\"dataSourceTypeList\"];\n                DataSourceService.addDataSource(this.state).then(response => {\n                    this.props.history.push(`/dataSourceList/${response.data.message}`)\n                    //console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n               \n\n            }\n        } else {\n            alert(\"To perform this action you must be online.\");\n\n        }\n\n    }\n\n\n    render() {\n        const { dataSourceTypeList } = this.state;\n        let dataSourceTypes = dataSourceTypeList.length > 0\n            && dataSourceTypeList.map((item, i) => {\n                return (\n                    <option key={i} value={item.dataSourceTypeId}>{item.label.engLabel}</option>\n                )\n            }, this);\n        return (\n            <>\n\n                <h3>{myConst.ADD_DATASOURCE}</h3>\n                <form name=\"dataSourceForm\" id=\"dataSourceForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"label.engLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"label.freLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"label.spaLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"label.porLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n\n                    <div>\n                        {myConst.SELECT_DATA_SOURCE_TYPE} : <select id=\"dataSourceTypeId\" name=\"dataSourceType.dataSourceTypeId\" onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {dataSourceTypes}\n                        </select>\n                    </div>\n                    <br></br>\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n        );\n\n    }\n\n}","import React,{Compoent, Component} from 'react';\nimport DataSourceService from '../../api/DataSourceService';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\n\n\nexport default class DataSourceListComponent extends Component{\n\nconstructor(props){\nsuper(props);\nthis.state={\ndataSourceList:[]\n\n}\nthis.editDataSource=this.editDataSource.bind(this);\nthis.addNewDataSource=this.addNewDataSource.bind(this);\n}\n\ncomponentDidMount() {\n    AuthenticationService.setupAxiosInterceptors();\n    DataSourceService.getDataSourceList().then(response => {        \n        this.setState({\n            dataSourceList: response.data\n        })\n    })\n        .catch(\n            error => {\n                switch (error.message) {\n                    case \"Network Error\":\n                        this.setState({\n                            message: error.message\n                        })\n                        break\n                    default:\n                        this.setState({\n                            message: error.message\n                        })\n                        break\n                }\n            }\n        );\n}\n\neditDataSource(dataSource) {\n    this.props.history.push({\n        pathname: \"/editDataSource\",\n        state: { dataSource: dataSource }\n    });\n\n}\n\naddNewDataSource(){\n\n    if (navigator.onLine) {\n        this.props.history.push(`/addDataSource`)\n    } else {\n        alert(\"You must be Online.\")\n    }\n\n}\n\nrender() {\n    return (\n        <>\n\n\n            <div>\n                <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewDataSource}>{myConst.ADD_NEW_DATA_SOURCE}</button><br /><br />\n            </div>\n\n            <div className=\"dataSourceList\">\n\n                <h1>{myConst.DATA_SOURCE_LIST}</h1>\n                <table border=\"1\" align=\"center\">\n                    <thead>\n                        <tr>\n                            <th>{myConst.DATASOURCE_NAME_EN}</th>\n                            <th>{myConst.DATASOURCE_NAME_FR}</th>\n                            <th>{myConst.DATASOURCE_NAME_SP}</th>\n                            <th>{myConst.DATASOURCE_NAME_PO}</th>\n                            <th>{myConst.DATASOURCE_ACTIVE}</th>\n\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.dataSourceList.map(dataSource =>\n\n                                <tr key={dataSource.dataSourceId} onClick={() => this.editDataSource(dataSource)}>\n                                    <td>{dataSource.label.engLabel}</td>\n                                    <td>{dataSource.label.freLabel}</td>\n                                    <td>{dataSource.label.spaLabel}</td>\n                                    <td>{dataSource.label.porLabel}</td>\n                                    <td>{dataSource.active.toString()}</td>\n                                </tr>\n                            )\n\n                        }\n                    </tbody>\n                </table>\n            </div>\n\n        </>\n    );\n}\n\n}","import React, { Component } from 'react';\nimport DataSourceTypeService from '../../api/DataSourceTypeService';\nimport DataSourceService from '../../api/DataSourceService';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class UpdateDataSourceComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            dataSource: {\n                active: '',\n                dataSourceId: '',\n                label: {\n                    engLabel: '',\n                    spaLabel: '',\n                    freLabel: '',\n                    porLabel: '',\n                    labelId: '',\n                },\n                dataSourceType: {\n                    dataSourceTypeId: ''\n                }\n            },\n            dataSourceTypeList: []\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n    }\n\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            dataSource: this.props.location.state.dataSource\n        });\n\n        DataSourceTypeService.getDataSourceTypeListActive().then(response => {\n            //console.log(response.data)\n            this.setState({\n                dataSourceTypeList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#updatyeDataSourceForm\").validate({\n            ignore: [],\n            rules: {\n                'dataSource.label.engLabel': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSource.label.freLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSource.label.spaLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSource.label.porLabel': {\n\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'dataSource.dataSourceType.dataSourceTypeId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n\n    updateFieldData(event) {\n\n        let { dataSource } = this.state\n\n        if (event.target.name === \"dataSource.label.engLabel\") {\n            // console.log(\"inside if\")\n            dataSource.label.engLabel = event.target.value\n        } if (event.target.name === \"dataSource.label.freLabel\") {\n            //onsole.log(\"inside if\")\n            dataSource.label.freLabel = event.target.value\n        } if (event.target.name === \"dataSource.label.spaLabel\") {\n            //console.log(\"inside if\")\n            dataSource.label.spaLabel = event.target.value\n        } if (event.target.name === \"dataSource.label.porLabel\") {\n            //console.log(\"inside if\")\n            dataSource.label.porLabel = event.target.value\n        } if (event.target.name === \"dataSource.dataSourceType.dataSourceTypeId\") {\n            this.state.dataSource.dataSourceType.dataSourceTypeId = event.target.value\n        } else if (event.target.name === \"dataSource.active\") {\n            dataSource.active = event.target.id = \"dataSource.active2\" ? false : true\n        }\n\n\n        this.setState(\n            {\n                dataSource\n            }\n        )\n\n\n    }\n    updateForm() {\n\n        if (navigator.onLine) {\n            if ($(\"#updatyeDataSourceForm\").valid()) {\n                //console.log(this.state);\n                DataSourceService.editDataSource(this.state.dataSource).then(response => {\n                    this.props.history.push(`/dataSourceList/${response.data.message}`)\n                    //console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n\n        } else {\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\n    render() {\n        const { dataSourceTypeList } = this.state;\n        let dataSourceTypes = dataSourceTypeList.length > 0\n            && dataSourceTypeList.map((item, i) => {\n                return (\n                    <option key={i} value={item.dataSourceTypeId}>{item.label.engLabel}</option>\n                )\n            }, this);\n        return (\n\n            <>\n\n                <h3>{myConst.UPDATE_DATASOURCE}</h3>\n                <form name=\"updatyeDataSourceForm\" id=\"updatyeDataSourceForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.engLabel\" value={this.state.dataSource.label.engLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.freLabel\" value={this.state.dataSource.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.spaLabel\" value={this.state.dataSource.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.porLabel\" value={this.state.dataSource.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"dataSource.active1\" name=\"dataSource.active\" value={true} checked={this.state.dataSource.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"dataSource.active2\" name=\"dataSource.active\" value={false} checked={this.state.dataSource.active === false} onChange={this.updateFieldData} /> Disabled\n                     </div>\n                    <br /><br />\n                    <div>\n                        {myConst.SELECT_DATA_SOURCE_TYPE} : <select id=\"dataSourceTypeId\" name=\"dataSource.dataSourceType.dataSourceTypeId\" value={this.state.dataSource.dataSourceType ? this.state.dataSource.dataSourceType.dataSourceTypeId : ''} onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {dataSourceTypes}\n                        </select>\n                    </div>\n                    <br /><br />\n                    <input type=\"hidden\" name=\"dataSource.dataSourceId\" value={this.state.dataSource.dataSourceId} />\n                    <input type=\"hidden\" name=\"dataSource.label.labelId\" value={this.state.dataSource.label.labelId} />\n                    <div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n\n        );\n\n\n    }\n\n}","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass CurrencyService {\n\n    addCurrency(json) {\n        return axios.put(`${API_URL}/api/addCurrency/`, json, {}\n        );\n    }\n\n    getCurrencyList() {\n        return axios.get(`${API_URL}/api/getCurrencyList/`, {\n        });\n    }\n\n    editCurrency(json) {\n        return axios.put(`${API_URL}/api/editCurrency/`, json, {}\n        );\n    }\n}\nexport default new CurrencyService();","import React, { Component } from 'react';\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport CurrencyService from '../../api/CurrencyService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nexport default class AddCurrencyComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currencyCode: '',\n            currencySymbol: '',\n            label: {\n                engLabel: '',\n                freLabel: '',\n                spaLabel: '',\n                porLabel: ''\n            },\n            conversionRateToUsd: ''\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        $(\"#currencyForm\").validate({\n            ignore: [],\n            rules: {\n                'label.engLabel': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'label.freLabel': {\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'label.spaLabel': {\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'label.porLabel': {\n                    lettersonly: true,\n                    maxlength: 255\n                },\n                'currencyCode': {\n                    required: true,\n                    maxlength: 4\n                },\n                'currencySymbol': {\n                    required: true,\n                    maxlength: 3\n                },\n                'conversionRateToUsd': {\n                    required: true,\n                    integer:true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    updateFieldData(event) {\n        switch (event.target.name) {\n            case \"currencyCode\": this.state.currencyCode = event.target.value;\n            case \"currencySymbol\": this.state.currencySymbol = event.target.value;\n            case \"label.engLabel\": this.state.label.engLabel = event.target.value;\n            case \"label.freLabel\": this.state.label.freLabel = event.target.value;\n            case \"label.spaLabel\": this.state.label.spaLabel = event.target.value;\n            case \"label.porLabel\": this.state.label.porLabel = event.target.value;\n            case \"conversionRateToUsd\": this.state.conversionRateToUsd = event.target.value;\n            default: break;\n        }\n        let { currency } = this.state\n        this.setState(\n            {\n                currency\n            }\n        )\n\n    }\n    submitForm() {\n\n        if (navigator.onLine) {\n\n            if ($(\"#currencyForm\").valid()) {\n                CurrencyService.addCurrency(this.state).then(response => {\n                    this.props.history.push(`/currencyList/${response.data.message}`)\n                    console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n        } else {\n\n            alert(\"To perform this action you must be online.\");\n        }\n\n    }\n\n    render() {\n        return (\n            <>\n                <h3>{myConst.ADD_CURRENCY}</h3>\n                <form name=\"currencyForm\" id=\"currencyForm\">\n                    <div>\n                        <label>{myConst.CURRENCY_CODE}:-</label>\n                        <input type=\"text\" name=\"currencyCode\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_SYMBOL}:-</label>\n                        <input type=\"text\" name=\"currencySymbol\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"label.engLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"label.freLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"label.spaLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"label.porLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CONVERSIONRATE_TO_USD}:-</label>\n                        <input type=\"text\" name=\"conversionRateToUsd\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n\n            </>\n        );\n    }\n}","import React, { Compoent, Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport CurrencyService from '../../api/CurrencyService.js';\nimport * as myConst from '../../Labels.js';\n\n\nexport default class CurrencyListComponent extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currencyList: []\n        }\n        this.editCurrency = this.editCurrency.bind(this);\n        this.addNewCurrency=this.addNewCurrency.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        CurrencyService.getCurrencyList().then(response => {\n            this.setState({\n                currencyList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n\n    }\n\n    editCurrency(currency) {\n        this.props.history.push({\n            pathname: \"/editCurrency\",\n            state: { currency: currency }\n        });\n\n    }\n\n    addNewCurrency(){\n\n        if (navigator.onLine) {\n            this.props.history.push(`/addCurrency`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n    }\n    render() {\n\n        return (\n            <>\n\n                <div>\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewCurrency}>{myConst.ADD_NEW_CURRENCY}</button><br /><br />\n                </div>\n\n                <div className=\"currencyList\">\n\n                    <h1>{myConst.DATA_SOURCE_LIST}</h1>\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.CURRENCY_CODE}</th>\n                                <th>{myConst.CURRENCY_SYMBOL}</th>\n                                <th>{myConst.DATASOURCE_NAME_EN}</th>\n                                <th>{myConst.DATASOURCE_NAME_FR}</th>\n                                <th>{myConst.DATASOURCE_NAME_SP}</th>\n                                <th>{myConst.DATASOURCE_NAME_PO}</th>\n                                <th>{myConst.CONVERSIONRATE_TO_USD}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.currencyList.map(currency =>\n                                    <tr key={currency.currencyId} onClick={() => this.editCurrency(currency)}>\n                                        <td>{currency.currencyCode}</td>\n                                        <td>{currency.currencySymbol}</td>\n                                        <td>{currency.label.engLabel}</td>\n                                        <td>{currency.label.freLabel}</td>\n                                        <td>{currency.label.spaLabel}</td>\n                                        <td>{currency.label.porLabel}</td>\n                                        <td>{currency.conversionRateToUsd}</td>\n\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n            </>\n        );\n    }\n\n\n}","import React,{Component} from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport CurrencyService from '../../api/CurrencyService.js';\n\nexport default class UpdateCurrencyComponent extends Component{\n\nconstructor(props){\n    super(props);\n    this.state = {\n        currency: {\n        currencyCode:'',\n        currencySymbol:'',\n        label: {\n            engLabel: '',\n            freLabel: '',\n            spaLabel: '',\n            porLabel: ''\n        },\n        conversionRateToUsd: ''\n    }\n    }\n    this.updateFieldData=this.updateFieldData.bind(this);\n    this.updateForm=this.updateForm.bind(this);\n}\n\ncomponentDidMount() {\n    AuthenticationService.setupAxiosInterceptors();\n    this.setState({\n        currency:this.props.location.state.currency\n    });\n    $(\"#updateCurrencyForm\").validate({\n        ignore: [],\n        rules: {\n            'currency.label.engLabel': {\n                required: true,\n                lettersonly: true,\n                maxlength: 255\n            },\n            'currency.label.freLabel': {\n                lettersonly: true,\n                maxlength: 255\n            },\n            'currency.label.spaLabel': {\n                lettersonly: true,\n                maxlength: 255\n            },\n            'currency.label.porLabel': {\n                lettersonly: true,\n                maxlength: 255\n            },\n            'currency.currencyCode': {\n                required: true,\n                maxlength: 4\n            },\n            'currency.currencySymbol': {\n                required: true,\n                maxlength: 3\n            },\n            'currency.conversionRateToUsd': {\n                required: true,\n                integer:true\n            }\n        },\n        errorPlacement: function (error, element) {\n            error.insertAfter(element);\n        }\n    });\n}\n\nupdateFieldData(event) {\n    let { currency } = this.state\n\n    if (event.target.name === \"currency.currencyCode\") {\n        this.state.currency.currencyCode = event.target.value\n    }\n    if (event.target.name === \"currency.currencySymbol\") {\n        this.state.currency.currencySymbol = event.target.value;\n    }\n    if (event.target.name === \"currency.label.engLabel\") {\n        this.state.currency.label.engLabel = event.target.value\n    }\n    if (event.target.name === \"currency.label.freLabel\") {\n        this.state.currency.label.freLabel = event.target.value\n    }\n    if (event.target.name === \"currency.label.spaLabel\") {\n        this.state.currency.label.spaLabel = event.target.value\n    }\n    if (event.target.name === \"currency.label.porLabel\") {\n        this.state.currency.label.porLabel = event.target.value\n    }\n    else if (event.target.name === \"currency.conversionRateToUsd\") {\n        this.state.currency.conversionRateToUsd = event.target.value\n    }\n    // switch (event.target.name) {\n    //     case \"currency.currencyCode\": this.state.currency.currencyCode = event.target.value;\n    //     case \"currency.currencySymbol\": this.state.currency.currencySymbol = event.target.value;\n    //     case \"currency.label.engLabel\": this.state.currency.label.engLabel = event.target.value;\n    //     case \"currency.label.freLabel\": this.state.currency.label.freLabel = event.target.value;\n    //     case \"currency.label.spaLabel\": this.state.currency.label.spaLabel = event.target.value;\n    //     case \"currency.label.porLabel\": this.state.currency.label.porLabel = event.target.value;\n    //     case \"currency.conversionRateToUsd\": this.state.currency.conversionRateToUsd = event.target.value;\n    //     default: break;\n    // }\n    this.setState(\n        {\n            currency\n        }\n    )\n\n}\n\nupdateForm(){\n\n    if(navigator.onLine){\n\n        if ($(\"#updateCurrencyForm\").valid()) {\n\n            CurrencyService.editCurrency(this.state.currency).then(response => {\n                this.props.history.push(`/currencyList/${response.data.message}`)\n                console.log(\"success\");\n            }\n            )\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                        }\n                    }\n                )\n        }\n\n\n        }\n\n    else{\n        alert(\"To perform this action you must be online.\");     \n    }\n\n}\n   \nrender(){\n\nreturn( \n    <>\n     <h3>{myConst.UPDATE_CURRENCY}</h3>\n                <form name=\"updateCurrencyForm\" id=\"updateCurrencyForm\">\n                <div>\n                        <label>{myConst.CURRENCY_CODE}:-</label>\n                        <input type=\"text\" name=\"currency.currencyCode\" value={this.state.currency.currencyCode} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_SYMBOL}:-</label>\n                        <input type=\"text\" name=\"currency.currencySymbol\" value={this.state.currency.currencySymbol} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"currency.label.engLabel\" value={this.state.currency.label.engLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"currency.label.freLabel\" value={this.state.currency.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"currency.label.spaLabel\" value={this.state.currency.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"currency.label.porLabel\" value={this.state.currency.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CONVERSIONRATE_TO_USD}:-</label>\n                        <input type=\"text\" name=\"currency.conversionRateToUsd\" value={this.state.currency.conversionRateToUsd} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                    </div>\n                </form>\n    </>\n);\n\n}\n\n\n}","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport IdleTimer from 'react-idle-timer';\nimport WelcomeComponent from \"../home/WelcomeComponent\";\nimport { IdleTimeOutModal } from './IdleModal.js';\nimport PropTypes from 'prop-types';\n\nimport '../../css/bootstrap/bootstrap.min.css';\nimport '../../App.css'\nimport AddUserComponent from \"../user/AddUserComponent.jsx\";\nimport UserListComponent from \"../user/UserListComponent.jsx\";\nimport EditUserComponent from \"../user/EditUserComponent.jsx\";\nimport UpdateExpiredPasswordComponent from \"../home/UpdateExpiredPasswordComponent.jsx\";\nimport ChangePasswordComponent from \"../home/ChangePasswordComponent.jsx\";\nimport ForgotPasswordComponent from \"../home/ForgotPasswordComponent.jsx\";\nimport LoginComponent from \"../home/LoginComponent.jsx\";\nimport RoleListComponent from \"../user/RoleListComponent.jsx\";\nimport AddRoleComponent from \"../user/AddRoleComponent.jsx\";\nimport AuthenticationService from '../common/AuthenticationService.js';\n\nimport AddLanguageComponent from '../language/AddLanguageComponent'\nimport LanguageListComponent from \"../language/LanguageListComponent.jsx\"\nimport EditLanguageComponent from \"../language/EditLanguageComponent.jsx\"\nimport AddDataSourceTypeComponent from \"../datasourceType/AddDataSourceTypeComponent.jsx\"\nimport DataSourceTypeListComponent from \"../datasourceType/DataSourceTypeListComponent.jsx\"\nimport UpdateDataSourceTypeComponent from \"../datasourceType/UpdateDataSourceTypeComponent.jsx\"\nimport AddDataSource from \"../dataSource/AddDataSource.jsx\"\nimport DataSourceListComponent from \"../dataSource/DataSourceListComponent.jsx\"\nimport UpdateDataSourceComponent from \"../dataSource/UpdateDataSourceComponent.jsx\"\nimport AddCurrencyComponent from \"../currency/AddCurrencyComponent.jsx\"\nimport CurrencyListComponent from \"../currency/CurrencyListComponent.jsx\"\nimport UpdateCurrencyComponent from \"../currency/UpdateCurrencyComponent.jsx\"\n\nclass Layout extends React.Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            timeout: AuthenticationService.checkSessionTimeOut(),\n            showModal: false,\n            userLoggedIn: false,\n            isTimedOut: false\n        }\n\n        this.idleTimer = null\n        this.onAction = this._onAction.bind(this)\n        this.onActive = this._onActive.bind(this)\n        this.onIdle = this._onIdle.bind(this)\n        this.handleClose = this.handleClose.bind(this)\n        this.handleLogout = this.handleLogout.bind(this)\n    }\n\n    _onAction(e) {\n      console.log('user did something', e)\n      this.setState({isTimedOut: false})\n    }\n   \n    _onActive(e) {\n      console.log('user is active', e)\n      this.setState({isTimedOut: false})\n    }\n   \n    _onIdle(e) {\n      console.log('user is idle', e)\n      const isTimedOut = this.state.isTimedOut\n      if (isTimedOut) {\n          this.props.history.push('/')\n      } else {\n        this.setState({showModal: true})\n        this.idleTimer.reset();\n        this.setState({isTimedOut: true})\n      }\n      \n    }\n\n    handleClose() {\n      this.setState({showModal: false})\n    }\n\n    handleLogout() {\n      this.setState({showModal: false})\n      this.props.history.push('/')\n    }\n\n    render(){\n      const { match } = this.props\n      return(\n        <>\n          <IdleTimer\n            ref={ref => { this.idleTimer = ref }}\n            element={document}\n            onActive={this.onActive}\n            onIdle={this.onIdle}\n            onAction={this.onAction}\n            debounce={250}\n            timeout={this.state.timeout} />\n\n            <div className=\"\">\n            {/* {AuthenticationService.setupAxiosInterceptors()} */}\n                <Switch>\n\n                {/* <Route path=\"/\" exact component={LoginComponent} /> */}\n                <Route path=\"/login/:message\" exact component={LoginComponent} />\n                    <Route \n                        exact path={`${match.path}welcome`}\n                        render={(props) => <WelcomeComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}welcome/:message`}\n                        render={(props) => <WelcomeComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}addUser`}\n                        render={(props) => <AddUserComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}userList`}\n                        render={(props) => <UserListComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}userList/:message`}\n                        render={(props) => <UserListComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}editUser`}\n                        render={(props) => <EditUserComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}updateExpiredPassword`}\n                        render={(props) => <UpdateExpiredPasswordComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}changePassword`}\n                        render={(props) => <ChangePasswordComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}forgotPassword`}\n                        render={(props) => <ForgotPasswordComponent {...props} /> }/>\n                    />\n                    \n                    <Route \n                        exact path={`${match.path}addRole`}\n                        render={(props) => <AddRoleComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}roleList`}\n                        render={(props) => <RoleListComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}roleList/:message`}\n                        render={(props) => <RoleListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}addLanguage`}\n                        render={(props) => <AddLanguageComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editLanguage`}\n                        render={(props) => <EditLanguageComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}languageList/:message`}\n                        render={(props) => <LanguageListComponent {...props} /> }/>\n                    />\n\n                    \n                    <Route \n                        exact path={`${match.path}addDataSourceType`}\n                        render={(props) => <AddDataSourceTypeComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editDataSourceType`}\n                        render={(props) => <UpdateDataSourceTypeComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}dataSourceTypeList/:message`}\n                        render={(props) => <DataSourceTypeListComponent {...props} /> }/>\n                    />\n\n\n                    <Route \n                        exact path={`${match.path}addDataSource`}\n                        render={(props) => <AddDataSource {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editDataSource`}\n                        render={(props) => <UpdateDataSourceComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}dataSourceList/:message`}\n                        render={(props) => <DataSourceListComponent {...props} /> }/>\n                    />\n\n\n                    <Route \n                        exact path={`${match.path}addCurrency`}\n                        render={(props) => <AddCurrencyComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editCurrency`}\n                        render={(props) => <UpdateCurrencyComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}currencyList/:message`}\n                        render={(props) => <CurrencyListComponent {...props} /> }/>\n                    />\n\n                </Switch>\n                \n              {/*  <IdleTimeOutModal \n                    showModal={this.state.showModal} \n                    handleClose={this.handleClose}\n                    handleLogout={this.handleLogout}\n                />*/}\n            </div>\n        </>\n      )\n   }\n\n }\n\n Layout.propTypes = {\n     match: PropTypes.any.isRequired,\n     history: PropTypes.func.isRequired\n }\n\nexport default Layout","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport AuthenticatedRoute from \"./AuthenticatedRoute.jsx\";\nimport LoginComponent from \"../home/LoginComponent.jsx\";\nimport WelcomeComponent from \"../home/WelcomeComponent\";\nimport ErrorComponent from \"../common/ErrorComponent\";\nimport RegistrationComponent from \"../user/RegistrationComponent\";\nimport UserApprovalComponent from \"../user/UserApprovalComponent\";\nimport AddUserComponent from \"../user/AddUserComponent.jsx\";\nimport UserListComponent from \"../user/UserListComponent.jsx\";\nimport EditUserApprovalComponent from \"../user/EditUserApprovalComponent\";\nimport EditUserComponent from \"../user/EditUserComponent.jsx\";\nimport RoleListComponent from \"../user/RoleListComponent.jsx\";\nimport AddLanguageComponent from \"../language/AddLanguageComponent.jsx\"\nimport AddRoleComponent from \"../user/AddRoleComponent.jsx\";\nimport UpdateExpiredPasswordComponent from \"../home/UpdateExpiredPasswordComponent.jsx\";\nimport Layout from './Layout.js'\n\nclass Sidebar extends Component {\n    render() {\n        return (\n            <div className=\"Sidebar\">\n                <Router>\n                    <>\n                        <Switch>\n                            <Route path=\"/\" exact component={LoginComponent} />\n\n                            <Route path='/' render={(props) => <Layout {...props} /> } />\n                            {/* <Route path=\"/login/:message\" component={LoginComponent} /> */}\n                            {/* <Route path=\"/addUser\" component={AddUserComponent} /> */}\n                            {/* <Route path=\"/userList\" exact component={UserListComponent} /> */}\n                            {/* <Route path=\"/userList/:message\" component={UserListComponent} /> */}\n                            {/* <Route path=\"/editUser\" component={EditUserComponent} /> */}\n                            {/* <Route path=\"/addRole\" component={AddRoleComponent} /> */}\n                            {/* <Route path=\"/roleList\" component={RoleListComponent} /> */}\n                            {/* <Route path=\"/roleList/:message\" component={RoleListComponent} /> */}\n                            {/* <Route path=\"/editRole\" component={RoleListComponent} /> */}\n                            {/* <AuthenticatedRoute path=\"/updateExpiredPassword\" component={UpdateExpiredPasswordComponent} /> */}\n                            {/* <AuthenticatedRoute path=\"/welcome\" component={WelcomeComponent} /> */}\n                            {/* <AuthenticatedRoute path=\"/registration\" component={RegistrationComponent} /> */}\n                            {/* <AuthenticatedRoute path=\"/listUserApproval/:message\" component={UserApprovalComponent} /> */}\n                            {/* <AuthenticatedRoute path=\"/listUserApproval\" component={UserApprovalComponent} /> */}\n                            {/* <AuthenticatedRoute path=\"/editUserApproval/:registrationId/:emailId\" component={EditUserApprovalComponent} /> */}\n                            <Route component={ErrorComponent} />\n\n                        </Switch>\n                    </>\n                </Router>\n            </div>\n        );\n    }\n\n}\n\nexport default Sidebar;","import React from 'react';\nimport './App.css';\nimport Sidebar from './components/common/Sidebar';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Sidebar></Sidebar>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// AuthenticationService.setupAxiosInterceptors();\nserviceWorker.register();"],"sourceRoot":""}