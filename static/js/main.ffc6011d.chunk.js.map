{"version":3,"sources":["Js/actions.js","components/common/ErrorComponent.jsx","Js/validation.js","Constants.js","api/LoginService.js","components/common/AuthenticationService.js","components/home/LoginComponent.jsx","components/home/WelcomeComponent.jsx","api/UserService.js","Labels.js","components/user/AddUserComponent.jsx","components/user/UserListComponent.jsx","components/user/EditUserComponent.jsx","components/home/ChangePasswordComponent.jsx","components/user/RoleListComponent.jsx","components/user/AddRoleComponent.jsx","components/user/EditRoleComponent.jsx","api/LanguageService.js","components/language/AddLanguageComponent.jsx","components/language/LanguageListComponent.jsx","components/language/EditLanguageComponent.jsx","api/DataSourceTypeService.js","components/datasourceType/AddDataSourceTypeComponent.jsx","components/datasourceType/DataSourceTypeListComponent.jsx","components/datasourceType/UpdateDataSourceTypeComponent.jsx","api/DataSourceService.js","components/dataSource/AddDataSource.jsx","components/dataSource/DataSourceListComponent.jsx","components/dataSource/UpdateDataSourceComponent.jsx","api/CurrencyService.js","components/currency/AddCurrencyComponent.jsx","components/currency/CurrencyListComponent.jsx","components/currency/UpdateCurrencyComponent.jsx","api/CountryService.js","components/country/AddCountryComponent.jsx","components/country/CountryListComponent.jsx","components/country/UpdateCountryComponent.jsx","api/ShipmentStatusService.js","components/shipmentStatus/AddShipmentStatusComponent.jsx","components/shipmentStatus/ShipmentStatusListComponent.jsx","components/shipmentStatus/UpdateShipmentStatusComponent.jsx","api/ProgramService.js","components/program/DownloadProgramDataComponent.jsx","components/program/ImportProgramDataComponent.jsx","components/program/ExportProgramDataComponent.jsx","api/MasterSyncService.js","components/masterSync/SyncMasterDataComponent.jsx","api/RegionService.js","components/region/AddRegionComponent.jsx","components/region/EditRegionComponent.jsx","components/region/RegionListComponent.jsx","api/LabelService.js","components/label/UpdateLabelsComponent.jsx","components/label/LabelListComponent.jsx","api/UnitTypeService.js","components/unitType/AddUnitTypeComponent.jsx","components/unitType/UnitTypeListComponent.jsx","components/unitType/UpdateUnityTypeComponent.jsx","api/HealthAreaService.js","components/healthArea/AddHealthAreaComponent.jsx","components/healthArea/HealthAreaListComponent.jsx","components/healthArea/EditHealthAreaComponent.jsx","api/OrganisationService.js","components/organisation/AddOrganisationComponent.jsx","components/organisation/OrganisationListComponent.jsx","components/organisation/EditOrganisationComponent.jsx","components/common/Layout.js","components/home/UpdateExpiredPasswordComponent.jsx","components/home/ForgotPasswordComponent.jsx","components/home/ResetPasswordComponent.jsx","components/common/Sidebar.jsx","App.js","serviceWorker.js","index.js"],"names":["onload","x_navigation_onresize","page_content_onresize","$","css","content_minus","length","content","sidebar","height","document","window","width","hasClass","doc_height","show","removeClass","data","addClass","panel_refresh","panel","action","callback","find","remove","append","innerWidth","each","this","x_navigation_minimize","onresize","timeout","setTimeout","ready","on","e","stopPropagation","parents","fadeOut","parent","wr","prop","box","toggleClass","is","hide","prev","unwrap","resize","head","body","footer","hplus","wrap","panel_fullscreen","animate","panel_remove","blockOpen","attr","accordion","noCollapse","slideUp","slideDown","not","elm","index","setInterval","click","li","event","children","focus","x_navigation","Object","size","obj","key","hasOwnProperty","ErrorComponent","validator","addMethod","value","element","optional","test","API_URL","SECRET_KEY","LoginService","username","password","console","log","axios","post","AuthenticationService","decryptedPassword","i","localStorage","getItem","CryptoJS","AES","decrypt","toString","enc","Utf8","substring","setItem","decryptedCurUser","decryptedToken","jwt_decode","sub","user","language","languageId","typeOfSession","navigator","onLine","newUsername","usernameStored","originalText","confirm","decoded","Date","exp","curDate","sessionExpiresOn","basicAuthHeader","interceptors","request","use","config","headers","authorization","token","decodedObj","userObj","userId","db","openRequest","indexedDB","open","onupgradeneeded","target","result","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","bind","onsuccess","transaction","objectStore","delete","add","onerror","curuser","clear","alert","createIndex","unique","getAll","get","LoginComponent","props","state","message","loginClicked","forgotPassword","validate","ignore","rules","emailId","required","errorPlacement","error","insertAfter","className","name","id","match","params","type","href","onClick","val","valid","authenticate","then","response","encrypt","setupAxiosInterceptors","history","push","catch","status","setState","pathname","isUserLoggedIn","bcrypt","compare","err","res","removeItem","Component","WelcomeComponent","UserService","json","put","oldPassword","newPassword","REALM","ACTIVE","SYNC_FAILED","OFFLINE_MSG","SAME_PROGRAM_OVERWRITE_MESSAGE","AddUserComponent","getLanguageId","realms","languages","roles","submitClicked","cancelClicked","checkTypeOfSession","getRealmList","getLanguageList","getRoleList","email","phoneNumber","number","strongUsername","realmList","map","item","realmId","label","label_pr","label_en","label_fr","label_sp","languagesList","languageName","roleList","roleId","class","maxLength","minLength","multiple","realm","countryIds","addNewUser","UserListComponent","userList","editUser","unlockAccount","getUserList","style","marginLeft","border","align","lastLoginDate","moment","format","faildAttempts","active","location","reload","EditUserComponent","updateClicked","dataChange","Array","from","selectedOptions","onChange","checked","ChangePasswordComponent","checkOldPassword","strongPassword","confirmNewPassword","checkPassword","maxlength","getLoggedInUserId","changePassword","RoleListComponent","editRole","addNewRole","role","engLabel","porLabel","freLabel","spaLabel","AddRoleComponent","businessFunctions","getBusinessFunctionList","businessFunctionsList","businessFunctionId","data-live-search","data-actions-box","canCreateRole","readOnly","placeholder","AddLanguageComponent","updateFieldData","submitForm","Capitalize","lettersonly","str","charAt","toUpperCase","slice","LanguageService","addLanguage","LanguageListComponent","langaugeList","editLanguage","addNewLanguage","EditLanguageComponent","updateForm","myConst","AddDataSourceTypeComponent","lettersonlywhitespace","DataSourceTypeService","addDataSourceType","DataSourceListComponent","dataSourceList","editDataSourceType","addNewDataSourceType","getDataSourceTypeList","dataSourceType","dataSourceTypeId","UpdateDataSourceTypeComponent","labelId","AddDataSource","dataSourceTypeList","getDataSourceTypeListActive","dataSource","DataSourceService","addDataSource","dataSourceTypes","editDataSource","addNewDataSource","getDataSourceList","dataSourceId","UpdateDataSourceComponent","AddCurrencyComponent","currencyCode","currencySymbol","conversionRateToUsd","lettersonlyspecialchar","positiveintegerdecimal","currency","CurrencyService","addCurrency","CurrencyListComponent","currencyList","editCurrency","addNewCurrency","getCurrencyList","currencyId","UpdateCurrencyComponent","AddCountryComponent","languageList","getLanguageListActive","getCurrencyListActive","CountryService","addCountry","languageItems","currencyItems","itemOne","CountryListComponent","countryList","addNewCountry","editCountry","getCountryListAll","country","countryId","UpdateCountryComponent","curencyId","AddShipmentStatusComponent","shipmentStatus","nextShipmentStatusAllowed","shipmentStatusList","ShipmentStatusService","getShipmentStatusListActive","addShipmentStatus","shipmentStatusItems","shipmentStatusId","ShipmentStatusListComponent","editShipmentStatus","addNewShipmentStatus","getShipmentStatusListAll","UpdateShipmentStatusComponent","programId","DownloadProgramDataComponent","programList","downloadClicked","ProgramService","getProgramList","programItems","ype","confirmAlert","title","buttons","programArr","j","getProgramData","db1","program","encryptedText","JSON","stringify","programVersion","version","programName","labelEn","programData","putRequest","ImportProgramDataComponent","importClicked","programSubmitClicked","File","FileReader","FileList","Blob","undefined","querySelector","files","file","split","JSZip","loadAsync","zip","fileName","keys","forEach","filename","async","fileData","programDataJson","parse","plaintext","programDataJsonDecrypted","selectedPrgArr","program2","addProgramDataRequest","ExportProgramDataComponent","exportClicked","getRequest","proList","myResult","programJson","selectedPrgArrText","toArray","text","txt","parseInt","generateAsync","FileSaver","saveAs","lastSyncDate","SyncMasterDataComponent","totalMasters","syncedMasters","syncedPercentage","syncMasters","retryClicked","aria-valuenow","aria-valuemin","aria-valuemax","lastSyncDateTransaction","updatedSyncDate","now","utcOffset","lastSyncDateRequest","MasterSyncService","getCountryListForSync","countryObjectStore","Math","floor","getCurrencyListForSync","currencyObjectStore","getUnitListForSync","unitObjectStore","getUnitTypeList","unitTypeObjectStore","getOrganisationListForSync","organisationObjectStore","getHealthAreaListForSync","healthAreaObjectStore","getRegionListForSync","regionObjectStore","getFundingSourceListForSync","fundingSourceObjectStore","getSubFundingSourceListForSync","subFundingSourceObjectStore","getProductListForSync","productObjectStore","getProductCategoryListForSync","productCategoryObjectStore","getDataSourceListForSync","dataSourceObjectStore","getDataSourceTypeListForSync","dataSourceTypeObjectStore","getShipmentStatusListForSync","shipmentStatusObjectStore","getShipmentStatusAllowedListForSync","shipmentStatusAllowedObjectStore","getLogisticsUnitListForSync","logisticsUnitObjectStore","getPlanningUnitListForSync","planningUnitObjectStore","getManufacturerListForSync","manufacturerObjectStore","getLanguageListForSync","languageObjectStore","updatedLastSyncDateJson","AddRegionComponent","countries","region","realmCountry","selCountries","getCountryListByRealmId","realmCountryId","getRealmCountryList","labels","filter","c","RegionService","addRegion","EditRegionComponent","realmOnChangeEvent","getRealmCountryListByRealmId","editRegion","RegionListComponent","regions","getRegionList","regionId","UpdateLabelsComponent","LabelsService","updateLabels","LabelListComponent","labelList","editLabel","getLabelsListAll","createdDate","lastModifiedDate","AddUnitTypeComponent","unitType","UnitTypeService","addUniType","UnitTypeListComponent","unitTypeList","addNewUnitType","editUnitType","getUnitTypeListAll","unityType","unitTypeId","UpdateUnitTypeComponent","updateUnitType","AddHealthAreaComponent","healthArea","realmCountryArray","HealthAreaService","addHealthArea","HealthAreaListComponent","healthAreas","editHealthArea","getHealthAreaList","organisationId","EditHealthAreaComponent","disabled","AddOrganisationComponent","organisation","organisationCode","OrganisationService","addOrganisation","OrganisationListComponent","organisations","editOrganisation","getOrganisationList","EditOrganisationComponent","Layout","checkSessionTimeOut","showModal","userLoggedIn","isTimedOut","idleTimer","onAction","_onAction","onActive","_onActive","onIdle","_onIdle","handleClose","handleLogout","reset","ref","debounce","path","exact","component","render","React","UpdateExpiredPasswordComponent","logoutClicked","updateExpiredPassword","ForgotPasswordComponent","ResetPasswordComponent","confirmForgotPasswordToken","updatePassword","Sidebar","data-sound","basename","data-box","src","alt","App","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","getElementById","URL","process","origin","addEventListener","fetch","contentType","indexOf","unregister","checkValidServiceWorker"],"mappings":"gcA8QA,SAASA,IACLC,IACAC,IAGJ,SAASA,IACLC,IAAE,8EAA8EC,IAAI,QAAQ,IAAIA,IAAI,SAAS,IAE7G,IAAIC,EAAgB,EACpBA,EAAiBF,IAAE,yBAAyBG,OAAS,EAAK,GAAKD,EAC/DA,GAAkBF,IAAE,8BAA8BG,OAAS,EAAK,GAAK,EAErE,IAAIC,EAAUJ,IAAE,iBACZK,EAAUL,IAAE,iBAUhB,GARGI,EAAQE,SAAWN,IAAEO,UAAUD,SAAWJ,GACzCE,EAAQE,OAAON,IAAEO,UAAUD,SAAWJ,GAGvCG,EAAQC,SAAWF,EAAQE,UAC1BF,EAAQE,OAAOD,EAAQC,UAGxBN,IAAEQ,QAAQC,QAAU,KAAK,CAExB,GAAGT,IAAE,iBAAiBU,SAAS,UAAU,CACrC,GAAGV,IAAE,QAAQU,SAAS,wBAClB,IAAIC,EAAaX,IAAEO,UAAUD,SAAW,QAEpCK,EAAaX,IAAEQ,QAAQF,SAEhCN,IAAE,iBAAiBM,OAAOK,GAI1BX,IAAE,uBAAuBM,SAAWN,IAAEO,UAAUD,SAAS,IACxDN,IAAE,gEAAgEM,OAAON,IAAEO,UAAUD,SAAS,KAE9FN,IAAE,4CAA4CM,OAAON,IAAE,uBAAuBM,UAGlFN,IAAE,uBAAuBY,OACzBZ,IAAE,wBAAwBY,YAE1BZ,IAAE,uBAAuBM,OAAON,IAAE,kBAAkBM,SAAS,IAE1DN,IAAE,iBAAiBU,SAAS,WAC5BV,IAAE,iBAAiBC,IAAI,SAAS,IAGpCD,IAAEQ,QAAQC,QAAU,KAChBT,IAAE,QAAQU,SAAS,yBAClBV,IAAE,QAAQa,YAAY,wBAAwBC,KAAK,QAAQ,KAGhC,MAA5Bd,IAAE,QAAQc,KAAK,UACdd,IAAE,QAAQe,SAAS,wBAAwBD,KAAK,QAAQ,IAgEpE,SAASE,EAAcC,EAAMC,EAAOC,GAC5BF,EAAMP,SAAS,qBAQfO,EAAMG,KAAK,wBAAwBC,SACnCJ,EAAMJ,YAAY,oBAEfK,GAAqB,WAAXA,GAA2C,oBAAbC,GACvCA,MAXJF,EAAMK,OAAO,+EACbL,EAAMG,KAAK,wBAAwBX,MAAMQ,EAAMR,SAASH,OAAOW,EAAMX,UACrEW,EAAMF,SAAS,oBAEZG,GAAqB,UAAXA,GAA0C,oBAAbC,GACtCA,KAQRtB,IAmBJ,SAASC,KAEYU,OAAOe,YAAcvB,IAAEO,UAAUE,SAElC,MACZT,IAAE,+BAA+Ba,YAAY,0BAC7Cb,IAAE,mBAAmBa,YAAY,uBACjCb,IAAE,yCAAyCa,YAAY,UAGvDb,IAAE,4BAA4BwB,MAAK,WAC3BxB,IAAEyB,MAAMf,SAAS,uBACjBV,IAAE,4BAA4Be,SAAS,yBAAyBF,YAAY,gCAMjFb,IAAE,4BAA4BG,OAAS,GACtCuB,EAAsB,SAG1B1B,IAAE,0BAA0Be,SAAS,2BAA2BF,YAAY,0BAKpF,SAASa,EAAsBR,GAEd,QAAVA,IACClB,IAAE,mBAAmBa,YAAY,uBACjCb,IAAE,+BAA+Ba,YAAY,0BAC7Cb,IAAE,0BAA0BoB,KAAK,OAAOP,YAAY,aAAaE,SAAS,cAIjE,SAAVG,IACClB,IAAE,mBAAmBe,SAAS,uBAC9Bf,IAAE,+BAA+Be,SAAS,0BAC1Cf,IAAE,0BAA0BoB,KAAK,OAAOP,YAAY,aAAaE,SAAS,cAI9Ef,IAAE,2BAA2Ba,YAAY,UAyE7C,SAASc,EAASC,GACdA,EAAUA,GAAoB,IAE9BC,YAAW,WACP9B,MACF6B,GA/hBN5B,IAAEO,UAAUuB,OAAM,WAQd9B,IAAE,QAAQ+B,GAAG,SAAS,WAEd/B,IAAE,0DAA0Da,YAAY,aAGhFb,IAAE,mCAAmC+B,GAAG,SAAQ,SAASC,GACrDA,EAAEC,qBAINjC,IAAE,kBAAkB+B,GAAG,SAAQ,WAK3B,OAJA/B,IAAEyB,MAAMS,QAAQ,WAAWC,QAAQ,KAAI,WACnCnC,IAAEyB,MAAMJ,SACRrB,IAAE,mBAAmBqB,aAElB,KAKXrB,IAAE,gCAAgC+B,GAAG,SAAQ,WAChC/B,IAAEyB,MAAMW,OAAO,OAClB1B,SAAS,WACXV,IAAEyB,MAAMS,QAAQ,iBAAiBnB,SAAS,UAE1Cf,IAAEyB,MAAMS,QAAQ,iBAAiBrB,YAAY,aAGrDb,IAAE,wBAAwB+B,GAAG,SAAQ,WAIjC,OAHA/B,IAAEyB,MAAMS,QAAQ,iBAAiBC,QAAQ,KAAI,WACzCnC,IAAEyB,MAAMJ,aAEL,KAEXrB,IAAE,yBAAyB+B,GAAG,SAAQ,WAElC/B,IAAE,iBAAiBwB,MAAK,WAEpB,IAAIa,EAAKrC,IAAEyB,MAAML,KAAK,kBAAkBgB,OAAO,OAE5CC,EAAG3B,SAAS,YACXV,IAAEyB,MAAMZ,YAAY,UACpBwB,EAAGxB,YAAY,WACfwB,EAAGjB,KAAK,SAASkB,KAAK,WAAU,KAEhCtC,IAAEyB,MAAMV,SAAS,UACjBsB,EAAGtB,SAAS,WACZsB,EAAGjB,KAAK,SAASkB,KAAK,WAAU,UA4C5CtC,IAAE,oBAAoB+B,GAAG,SAAQ,WAC7BJ,OAKJ3B,IAAE,eAAe+B,GAAG,SAAQ,WACxB,IAAIQ,EAAMvC,IAAEA,IAAEyB,MAAMX,KAAK,QACzB,GAAGyB,EAAIpC,OAAS,EAAE,CACdoC,EAAIC,YAAY,QAEJD,EAAIzB,KAAK,SASzB,OAAO,KAEXd,IAAE,qBAAqB+B,GAAG,SAAQ,WAE/B,OADA/B,IAAEyB,MAAMS,QAAQ,gBAAgBrB,YAAY,SACrC,KAKVb,IAAE,8BAA8B+B,GAAG,SAAQ,WACvC/B,IAAE,uBAAuByC,GAAG,YAC1BzC,IAAE,uBAAuB0C,OACzB1C,IAAE,uBAAuBY,OAC3Bb,OAEJC,IAAE,+BAA+B+B,GAAG,SAAQ,WACxC/B,IAAE,wBAAwByC,GAAG,YAC3BzC,IAAE,wBAAwB0C,OAC1B1C,IAAE,wBAAwBY,OAC5Bb,OAKJC,IAAE,oBAAoB+B,GAAG,SAAQ,WAC7B/B,IAAEyB,MAAMe,YAAY,cAGxBxC,IAAE,iCAAiC+B,GAAG,SAAQ,WAE1C,IAAIO,EAAOtC,IAAEyB,MAAMkB,KAAK,SAASL,KAAK,WAEtCtC,IAAE,oBAAoBwB,MAAK,WACdxB,IAAEyB,MAAML,KAAK,wBACnBoB,YAAY,UAAUF,GAAMlB,KAAK,SAASkB,KAAK,UAAUA,SAQpEtC,IAAE,qBAAqB+B,GAAG,SAAQ,WAE9B,OAuKR,SAA0Bd,GAEtB,GAAGA,EAAMP,SAAS,sBACdO,EAAMJ,YAAY,sBAAsB+B,SACxC3B,EAAMG,KAAK,6BAA6BnB,IAAI,SAAS,IACrDgB,EAAMG,KAAK,yBAAyBP,YAAY,eAAeE,SAAS,aAExEf,IAAEQ,QAAQqC,aACT,CACD,IAAIC,EAAU7B,EAAMG,KAAK,kBACrB2B,EAAU9B,EAAMG,KAAK,eACrB4B,EAAU/B,EAAMG,KAAK,iBACrB6B,EAAU,IAEXF,EAAKrC,SAAS,qBAAuBqC,EAAKrC,SAAS,gBAClDuC,EAAQ,GAETH,EAAK3C,OAAS,IACb8C,GAASH,EAAKxC,SAAS,IAExB0C,EAAO7C,OAAS,IACf8C,GAASD,EAAO1C,SAAS,IAG7BW,EAAMG,KAAK,6BAA6Bd,OAAON,IAAEQ,QAAQF,SAAW2C,GAGpEhC,EAAMF,SAAS,sBAAsBmC,KAAK,6CAC1CjC,EAAMG,KAAK,yBAAyBP,YAAY,aAAaE,SAAS,eAEtEf,IAAEQ,QAAQqC,UAtMVM,CAAiBnD,IAAEyB,MAAMS,QAAQ,YAC1B,KAGXlC,IAAE,mBAAmB+B,GAAG,SAAQ,WAsMpC,IAAwBd,EAAMC,EAAOC,EAnM7B,OAmMgBF,EArMDjB,IAAEyB,MAAMS,QAAQ,WAuM1BxB,SAAS,kBACdO,EAAMJ,YAAY,iBAElBI,EAAMG,KAAK,gCAAgCP,YAAY,eAAeE,SAAS,iBAE5EG,GAAqB,UAAXA,GAA0C,oBAAbC,GACtCA,IAEJtB,MAGAoB,EAAMF,SAAS,iBAEfE,EAAMG,KAAK,kCAAkCP,YAAY,iBAAiBE,SAAS,eAEhFG,GAAqB,WAAXA,GAA2C,oBAAbC,GACvCA,IAEJtB,KAxNAG,IAAEyB,MAAMS,QAAQ,aAAarB,YAAY,SAClC,KAEXb,IAAE,iBAAiB+B,GAAG,SAAQ,WAG1B,OAuOR,SAAsBd,EAAMC,EAAOC,GAC5BD,GAAqB,WAAXA,GAA2C,oBAAbC,GACvCA,IAEJF,EAAMmC,QAAQ,CAAC,QAAU,GAAG,KAAI,WAC5BnC,EAAMmB,OAAO,0BAA0Bf,SACvCrB,IAAEyB,MAAMJ,SACLH,GAAqB,UAAXA,GAA0C,oBAAbC,GACtCA,IAGJtB,OApPAwD,CAAarD,IAAEyB,MAAMS,QAAQ,WAC7BlC,IAAEyB,MAAMS,QAAQ,aAAarB,YAAY,SAClC,KAEXb,IAAE,kBAAkB+B,GAAG,SAAQ,WAC3B,IAAId,EAAQjB,IAAEyB,MAAMS,QAAQ,UAQ5B,OAPAlB,EAAcC,GAEdY,YAAW,WACPb,EAAcC,KAChB,KAEFjB,IAAEyB,MAAMS,QAAQ,aAAarB,YAAY,SAClC,KAKXb,IAAE,6BAA6B+B,GAAG,SAAQ,WAEtC,IAAIuB,EAAYtD,IAAEyB,MAAM8B,KAAK,QACzBC,EAAYxD,IAAEyB,MAAMS,QAAQ,cAC5BuB,EAAaD,EAAU9C,SAAS,gBAGpC,GAAGV,IAAEsD,GAAWnD,OAAS,EAkBrB,OAhBGH,IAAEsD,GAAW5C,SAAS,mBACrBV,IAAEsD,GAAWI,QAAQ,KAAI,WACrB1D,IAAEyB,MAAMZ,YAAY,sBAGxBb,IAAEsD,GAAWK,UAAU,KAAI,WACvB3D,IAAEyB,MAAMV,SAAS,sBAIrB0C,GACAD,EAAUpC,KAAK,oBAAoBwC,IAAIN,GAAWI,QAAQ,KAAI,WAC1D1D,IAAEyB,MAAMZ,YAAY,uBAIrB,KAOfb,IAAE,6BAA6B+B,GAAG,UAAS,WACvCJ,OAKJ3B,IAAE,WAAW+B,GAAG,SAAQ,WACpB,IAAI8B,EAAM7D,IAAE,IAAIA,IAAEyB,MAAMX,KAAK,WAM7B,OALG+C,EAAIpB,GAAG,YACNoB,EAAI9C,SAAS,UAAUF,YAAY,QAEnCgD,EAAI9C,SAAS,QAAQF,YAAY,WAE9B,KAKXb,IAAE,mBAAmBwB,MAAK,SAASsC,GAC/B,IAAID,EAAM7D,IAAEyB,MACZsC,aAAY,WACRF,EAAI9C,SAAS,kBACT,IAAN+C,MAiOV,WAEI9D,IAAE,yBAAyBgE,OAAM,WAK7B,OAJAhE,IAAEyB,MAAMS,QAAQ,iBAAiBM,YAAY,qBAE7Cb,KAEO,KAGR3B,IAAE,4BAA4BG,OAAS,GACtCuB,EAAsB,SAG1B1B,IAAE,0BAA0BgE,OAAM,WAY9B,OAVGhE,IAAE,+BAA+BU,SAAS,2BACzCV,IAAE,mBAAmBa,YAAY,2BACjCa,EAAsB,UAEtB1B,IAAE,mBAAmBe,SAAS,2BAC9BW,EAAsB,UAG1BC,KAEO,KAGX3B,IAAE,yBAAyBgE,OAAM,WAE7B,IAAIC,EAAKjE,IAAEyB,MAAMW,OAAO,MACf6B,EAAG7B,OAAO,MAEhBhB,KAAK,SAASwC,IAAIK,GAAIpD,YAAY,aAIzCb,IAAE,oBAAoBgE,OAAM,SAASE,GACjCA,EAAMjC,kBAEN,IAAIgC,EAAKjE,IAAEyB,MAEP,GAAGwC,EAAGE,SAAS,MAAMhE,OAAS,GAAK8D,EAAGE,SAAS,UAAUhE,OAAS,GAAKH,IAAEyB,MAAMf,SAAS,cAAgB,EASpG,OARGuD,EAAGvD,SAAS,WACXuD,EAAGpD,YAAY,UACfoD,EAAG7C,KAAK,aAAaP,YAAY,WAEjCoD,EAAGlD,SAAS,UAEhBY,IAEG3B,IAAEyB,MAAMf,SAAS,cAAgB,KAQhDV,IAAE,cAAc+B,GAAG,SAAQ,WACvB/B,IAAEyB,MAAML,KAAK,SAASgD,WA1R1BC,MAGJrE,KAAE,WACEH,OAWJG,IAAEQ,QAAQqC,QAAO,WACb/C,IACAC,OAqSJuE,OAAOC,KAAO,SAASC,GACnB,IAAcC,EAAVF,EAAO,EACX,IAAKE,KAAOD,EACJA,EAAIE,eAAeD,IAAMF,IAEjC,OAAOA,GC7iBII,I,aCHf3E,IAAE4E,UAAUC,UAAU,WAAW,SAAUC,EAAOC,GAE9C,OAAOtD,KAAKuD,SAASD,IAAY,sBAAsBE,KAAKH,KAE3D,oEAEH9E,IAAE4E,UAAUC,UAAW,eAAe,SAAUC,EAAOC,GACrD,OAAOtD,KAAKuD,SAAUD,IAAa,YAAYE,KAAMH,KACpD,uBAEH9E,IAAE4E,UAAUC,UAAW,WAAW,SAAUC,EAAOC,GACjD,OAAOtD,KAAKuD,SAAUD,IAAa,UAAUE,KAAMH,KAClD,oDAEH9E,IAAE4E,UAAUC,UAAW,yBAAyB,SAAUC,EAAOC,GAC/D,OAAOtD,KAAKuD,SAAUD,IAAa,gBAAgBE,KAAMH,KACxD,qCAEH9E,IAAE4E,UAAUC,UAAW,0BAA0B,SAAUC,EAAOC,GAChE,OAAOtD,KAAKuD,SAAUD,IAAa,QAAQE,KAAMH,KAChD,6CAEH9E,IAAE4E,UAAUC,UAAW,0BAA0B,SAAUC,EAAOC,GAChE,OAAOtD,KAAKuD,SAAUD,IAAa,yCAAyCE,KAAMH,KACjF,6C,oBC5BQI,EAAU,6BAIVC,EAAa,kDCFpBC,E,qGAIWC,EAAUC,GAGnB,OAFAC,QAAQC,IAAI,cAAcH,GAC1BE,QAAQC,IAAI,cAAcF,GACnBG,IAAMC,KAAN,UAAcR,EAAd,iBAAqC,CAACG,WAAUC,YAAU,Q,KAM1D,MAAIF,E,0DCPbO,E,uGAEaN,EAAUC,GAErB,IADA,IAAIM,EAAoB,GACfC,EAAI,EAAGA,EAAIC,aAAa3F,OAAQ0F,IAAK,CAC1C,IAAIf,EAAQgB,aAAaC,QAAQD,aAAarB,IAAIoB,IAElD,GADwBG,IAASC,IAAIC,QAAQpB,EAAMqB,WAA3B,UAA0ChB,IAAcgB,SAASH,IAASI,IAAIC,OAC7EhB,EAAU,CAC/B,IAAIZ,EAAMqB,aAAarB,IAAIoB,GAAGS,UAAU,EAAG,IAC3CR,aAAaS,QAAQ,WAAW9B,GAChCmB,EAAoBI,IAASC,IAAIC,QAAQJ,aAAaC,QAAQ,YAActB,GAAK0B,WAA7D,UAA4EhB,IAAcgB,SAASH,IAASI,IAAIC,OAG5I,OAAOT,I,4CAIP,IAAIY,EAAmBR,IAASC,IAAIC,QAAQJ,aAAaC,QAAQ,WAAWI,WAArD,UAAoEhB,IAAcgB,SAASH,IAASI,IAAIC,MAC3HI,EAAiBT,IAASC,IAAIC,QAAQJ,aAAaC,QAAQ,SAAWS,GAAkBL,WAAvE,UAAsFhB,IAAcgB,SAASH,IAASI,IAAIC,MAE/I,OADcK,IAAWD,GACVE,M,0CAKf,OADuBX,IAASC,IAAIC,QAAQJ,aAAaC,QAAQ,WAAWI,WAArD,UAAoEhB,IAAcgB,SAASH,IAASI,IAAIC,Q,sCAK/H,IAAIG,EAAmBR,IAASC,IAAIC,QAAQJ,aAAaC,QAAQ,WAAWI,WAArD,UAAoEhB,IAAcgB,SAASH,IAASI,IAAIC,MAC/Hd,QAAQC,IAAI,sBAAwBgB,GACpC,IAAIC,EAAiBT,IAASC,IAAIC,QAAQJ,aAAaC,QAAQ,SAAWS,GAAkBL,WAAvE,UAAsFhB,IAAcgB,SAASH,IAASI,IAAIC,MAE/I,OADcK,IAAWD,GACVG,KAAKC,SAASC,a,2CAI7B,IAAIC,EAAgBjB,aAAaC,QAAQ,iBAGzC,OAFAR,QAAQC,IAAI,mBAAqBuB,GACjCxB,QAAQC,IAAI,cAAgBwB,UAAUC,QACf,WAAlBF,GAA8BC,UAAUC,QAA8B,YAAlBF,IAAgCC,UAAUC,QAC/F1B,QAAQC,IAAI,SACL,IAEPD,QAAQC,IAAI,UACL,K,qDAOgB0B,GAC3B3B,QAAQC,IAAI,oBAAsB0B,GAClC,IAAIC,EAAiBrB,aAAaC,QAAQ,YAE1C,GADAR,QAAQC,IAAI,oBAAsB2B,GACX,OAAnBA,GAA8C,KAAnBA,EAAuB,CAClD,IACIC,EADoBpB,IAASC,IAAIC,QAAQiB,EAArB,UAAwChC,IAC3BgB,SAASH,IAASI,IAAIC,MAE3D,OADAd,QAAQC,IAAI,uBAAyB4B,GACjCA,IAAiBF,KACb1G,OAAO6G,QAAQ,wEAQvB,OAAO,I,4CAKX,IAAIb,EAAmBR,IAASC,IAAIC,QAAQJ,aAAaC,QAAQ,WAAWI,WAArD,UAAoEhB,IAAcgB,SAASH,IAASI,IAAIC,MAC3HI,EAAiBT,IAASC,IAAIC,QAAQJ,aAAaC,QAAQ,SAAWS,GAAkBL,WAAvE,UAAsFhB,IAAcgB,SAASH,IAASI,IAAIC,MAC3IiB,EAAUZ,IAAWD,GACzBlB,QAAQC,IAAI8B,GACU,IAAIC,KAAmB,IAAdD,EAAQE,KAAvC,IACIC,EAAU,IAAIF,KAIlB,OAHAhC,QAAQC,IAAI,IAAI+B,KAAmB,IAAdD,EAAQE,MAC7BjC,QAAQC,IAAI,cAAgBiC,GAExB,IAAIF,KAAmB,IAAdD,EAAQE,KAAc,IAAID,MACnChC,QAAQC,IAAI,sBACL,IAEPD,QAAQC,IAAI,kBACL,K,4CAKX,IAAIgB,EAAmBR,IAASC,IAAIC,QAAQJ,aAAaC,QAAQ,WAAWI,WAArD,UAAoEhB,IAAcgB,SAASH,IAASI,IAAIC,MAC3HI,EAAiBT,IAASC,IAAIC,QAAQJ,aAAaC,QAAQ,SAAWS,GAAkBL,WAAvE,UAAsFhB,IAAcgB,SAASH,IAASI,IAAIC,MAC3IiB,EAAUZ,IAAWD,GAGzB,OAFAlB,QAAQC,IAAI,aAAc8B,GAC1B/B,QAAQC,IAAI,wBAA0B8B,EAAQV,KAAKc,kBAC5CJ,EAAQV,KAAKc,mB,+CAgBpBnC,QAAQC,IAAIM,aAAaC,QAAQ,YACjC,IAAIS,EAAmBR,IAASC,IAAIC,QAAQJ,aAAaC,QAAQ,WAAWI,WAArD,UAAoEhB,IAAcgB,SAASH,IAASI,IAAIC,MAE3HsB,EAAkB,UADD3B,IAASC,IAAIC,QAAQJ,aAAaC,QAAQ,SAAWS,GAAkBL,WAAvE,UAAsFhB,IAAcgB,SAASH,IAASI,IAAIC,MAE/Id,QAAQC,IAAI,WAAamC,GACzBlC,IAAMmC,aAAaC,QAAQC,KAEvB,SAACC,GAEG,OADAA,EAAOC,QAAQC,cAAgBN,EACxBI,O,4CAMGG,EAAOC,GACzB,IAAIC,EAAU,CACVF,MAAOA,EACPnB,cAAe,SACfsB,OAAQF,EAAWE,QAEnBA,EAAS,CACTA,OAAQF,EAAWE,QAEvB,GAAM,cAAe7H,OAEd,CACH,IAAI8H,EAEAC,EAAcC,UAAUC,KAAK,OAAQ,GAEzCF,EAAYG,gBAAkB,SAAU1G,GACpC,IAAIsG,EAAKtG,EAAE2G,OAAOC,OACbN,EAAGO,iBAAiBC,SAAS,gBACRR,EAAGS,kBAAkB,cAAe,CAAEC,QAAS,KAAMC,eAAe,IAEzFX,EAAGO,iBAAiBC,SAAS,iBACRR,EAAGS,kBAAkB,eAAgB,CAAEC,QAAS,KAAMC,eAAe,IAE1FX,EAAGO,iBAAiBC,SAAS,aACRR,EAAGS,kBAAkB,WAAY,CAAEC,QAAS,aAAcC,eAAe,IAE9FX,EAAGO,iBAAiBC,SAAS,YACRR,EAAGS,kBAAkB,UAAW,CAAEC,QAAS,YAAaC,eAAe,IAE5FX,EAAGO,iBAAiBC,SAAS,aACRR,EAAGS,kBAAkB,WAAY,CAAEC,QAAS,aAAcC,eAAe,IAE9FX,EAAGO,iBAAiBC,SAAS,SACRR,EAAGS,kBAAkB,OAAQ,CAAEC,QAAS,SAAUC,eAAe,IAEtFX,EAAGO,iBAAiBC,SAAS,aACRR,EAAGS,kBAAkB,WAAY,CAAEC,QAAS,aAAcC,eAAe,IAE9FX,EAAGO,iBAAiBC,SAAS,iBACRR,EAAGS,kBAAkB,eAAgB,CAAEC,QAAS,iBAAkBC,eAAe,IAEtGX,EAAGO,iBAAiBC,SAAS,eACRR,EAAGS,kBAAkB,aAAc,CAAEC,QAAS,eAAgBC,eAAe,IAElGX,EAAGO,iBAAiBC,SAAS,WACRR,EAAGS,kBAAkB,SAAU,CAAEC,QAAS,WAAYC,eAAe,IAE1FX,EAAGO,iBAAiBC,SAAS,kBACRR,EAAGS,kBAAkB,gBAAiB,CAAEC,QAAS,kBAAmBC,eAAe,IAExGX,EAAGO,iBAAiBC,SAAS,qBACRR,EAAGS,kBAAkB,mBAAoB,CAAEC,QAAS,qBAAsBC,eAAe,IAE9GX,EAAGO,iBAAiBC,SAAS,YACRR,EAAGS,kBAAkB,UAAW,CAAEC,QAAS,YAAaC,eAAe,IAE5FX,EAAGO,iBAAiBC,SAAS,oBACRR,EAAGS,kBAAkB,kBAAmB,CAAEC,QAAS,oBAAqBC,eAAe,IAE5GX,EAAGO,iBAAiBC,SAAS,eACRR,EAAGS,kBAAkB,aAAc,CAAEC,QAAS,eAAgBC,eAAe,IAElGX,EAAGO,iBAAiBC,SAAS,mBACRR,EAAGS,kBAAkB,iBAAkB,CAAEC,QAAS,mBAAoBC,eAAe,IAE1GX,EAAGO,iBAAiBC,SAAS,mBACRR,EAAGS,kBAAkB,iBAAkB,CAAEC,QAAS,mBAAoBC,eAAe,IAE1GX,EAAGO,iBAAiBC,SAAS,0BACRR,EAAGS,kBAAkB,wBAAyB,CAAEC,QAAS,0BAA2BC,eAAe,IAExHX,EAAGO,iBAAiBC,SAAS,iBACRR,EAAGS,kBAAkB,eAAgB,CAAEC,QAAS,iBAAkBC,eAAe,IAEtGX,EAAGO,iBAAiBC,SAAS,kBACRR,EAAGS,kBAAkB,gBAAiB,CAAEC,QAAS,kBAAmBC,eAAe,IAExGX,EAAGO,iBAAiBC,SAAS,iBACRR,EAAGS,kBAAkB,eAAgB,CAAEC,QAAS,iBAAkBC,eAAe,KAE7GC,KAAKzH,MAEP8G,EAAYY,UAAY,SAAUnH,GAE9B,IAEI4G,EADAhC,GAFJ0B,EAAKtG,EAAE2G,OAAOC,QACOQ,YAAY,CAAC,QAAS,aACpBC,YAAY,SAEnCT,EAAShC,EAAK0C,OAAOnB,EAAWE,SAEzBc,UAAY,SAAUjF,IACzB0E,EAAShC,EAAK2C,IAAInB,IACXoB,QAAU,SAAUtF,KAG3B0E,EAAOO,UAAY,SAAUjF,MAGjC0E,EAAOY,QAAU,SAAUtF,KAI3B,IACIuF,EADenB,EAAGc,YAAY,CAAC,WAAY,aACpBC,YAAY,YACvCT,EAASa,EAAQC,SACVP,UAAY,SAAUjF,IACzB0E,EAASa,EAAQF,IAAIlB,IACdmB,QAAU,SAAUtF,KAG3B0E,EAAOO,UAAY,SAAUjF,MAGjC0E,EAAOY,QAAU,SAAUtF,MAG7BgF,KAAKzH,WA1GPkI,MAAM,6C,+CA+GV,GAAM,cAAenJ,OAEd,CACH,IAAI8H,EAEAF,EAAU,EACVG,EAAcC,UAAUC,KAAK,OAAQ,GAEzCF,EAAYG,gBAAkB,SAAU1G,IACpCsG,EAAKtG,EAAE2G,OAAOC,QACNC,iBAAiBC,SAAS,SACRR,EAAGS,kBAAkB,OAAQ,CAAEC,QAAS,SAAUC,eAAe,IACnEW,YAAY,SAAU,SAAU,CAAEC,QAAQ,IAE7DvB,EAAGO,iBAAiBC,SAAS,YACRR,EAAGS,kBAAkB,UAAW,CAAEC,QAAS,WAC7CY,YAAY,SAAU,SAAU,CAAEC,QAAQ,KAEpEX,KAAKzH,MAEP8G,EAAYY,UAAY,SAAUnH,GAE9B,IAAI4G,EAEAa,GAHJnB,EAAKtG,EAAE2G,OAAOC,QAEQQ,YAAY,CAAC,WAAY,aACpBC,YAAY,YACvCT,EAASa,EAAQK,UACVX,UAAY,SAAUjF,GACzB,IAAI0C,EAAO0B,EAAGc,YAAY,CAAC,QAAS,aAAaC,YAAY,SAC7DT,EAAShC,EAAKmD,IAAInB,EAAOA,OAAO,GAAGP,SAC5BmB,QAAU,SAAUtF,KAG3B0E,EAAOO,UAAY,SAAUjF,GAGzB,OAFAkE,EAAUQ,EAAOA,OACjBrD,QAAQC,IAAI,aAAc4C,GACnBA,IAGfQ,EAAOY,QAAU,SAAUtF,MAG7BgF,KAAKzH,WAxCPkI,MAAM,2CA2CV,OAAOvB,M,KAMA,MAAIzC,ECvSEqE,G,mBAEjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,QAAS,IAEb,EAAKC,aAAe,EAAKA,aAAalB,KAAlB,gBACpB,EAAKmB,eAAiB,EAAKA,eAAenB,KAApB,gBANP,E,iFAUflJ,IAAE,UAAUsK,SAAS,CACjBC,OAAQ,GACRC,MAAO,CACHC,QAAS,CACLC,UAAU,GAEdpF,SAAU,CACNoF,UAAU,IAGlBC,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,+BAO1B,OAII,yBAAK+F,UAAU,iBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,cAEX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,eAEX,0BAAMC,KAAK,QAAQC,GAAG,SAGlB,yBAAKF,UAAU,cAEX,yBAAKA,UAAU,wBAEX,2BAAIrJ,KAAKwI,MAAMgB,MAAMC,OAAOf,WAIpC,yBAAKW,UAAU,cAEX,yBAAKA,UAAU,YAEX,yBAAKA,UAAU,eACX,0BAAMA,UAAU,8BAA6B,0BAAMA,UAAU,oBAC7D,2BAAOK,KAAK,OAAOH,GAAG,UAAUD,KAAK,UAAUD,UAAU,4BAE7D,0BAAMA,UAAU,iBAKxB,yBAAKA,UAAU,cAEX,yBAAKA,UAAU,YAEX,yBAAKA,UAAU,wBACX,0BAAMA,UAAU,8BAA6B,0BAAMA,UAAU,gBAC7D,2BAAOK,KAAK,WAAWH,GAAG,WAAWD,KAAK,WAAWD,UAAU,4BAEnE,0BAAMA,UAAU,iBAcxB,yBAAKA,UAAU,cAEX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,0BACX,kBAAC,SAAD,KAAQ,uBAAGM,KAAK,GAAGC,QAAS5J,KAAK4I,gBAAzB,qBACR,6BAAK,4BAAK5I,KAAKyI,MAAMC,aAKjC,yBAAKW,UAAU,cAEX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,4BACX,4BAAQK,KAAK,SAASL,UAAU,aAAaO,QAAS5J,KAAK2I,cAAc,qD,qCAmB7G,IAAD,OACP/E,EAAWrF,IAAE,YAAYsL,MACzBhG,EAAWtF,IAAE,aAAasL,MAC9B,GAAItL,IAAE,UAAUuL,QACZ,GAAIvE,UAAUC,OACV7B,EAAaoG,aAAanG,EAAUC,GAC/BmG,MAAK,SAAAC,GACF,IAAIpE,EAAUZ,IAAWgF,EAAS5K,KAAKoH,OACvCpC,aAAaS,QAAQ,SAAWe,EAAQe,OAAQrC,IAASC,IAAI0F,QAASD,EAAS5K,KAAKoH,MAAO/B,WAA3C,UAA0DhB,KAC1GW,aAAaS,QAAQ,YAAce,EAAQe,OAAQrC,IAASC,IAAI0F,QAASrE,EAAQV,KAAKvB,SAAUc,WAA7C,UAA4DhB,KAC/GW,aAAaS,QAAQ,YAAce,EAAQe,OAAQrC,IAASC,IAAI0F,QAASrE,EAAQV,KAAKtB,SAAUa,WAA7C,UAA4DhB,KAC/GW,aAAaS,QAAQ,gBAAiB,UACtCT,aAAaS,QAAQ,UAAWP,IAASC,IAAI0F,QAASrE,EAAQe,OAAQlC,WAAtC,UAAqDhB,KACrFI,QAAQC,IAAI,0BAA4BM,aAAa3F,QAErDwF,EAAsBiG,yBACtB,EAAK3B,MAAM4B,QAAQC,KAAnB,eAEHC,OACG,SAAAnB,GACI,GAAsB,MAAlBA,EAAMc,UAA8C,MAA1Bd,EAAMc,SAASM,OACzC,OAAQpB,EAAMc,SAAS5K,MACnB,IAAK,mBACD,EAAKmL,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,OAE5B,EAAKmJ,MAAM4B,QAAQC,KAAK,CACpBI,SAAU,yBACVhC,MAAO,CACH7E,SAAUA,KAGlB,MACJ,QACI,EAAK4G,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,YAKpC,OAAQ8J,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,kBAQ1C,CACD,IAAIvE,EAAoBD,EAAsBwG,eAAe9G,EAAUC,GAC9C,IAArBM,EACAwG,IAAOC,QAAQ/G,EAAUM,EAAmB,SAAU0G,EAAKC,GACnDD,GACA7K,KAAKwK,SAAS,CAAE9B,QAAS,kBAEzBoC,GACAzG,aAAaS,QAAQ,gBAAiB,WACtCT,aAAaS,QAAQ,UAAWP,IAASC,IAAI0F,QAAQ7F,aAAaC,QAAQ,YAAYI,WAAtD,UAAqEhB,KACrGW,aAAa0G,WAAW,YACxB/K,KAAKwI,MAAM4B,QAAQC,KAAnB,aAEArK,KAAKwK,SAAS,CAAE9B,QAAS,sBAE/BjB,KAAKzH,OAGPA,KAAKwK,SAAS,CAAE9B,QAAS,uB,uCAOrC1I,KAAKwI,MAAM4B,QAAQC,KAAnB,uB,GA3MoCW,c,SCZtCC,E,YAEF,WAAYzC,GAAO,2BACf,0CAAMA,I,sEAKN,OAQI,yBAAKa,UAAU,qBACX,wBAAIA,UAAU,eAGlB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,kCACX,yBAAKA,UAAU,iBACX,wBAAIA,UAAU,eAAd,YAEJ,yBAAKA,UAAU,cACX,2BAAIrJ,KAAKwI,MAAMgB,MAAMC,OAAOf,kB,GA3BzBsC,aA0ChBC,ICxCTC,G,qIAEE,OAAOlH,IAAMsE,IAAN,UAAa7E,EAAb,wBAA4C,M,oCAInD,OAAOO,IAAMsE,IAAN,UAAa7E,EAAb,oBAAwC,M,gDAI/C,OAAOO,IAAMsE,IAAN,UAAa7E,EAAb,gCAAoD,M,qCAI3D,OAAOO,IAAMsE,IAAN,UAAa7E,EAAb,qBAAyC,M,iCAGzC0H,GAIP,OAHArH,QAAQC,IAAIoH,GAGLnH,IAAMoH,IAAN,UAAa3H,EAAb,oBAAwC0H,EAAM,M,iCAG9CA,GAIP,OAHArH,QAAQC,IAAIoH,GAGLnH,IAAMoH,IAAN,UAAa3H,EAAb,oBAAwC0H,EAAM,M,oCAKrD,OAAOnH,IAAMsE,IAAN,UAAa7E,EAAb,oBAAwC,M,sCAGnCmD,GACZ,OAAO5C,IAAMsE,IAAN,UAAa7E,EAAb,gCAA4CmD,GAAU,M,+BAGxDuE,GACL,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,kBAAsC0H,EAAM,M,+BAI9CA,GAIL,OAHArH,QAAQC,IAAIoH,GAGLnH,IAAMoH,IAAN,UAAa3H,EAAb,kBAAsC0H,EAAM,M,oCAGzCvE,EAAQoC,GAClB,OAAOhF,IAAMoH,IAAN,UAAa3H,EAAb,8BAA0CmD,EAA1C,YAAoDoC,GAAW,M,4CAGpDpF,EAAUyH,EAAaC,GAEzC,OADAxH,QAAQC,IAAI,kBAAoBH,GACzBI,IAAMC,KAAN,UAAcR,EAAd,+BAAoD,CAAEG,WAAUyH,cAAaC,eAAe,M,qCAGxF1E,EAAQyE,EAAaC,GAEhC,OADAxH,QAAQC,IAAI,kBAAoB6C,GACzB5C,IAAMC,KAAN,UAAcR,EAAd,wBAA6C,CAAEmD,SAAQyE,cAAaC,eAAe,M,qCAE/E1H,GACX,OAAOI,IAAMsE,IAAN,UAAa7E,EAAb,+BAA2CG,GAAY,M,iDAEvCA,EAAU6C,GACjC,OAAOzC,IAAMC,KAAN,UAAcR,EAAd,oCAAyD,CAAEG,WAAU6C,SAAS,M,qCAE1E7C,EAAU6C,EAAO5C,GAC5B,OAAOG,IAAMC,KAAN,UAAcR,EAAd,wBAA6C,CAAEG,WAAU6C,QAAO5C,YAAY,Q,MAI5E,MAAIqH,EC1DNK,EAAQ,QAIRC,EAAS,SAgHTC,EAAY,4BACZC,EAAY,6CAIZC,EAA+B,6GCtIvBC,E,YAEjB,WAAYpD,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTpD,WAAYnB,EAAsB2H,gBAClCC,OAAQ,GACRC,UAAW,GACXC,MAAO,IAEX,EAAKC,cAAgB,EAAKA,cAAcxE,KAAnB,gBACrB,EAAKyE,cAAgB,EAAKA,cAAczE,KAAnB,gBATN,E,iFAYE,IAAD,OAChB3D,QAAQC,IAAI,WAAaG,EAAsBiI,sBAC1CjI,EAAsBiI,uBACvBjE,MAAM,uEACNlI,KAAKwI,MAAM4B,QAAQC,KAAnB,MAEJnG,EAAsBiG,yBACtBe,EAAYkB,eACPpC,MAAK,SAAAC,GACFnG,QAAQC,IAAI,gBAAiBkG,EAAS5K,MACtC,EAAKmL,SAAS,CACVsB,OAAQ7B,EAAS5K,UAEtBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAMrDwC,EAAYmB,kBACPrC,MAAK,SAAAC,GACF,EAAKO,SAAS,CACVuB,UAAW9B,EAAS5K,UAEzBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAMrDwC,EAAYoB,cACPtC,MAAK,SAAAC,GACF,EAAKO,SAAS,CACVwB,MAAO/B,EAAS5K,UAErBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAOrDnK,IAAE4E,UAAUC,UAAU,kBAAkB,SAAUC,GAC9C,MAAO,qCAAqCG,KAAKH,KAClD,iDACH9E,IAAE,aAAasK,SAAS,CACpBC,OAAQ,GACRC,MAAO,CACHC,QAAS,CACLC,UAAU,EACVsD,OAAO,GAEXC,YAAa,CACTvD,UAAU,EACVwD,QAAQ,GAEZpH,WAAY,CACR4D,UAAU,GAEd+C,MAAO,CACH/C,UAAU,GAEdrF,SAAU,CACNqF,UAAU,EACVyD,gBAAgB,IAGxBxD,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,+BAMpB,IAAD,OACGwI,EAAW9L,KAAKyI,MAAhBqD,OACAC,EAAc/L,KAAKyI,MAAnBsD,UACAC,EAAUhM,KAAKyI,MAAfuD,MAEJW,EAAYb,EAAOpN,OAAS,GACzBoN,EAAOc,KAAI,SAACC,EAAMzI,GACjB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKC,SACtB,WACE,OAAQ,EAAKrE,MAAMpD,YACf,KAAK,EAAG,OAAgC,OAAxBwH,EAAKE,MAAMC,UAA6C,KAAxBH,EAAKE,MAAMC,SAAkBH,EAAKE,MAAMC,SAAWH,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMG,UAA6C,KAAxBL,EAAKE,MAAMG,SAAkBL,EAAKE,MAAMG,SAAWL,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMI,UAA6C,KAAxBN,EAAKE,MAAMI,SAAkBN,EAAKE,MAAMI,SAAWN,EAAKE,MAAME,SAC9G,QAAS,OAAOJ,EAAKE,MAAME,UALjC,MAUXjN,MACHoN,EAAgBrB,EAAUrN,OAAS,GAChCqN,EAAUa,KAAI,SAACC,EAAMzI,GACpB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKxH,YACvBwH,EAAKQ,gBAGfrN,MACHsN,EAAWtB,EAAMtN,OAAS,GACvBsN,EAAMY,KAAI,SAACC,EAAMzI,GAChB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKU,QACtB,WACE,OAAQ,EAAK9E,MAAMpD,YACf,KAAK,EAAG,OAAgC,OAAxBwH,EAAKE,MAAMC,UAA6C,KAAxBH,EAAKE,MAAMC,SAAkBH,EAAKE,MAAMC,SAAWH,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMG,UAA6C,KAAxBL,EAAKE,MAAMG,SAAkBL,EAAKE,MAAMG,SAAWL,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMI,UAA6C,KAAxBN,EAAKE,MAAMI,SAAkBN,EAAKE,MAAMI,SAAWN,EAAKE,MAAME,SAC9G,QAAS,OAAOJ,EAAKE,MAAME,UALjC,MAUXjN,MACP,OACI,yBAAKqJ,UAAU,WACX,yBAAKA,UAAU,qBAEX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,IACX,wBAAImE,MAAM,gBAGd,yBAAKnE,UAAU,4BACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,iBACX,wBAAIA,UAAU,eAAd,oBAEJ,yBAAKA,UAAU,cACX,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,SAEX,0BAAMA,UAAU,kBAAkBC,KAAK,WAAWC,GAAG,YAEjD,yBAAKF,UAAU,cACX,2BAAOA,UAAU,+BAAjB,IAAiDkC,GACjD,yBAAKlC,UAAU,YACX,4BAAQA,UAAU,sBAAsBE,GAAG,UAAUD,KAAK,WACtD,4BAAQjG,MAAM,IAAd,sBACCsJ,KAIb,yBAAKtD,UAAU,cACX,2BAAOA,UAAU,0BDxLjD,WCwLgC,MACA,yBAAKA,UAAU,YACX,2BAAOK,KAAK,OAAOH,GAAG,WAAWD,KAAK,WAAWD,UAAU,mBAGnE,yBAAKA,UAAU,cACX,2BAAOA,UAAU,0BD7LjD,WC6LgC,KACA,yBAAKA,UAAU,YACX,2BAAOK,KAAK,OAAOH,GAAG,UAAUD,KAAK,UAAUD,UAAU,mBAGjE,yBAAKA,UAAU,cACX,2BAAOA,UAAU,0BAAjB,cACA,yBAAKA,UAAU,YACX,2BAAOK,KAAK,OAAOH,GAAG,cAAcD,KAAK,cAAcmE,UAAU,KAAKC,UAAU,IAAIrE,UAAU,mBAItG,yBAAKA,UAAU,cACX,2BAAOA,UAAU,0BAAjB,IDnMpC,QCoMoC,yBAAKA,UAAU,YACX,4BAAQA,UAAU,sBAAsBE,GAAG,QAAQD,KAAK,QAAQqE,UAAU,GACtE,4BAAQtK,MAAM,IAAd,sBACCiK,KAKb,yBAAKjE,UAAU,cACX,2BAAOA,UAAU,0BDzMvC,sBC0MsB,yBAAKA,UAAU,YACX,4BAAQA,UAAU,sBAAsBE,GAAG,aAAaD,KAAK,cACzD,4BAAQjG,MAAM,IAAd,sBACC+J,SAU7B,yBAAK/D,UAAU,gBAEX,4BAAQA,UAAU,kCAAkCK,KAAK,SAASE,QAAS5J,KAAKkM,eDvN9F,UCwNc,4BAAQ7C,UAAU,6BAA6BK,KAAK,SAASE,QAAS5J,KAAKiM,eDzNzF,mB,sCCmOL,IAAD,OAEZ,GADAnI,QAAQC,IAAIxF,IAAE,eAAesL,OACzBtE,UAAUC,OAEV,GADA1B,QAAQC,IAAI,WAAaG,EAAsBiI,sBAC3CjI,EAAsBiI,qBAAsB,CAC5C,IAAIhB,EAAO,CACPvH,SAAUrF,IAAE,aAAasL,MACzBb,QAASzK,IAAE,YAAYsL,MACvB2C,YAAajO,IAAE,gBAAgBsL,MAC/B+D,MAAO,CACHd,QAASvO,IAAE,YAAYsL,OAE3ByD,SAAU/O,IAAE,UAAUsL,MACtBzE,SAAU,CACNC,WAAY9G,IAAE,eAAesL,OAEjCgE,WAAYtP,IAAE,eAAesL,OAE7BtL,IAAE,aAAauL,SACfoB,EAAY4C,WAAW3C,GAClBnB,MAAK,SAAAC,GACF,EAAKzB,MAAM4B,QAAQC,KAAnB,oBAAqCJ,EAAS5K,KAAKqJ,aAEtD4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,mBAQzDR,MAAM,4EAGVA,MAAM,yB,sCAIVlI,KAAKwI,MAAM4B,QAAQC,KAAK,iC,GAxScW,a,iBCDzB+C,E,YAEjB,WAAYvF,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTuF,SAAU,IAEd,EAAKC,SAAW,EAAKA,SAASxG,KAAd,gBAChB,EAAKyG,cAAgB,EAAKA,cAAczG,KAAnB,gBACrB,EAAKqG,WAAa,EAAKA,WAAWrG,KAAhB,gBAPH,E,iFAUE,IAAD,OACXvD,EAAsBiI,uBACvBjE,MAAM,uEACNlI,KAAKwI,MAAM4B,QAAQC,KAAnB,MAEJnG,EAAsBiG,yBACtBe,EAAYiD,cACPnE,MAAK,SAAAC,GACFnG,QAAQC,IAAIkG,EAAS5K,MACrB,EAAKmL,SAAS,CACVwD,SAAU/D,EAAS5K,UAG1BiL,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,gB,+BAO/C,IAAD,OACL,OACI,yBAAKW,UAAU,YACX,2BAAIrJ,KAAKwI,MAAMgB,MAAMC,OAAOf,SAC5B,4BFrDe,aEsDf,yBAAKW,UAAU,aACX,4BAAQA,UAAU,cAAcK,KAAK,SAAS0E,MAAO,CAAEC,WAAY,UAAYzE,QAAS5J,KAAK8N,YFxDnF,mBEwDwH,6BAAM,6BACxI,yBAAKzE,UAAU,OACX,yBAAKA,UAAU,yBACf,2BAAOA,UAAU,yBAAyBiF,OAAO,IAAIC,MAAM,UACvD,+BACI,4BACI,4BAAKhD,GACL,4BF9CZ,YE+CY,4BF9CZ,YE+CY,4BF9CZ,YE+CY,4BFrCF,sBEsCE,4BFxCL,mBEyCK,4BFxCL,mBEyCK,4BAAKC,GACL,4BFrCZ,UEsCY,4BFrCD,oBEwCP,+BAEQxL,KAAKyI,MAAMuF,SAASpB,KAChB,SAAAzH,GAAI,OAEA,wBAAInC,IAAKmC,EAAKyB,OAAQgD,QAAS,kBAAM,EAAKqE,SAAS9I,KAC/C,4BACKA,EAAKyI,MAAMb,MAAME,UAEtB,4BAAK9H,EAAKvB,UACV,4BAAKuB,EAAK6D,SACV,4BAAK7D,EAAKqH,aACV,4BAAKrH,EAAKC,SAASiI,cACnB,4BAA4B,OAAvBlI,EAAKqJ,eAAiD,KAAvBrJ,EAAKqJ,cAAuBC,IAAOtJ,EAAKqJ,eAAeE,OAAO,sBAAsB,IACxH,4BAAKvJ,EAAKwJ,eACV,4BAAgC,SAA3BxJ,EAAKyJ,OAAOlK,WAAwB,SAAW,YAEpD,4BAAI,4BAAQgF,KAAK,SAASE,QAAS,kBAAM,EAAKqE,SAAS9I,KF1D/E,WE2DwB,4BAAI,4BAAQuE,KAAK,SAASE,QAAS,SAACrJ,GAAQA,EAAEC,kBAAmB,EAAK0N,cAAc/I,EAAKyB,OAAQzB,EAAK6D,WF1DnH,8B,+BEqEtB7D,GACLrB,QAAQC,IAAI,eAAgBoB,GAC5BnF,KAAKwI,MAAM4B,QAAQC,KAAK,CACpBI,SAAU,YACVhC,MAAO,CAAEtD,KAAMA,O,oCAGTyB,EAAQoC,GAAU,IAAD,OACvBzD,UAAUC,OACV0F,EAAYgD,cAActH,EAAQoC,GAC7BgB,MAAK,SAAAC,GACF,EAAKzB,MAAM4B,QAAQC,KAAnB,oBAAqCJ,EAAS5K,KAAKqJ,UACnD3J,OAAO8P,SAASC,YAEnBxE,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAOrDR,MAAM,yB,mCAIN3C,UAAUC,OACVxF,KAAKwI,MAAM4B,QAAQC,KAAnB,YAEAnC,MAAM,2B,GArI6B8C,aCC1B+D,E,YAEjB,WAAYvG,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTpD,WAAYnB,EAAsB2H,gBAClCC,OAAQ,GACRC,UAAW,GACXC,MAAO,GACP7G,KAAM,EAAKqD,MAAMqG,SAASpG,MAAMtD,KAChC,eAAe,GAEnB,EAAK6J,cAAgB,EAAKA,cAAcvH,KAAnB,gBACrB,EAAKyE,cAAgB,EAAKA,cAAczE,KAAnB,gBACrB,EAAKwH,WAAa,EAAKA,WAAWxH,KAAhB,gBAZH,E,iFAeE,IAAD,OACXvD,EAAsBiI,uBACvBjE,MAAM,uEACNlI,KAAKwI,MAAM4B,QAAQC,KAAnB,MAEJnG,EAAsBiG,yBAItBe,EAAYkB,eACPpC,MAAK,SAAAC,GACF,EAAKO,SAAS,CACVsB,OAAQ7B,EAAS5K,UAEtBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAMrDwC,EAAYmB,kBACPrC,MAAK,SAAAC,GACF,EAAKO,SAAS,CACVuB,UAAW9B,EAAS5K,UAEzBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAMrDwC,EAAYoB,cACPtC,MAAK,SAAAC,GACF,EAAKO,SAAS,CACVwB,MAAO/B,EAAS5K,UAErBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAOrDnK,IAAE4E,UAAUC,UAAU,kBAAkB,SAAUC,GAC9C,MAAO,qCAAqCG,KAAKH,KAClD,iDAEH9E,IAAE,aAAasK,SAAS,CACpBC,OAAQ,GACRC,MAAO,CACH,eAAgB,CACZE,UAAU,EACVsD,OAAO,GAEX,mBAAoB,CAChBtD,UAAU,EACVwD,QAAQ,GAEZ,gBAAiB,CACbxD,UAAU,EACVyD,gBAAgB,GAEpB,2BAA4B,CACxBzD,UAAU,GAEd,gBAAiB,CACbA,UAAU,IAGlBC,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,iCAKnBb,GAAQ,IACT0C,EAASnF,KAAKyI,MAAdtD,KACoB,uBAAtB1C,EAAMyE,OAAOoC,KACbnE,EAAKyI,MAAMd,QAAUrK,EAAMyE,OAAO7D,MAEP,uBAAtBZ,EAAMyE,OAAOoC,KAClBnE,EAAKyI,MAAMd,QAAUrK,EAAMyE,OAAO7D,MAEP,kBAAtBZ,EAAMyE,OAAOoC,KAClBnE,EAAKmI,SAAW4B,MAAMC,KAAK1M,EAAMyE,OAAOkI,iBAAiB,SAACvC,GAAD,OAAUA,EAAKxJ,SAE7C,6BAAtBZ,EAAMyE,OAAOoC,KAClBnE,EAAKC,SAASC,WAAa5C,EAAMyE,OAAO7D,MAEb,iBAAtBZ,EAAMyE,OAAOoC,KAClBnE,EAAK6D,QAAUvG,EAAMyE,OAAO7D,MAED,kBAAtBZ,EAAMyE,OAAOoC,KAClBnE,EAAKvB,SAAWnB,EAAMyE,OAAO7D,MAEF,qBAAtBZ,EAAMyE,OAAOoC,KAClBnE,EAAKqH,YAAc/J,EAAMyE,OAAO7D,MAEL,gBAAtBZ,EAAMyE,OAAOoC,OAClBnE,EAAKyJ,OAA6B,iBAApBnM,EAAMyE,OAAOqC,IAG/BvJ,KAAKwK,SAAS,CACVrF,SACD,iB,+BAMG,IAAD,OACG2G,EAAW9L,KAAKyI,MAAhBqD,OACAC,EAAc/L,KAAKyI,MAAnBsD,UACAC,EAAUhM,KAAKyI,MAAfuD,MAGJW,GAFa3M,KAAKyI,MAAdtD,KAEQ2G,EAAOpN,OAAS,GACzBoN,EAAOc,KAAI,SAACC,EAAMzI,GACjB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKC,SACtB,WACE,OAAQ,EAAKrE,MAAMpD,YACf,KAAK,EAAG,OAAgC,OAAxBwH,EAAKE,MAAMC,UAA6C,KAAxBH,EAAKE,MAAMC,SAAkBH,EAAKE,MAAMC,SAAWH,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMG,UAA6C,KAAxBL,EAAKE,MAAMG,SAAkBL,EAAKE,MAAMG,SAAWL,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMI,UAA6C,KAAxBN,EAAKE,MAAMI,SAAkBN,EAAKE,MAAMI,SAAWN,EAAKE,MAAME,SAC9G,QAAS,OAAOJ,EAAKE,MAAME,UALjC,MAUXjN,OACHoN,EAAgBrB,EAAUrN,OAAS,GAChCqN,EAAUa,KAAI,SAACC,EAAMzI,GACpB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKxH,YACvBwH,EAAKQ,gBAGfrN,MACHsN,EAAWtB,EAAMtN,OAAS,GACvBsN,EAAMY,KAAI,SAACC,EAAMzI,GAChB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKU,QACtB,WACE,OAAQ,EAAK9E,MAAMpD,YACf,KAAK,EAAG,OAAgC,OAAxBwH,EAAKE,MAAMC,UAA6C,KAAxBH,EAAKE,MAAMC,SAAkBH,EAAKE,MAAMC,SAAWH,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMG,UAA6C,KAAxBL,EAAKE,MAAMG,SAAkBL,EAAKE,MAAMG,SAAWL,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMI,UAA6C,KAAxBN,EAAKE,MAAMI,SAAkBN,EAAKE,MAAMI,SAAWN,EAAKE,MAAME,SAC9G,QAAS,OAAOJ,EAAKE,MAAME,UALjC,MAUXjN,MACP,OACI,oCACI,yBAAKqJ,UAAU,qBAEX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,IACX,wBAAImE,MAAM,gBAGd,yBAAKnE,UAAU,4BACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,iBACX,wBAAIA,UAAU,eH7NvB,iBG6NuDrJ,KAAKyI,MAAMtD,KAAKyB,SAElE,yBAAKyC,UAAU,cACX,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,SAEX,0BAAMA,UAAU,kBAAkBC,KAAK,WAAWC,GAAG,YAEjD,yBAAKF,UAAU,cACX,2BAAOA,UAAU,+BAAjB,IAAiDkC,GACjD,yBAAKlC,UAAU,YACX,4BAAQE,GAAG,qBAAqBD,KAAK,qBAAqBjG,MAAOrD,KAAKyI,MAAMtD,KAAKyI,MAAQ5N,KAAKyI,MAAMtD,KAAKyI,MAAMd,QAAU,GAAIuC,SAAUrP,KAAKiP,WAAY5F,UAAU,gBAC9J,4BAAQhG,MAAM,IAAd,sBACCsJ,KAIb,yBAAKtD,UAAU,cACX,2BAAOA,UAAU,0BHhOjD,WGgOgC,MACA,yBAAKA,UAAU,YACX,2BAAOK,KAAK,OAAOH,GAAG,gBAAgBD,KAAK,gBAAgBjG,MAAOrD,KAAKyI,MAAMtD,KAAKvB,SAAUyL,SAAUrP,KAAKiP,WAAY5F,UAAU,mBAGzI,yBAAKA,UAAU,cACX,2BAAOA,UAAU,0BHrOjD,WGqOgC,KACA,yBAAKA,UAAU,YACX,2BAAOK,KAAK,OAAOH,GAAG,eAAeD,KAAK,eAAejG,MAAOrD,KAAKyI,MAAMtD,KAAK6D,QAASqG,SAAUrP,KAAKiP,WAAY5F,UAAU,mBAGtI,yBAAKA,UAAU,cACX,2BAAOA,UAAU,0BH1OjD,YG2OgC,yBAAKA,UAAU,YACX,2BAAOK,KAAK,OAAOH,GAAG,mBAAmBD,KAAK,mBAAmBjG,MAAOrD,KAAKyI,MAAMtD,KAAKqH,YAAa6C,SAAUrP,KAAKiP,WAAYxB,UAAU,KAAKC,UAAU,IAAIrE,UAAU,mBAI/K,yBAAKA,UAAU,cACX,2BAAOA,UAAU,0BAAjB,IH3OpC,QG4OoC,yBAAKA,UAAU,YACX,4BAAQE,GAAG,gBAAgBD,KAAK,gBAAgBjG,MAAOrD,KAAKyI,MAAMtD,KAAKmI,SAAU+B,SAAUrP,KAAKiP,WAAY5F,UAAU,eAAesE,UAAU,GAC3I,4BAAQtK,MAAM,IAAd,sBACCiK,KAKb,yBAAKjE,UAAU,cACX,2BAAOA,UAAU,0BHjPvC,sBGkPsB,yBAAKA,UAAU,YACX,4BAAQE,GAAG,2BAA2BD,KAAK,2BAA2BjG,MAAOrD,KAAKyI,MAAMtD,KAAKC,SAAWpF,KAAKyI,MAAMtD,KAAKC,SAASC,WAAa,GAAIgK,SAAUrP,KAAKiP,WAAY5F,UAAU,gBACnL,4BAAQhG,MAAM,IAAd,sBACC+J,KAIb,yBAAK/D,UAAU,cACX,2BAAOA,UAAU,0BAA0BmC,GAC3C,yBAAKnC,UAAU,YACX,2BAAOK,KAAK,QAAQH,GAAG,eAAeD,KAAK,cAAcjG,OAAO,EAAMiM,SAAoC,IAA3BtP,KAAKyI,MAAMtD,KAAKyJ,OAAiBS,SAAUrP,KAAKiP,aADnI,UAEI,2BAAOvF,KAAK,QAAQH,GAAG,eAAeD,KAAK,cAAcjG,OAAO,EAAOiM,SAAoC,IAA3BtP,KAAKyI,MAAMtD,KAAKyJ,OAAkBS,SAAUrP,KAAKiP,aAFrI,kBAWpB,yBAAK5F,UAAU,gBAEX,4BAAQA,UAAU,kCAAkCK,KAAK,SAASE,QAAS5J,KAAKkM,eHtQ9F,UGuQc,4BAAQ7C,UAAU,6BAA6BK,KAAK,SAASE,QAAS5J,KAAKgP,eHtQzF,mB,sCGiRL,IAAD,OACZ,GAAIzJ,UAAUC,OACV,GAAItB,EAAsBiI,qBAAsB,CAC5C,IAAIhB,EAAOnL,KAAKyI,MAAMtD,KAClB5G,IAAE,aAAauL,SACfoB,EAAY+C,SAAS9C,GAChBnB,MAAK,SAAAC,GACF,EAAKzB,MAAM4B,QAAQC,KAAnB,oBAAqCJ,EAAS5K,KAAKqJ,aAEtD4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,mBAQzDR,MAAM,4EAGVA,MAAM,yB,sCAIVlI,KAAKwI,MAAM4B,QAAQC,KAAK,iC,GA1UeW,aCG1BuE,G,YAEjB,WAAY/G,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,QAAS,IAEb,EAAKuD,cAAgB,EAAKA,cAAcxE,KAAnB,gBACrB,EAAKyE,cAAgB,EAAKA,cAAczE,KAAnB,gBANN,E,iFAUVvD,EAAsBiI,uBACvBjE,MAAM,uEACNlI,KAAKwI,MAAM4B,QAAQC,KAAnB,MAEJnG,EAAsBiG,yBACtB5L,IAAE4E,UAAUC,UAAU,iBAAiB,WACnC,OAAI7E,IAAE,gBAAgBsL,QAAUtL,IAAE,uBAAuBsL,QAK1D,oCAEHtL,IAAE4E,UAAUC,UAAU,oBAAoB,WACtC,OAAI7E,IAAE,gBAAgBsL,OAAStL,IAAE,gBAAgBsL,OAC7C/F,QAAQC,IAAI,SACL,IAEPD,QAAQC,IAAI,cACL,KAEZ,mDACHxF,IAAE4E,UAAUC,UAAU,kBAAkB,SAAUC,GAC9C,MAAO,gEAAgEG,KAAKH,KAC7E,iDACH9E,IAAE,UAAUsK,SAAS,CACjBC,OAAQ,GACRC,MAAO,CACHsC,YAAa,CACTpC,UAAU,GAEdqC,YAAa,CACTrC,UAAU,EACVuG,kBAAkB,EAClBC,gBAAgB,GAEpBC,mBAAoB,CAChBzG,UAAU,EACV0G,eAAe,EACfF,gBAAgB,EAChBG,UAAW,KAGnB1G,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,+BAO1B,OAGI,yBAAK+F,UAAU,qBAEX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,IAAG,wBAAImE,MAAM,gBAI5B,yBAAKnE,UAAU,4BACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,kCACX,yBAAKA,UAAU,iBACX,wBAAIA,UAAU,eAAd,oBAEJ,yBAAKA,UAAU,cACX,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,SAEX,0BAAMA,UAAU,kBAAkBC,KAAK,QAAQC,GAAG,SAC9C,yBAAKF,UAAU,cACX,2BAAOA,UAAU,0BAAjB,kBACA,yBAAKA,UAAU,YACX,2BAAOK,KAAK,WAAWH,GAAG,cAAcD,KAAK,cAAcD,UAAU,mBAG7E,yBAAKA,UAAU,cACX,2BAAOA,UAAU,0BAAjB,kBACA,yBAAKA,UAAU,YACX,2BAAOK,KAAK,WAAWH,GAAG,cAAcD,KAAK,cAAcD,UAAU,mBAG7E,yBAAKA,UAAU,cACX,2BAAOA,UAAU,0BAAjB,sBACA,yBAAKA,UAAU,YACX,2BAAOK,KAAK,WAAWH,GAAG,qBAAqBD,KAAK,qBAAqBD,UAAU,mBAK3F,6BAAK,4BAAKrJ,KAAKyI,MAAMC,cAQrC,yBAAKW,UAAU,gBAEX,kBAAC,SAAD,KAAQ,4BAAQK,KAAK,SAASE,QAAS5J,KAAKkM,cAAe7C,UAAU,mCAA7D,WACR,kBAAC,SAAD,UAAU,4BAAQK,KAAK,SAASE,QAAS5J,KAAKiM,cAAe5C,UAAU,8BAA7D,mB,sCAWzB,IAAD,OACR9K,IAAE,UAAUuL,UACRvE,UAAUC,QACV1B,QAAQC,IAAI,qBAAqBG,EAAsB2L,qBACvD3E,EAAY4E,eAAe5L,EAAsB2L,oBAAqBtR,IAAE,gBAAgBsL,MAAOtL,IAAE,gBAAgBsL,OAC5GG,MAAK,SAAAC,GACF5F,aAAaS,QAAQ,WAAYP,IAASC,IAAI0F,QAASD,EAAS5K,KAAKA,KAAMqF,WAA1C,UAAyDhB,KAC1F,EAAK8E,MAAM4B,QAAQC,KAAnB,mBAAoCJ,EAAS5K,KAAKqJ,aAErD4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,eAOrDR,MAAM,iD,sCAMdlI,KAAKwI,MAAM4B,QAAQC,KAAnB,iC,GA9J6CW,aCNhC+E,G,YAEjB,WAAYvH,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTuD,MAAO,GACPtD,QAAS,IAEb,EAAKsH,SAAW,EAAKA,SAASvI,KAAd,gBAChB,EAAKwI,WAAa,EAAKA,WAAWxI,KAAhB,gBAPH,E,iFAUE,IAAD,OACXvD,EAAsBiI,uBACvBjE,MAAM,uEACNlI,KAAKwI,MAAM4B,QAAQC,KAAnB,MAEJnG,EAAsBiG,yBACtBe,EAAYoB,cACPtC,MAAK,SAAAC,GACFnG,QAAQC,IAAI,cAAgBkG,EAAS5K,MACrC,EAAKmL,SAAS,CACVwB,MAAO/B,EAAS5K,UAErBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,gB,+BAQjC,IAAD,OACL,OACI,yBAAKW,UAAU,YACX,2BAAIrJ,KAAKwI,MAAMgB,MAAMC,OAAOf,SAC5B,4BAAK1I,KAAKyI,MAAMC,SAChB,6BLjDe,aKkDf,4BAAQW,UAAU,cAAcK,KAAK,SAAS0E,MAAO,CAAEC,WAAY,UAAYzE,QAAS5J,KAAKiQ,YLnD/E,gBKmD2H,6BAAM,6BAC/I,2BAAO3B,OAAO,IAAIC,MAAM,UACpB,+BACI,4BACI,4BLVL,WKWK,4BLnBC,sBKoBD,4BLjBC,yBKkBD,4BLnBC,qBKoBD,4BLrBC,wBKwBT,+BAEQvO,KAAKyI,MAAMuD,MAAMY,KAAI,SAAAsD,GAAI,OACrB,wBAAIlN,IAAKkN,EAAK3C,OAAQ3D,QAAS,kBAAM,EAAKoG,SAASE,KAC/C,4BAAKA,EAAK3C,QACV,4BAAK2C,EAAKnD,MAAMoD,UAChB,4BAAKD,EAAKnD,MAAMqD,UAChB,4BAAKF,EAAKnD,MAAMsD,UAChB,4BAAKH,EAAKnD,MAAMuD,gBAKpC,gC,+BAIHJ,GACLlQ,KAAKwI,MAAM4B,QAAQC,KAAK,CACpBI,SAAU,YACVhC,MAAO,CAAEyH,KAAMA,O,mCAIf3K,UAAUC,OACVxF,KAAKwI,MAAM4B,QAAQC,KAAnB,YAEAnC,MAAM,2B,GAtF6B8C,aCK1BuF,G,YAEjB,WAAY/H,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACT+H,kBAAmB,GACnBxE,MAAO,GACPtD,QAAS,GACTrD,WAAYnB,EAAsB2H,iBAEtC,EAAKI,cAAgB,EAAKA,cAAcxE,KAAnB,gBACrB,EAAKyE,cAAgB,EAAKA,cAAczE,KAAnB,gBATN,E,iFAkDE,IAAD,OACXvD,EAAsBiI,uBACvBjE,MAAM,uEACNlI,KAAKwI,MAAM4B,QAAQC,KAAnB,MAEJnG,EAAsBiG,yBACtBe,EAAYuF,0BACPzG,MAAK,SAAAC,GACFnG,QAAQC,IAAI,wBAAyBkG,EAAS5K,MAC9C,EAAKmL,SAAS,CACVgG,kBAAmBvG,EAAS5K,UAEjCiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAMrDwC,EAAYoB,cACPtC,MAAK,SAAAC,GACFnG,QAAQC,IAAI,eAAgBkG,EAAS5K,MACrC,EAAKmL,SAAS,CACVwB,MAAO/B,EAAS5K,UAErBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cASrDnK,IAAE,aAAasK,SAAS,CACpBC,OAAQ,GACRC,MAAO,CACH,sBAAuB,CACnBE,UAAU,EAEV2G,UAAW,KAGf,sBAAuB,CAEnBA,UAAW,KAEf,sBAAuB,CAEnBA,UAAW,KAEf,sBAAuB,CAEnBA,UAAW,KAEf,yBAA0B,CACtB3G,UAAU,GAEd,qBAAsB,CAClBA,UAAU,IAGlBC,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,+BAMpB,IAAD,OACGkN,EAAsBxQ,KAAKyI,MAA3B+H,kBACAxE,EAAUhM,KAAKyI,MAAfuD,MAEJ0E,EAAwBF,EAAkB9R,OAAS,GAChD8R,EAAkB5D,KAAI,SAACC,EAAMzI,GAC5B,OACI,oCACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAK8D,oBACtB,WACE,OAAQ,EAAKlI,MAAMpD,YACf,KAAK,EAAG,OAA+B,MAAvBwH,EAAKE,MAAMC,UAA2C,IAAvBH,EAAKE,MAAMC,SAAiBH,EAAKE,MAAMC,SAAWH,EAAKE,MAAME,SAC5G,KAAK,EAAG,OAA+B,MAAvBJ,EAAKE,MAAMG,UAA2C,IAAvBL,EAAKE,MAAMG,SAAiBL,EAAKE,MAAMG,SAAWL,EAAKE,MAAME,SAC5G,KAAK,EAAG,OAA+B,MAAvBJ,EAAKE,MAAMI,UAA2C,IAAvBN,EAAKE,MAAMI,SAAiBN,EAAKE,MAAMI,SAAWN,EAAKE,MAAME,SAC5G,QAAS,OAAOJ,EAAKE,MAAME,UALjC,OAWfjN,MACHsN,EAAWtB,EAAMtN,OAAS,GACvBsN,EAAMY,KAAI,SAACC,EAAMzI,GAChB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKU,QACtB,WACE,OAAQ,EAAK9E,MAAMpD,YACf,KAAK,EAAG,OAA+B,MAAvBwH,EAAKE,MAAMC,UAA2C,IAAvBH,EAAKE,MAAMC,SAAiBH,EAAKE,MAAMC,SAAWH,EAAKE,MAAME,SAC5G,KAAK,EAAG,OAA+B,MAAvBJ,EAAKE,MAAMG,UAA2C,IAAvBL,EAAKE,MAAMG,SAAiBL,EAAKE,MAAMG,SAAWL,EAAKE,MAAME,SAC5G,KAAK,EAAG,OAA+B,MAAvBJ,EAAKE,MAAMI,UAA2C,IAAvBN,EAAKE,MAAMI,SAAiBN,EAAKE,MAAMI,SAAWN,EAAKE,MAAME,SAC5G,QAAS,OAAOJ,EAAKE,MAAME,UALjC,MAUXjN,MACP,OACI,yBAAKwN,MAAM,8DACP,yBAAKA,MAAM,gBACP,wBAAIA,MAAM,cACN,4BAAI,uBAAG7D,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,cAER,yBAAK6D,MAAM,qBACP,6BAAK,4BAAKxN,KAAKyI,MAAMC,UACrB,yBAAK8E,MAAM,OACP,yBAAKA,MAAM,aAEP,0BAAMlE,KAAK,WAAWC,GAAG,WAAWiE,MAAM,mBACtC,yBAAKA,MAAM,uBACP,yBAAKA,MAAM,iBACP,wBAAIA,MAAM,eNzMxB,iBM2MU,yBAAKA,MAAM,cACP,yBAAKA,MAAM,cACP,2BAAOA,MAAM,wCNxKhC,sBMyKmB,yBAAKA,MAAM,sBACP,2BAAO9D,KAAK,OAAOH,GAAG,sBAAsBiE,MAAM,eAAelE,KAAK,0BAI9E,yBAAKkE,MAAM,cACP,2BAAOA,MAAM,wCN5KhC,yBM6KmB,yBAAKA,MAAM,sBACP,2BAAO9D,KAAK,OAAOH,GAAG,sBAAsBD,KAAK,sBAAsBkE,MAAM,mBAIrF,yBAAKA,MAAM,cACP,2BAAOA,MAAM,wCNpLhC,qBMqLmB,yBAAKA,MAAM,sBACP,2BAAO9D,KAAK,OAAOH,GAAG,sBAAsBD,KAAK,sBAAsBkE,MAAM,mBAIrF,yBAAKA,MAAM,cACP,2BAAOA,MAAM,wCN5LhC,sBM6LmB,yBAAKA,MAAM,sBACP,2BAAO9D,KAAK,OAAOH,GAAG,sBAAsBD,KAAK,sBAAsBkE,MAAM,mBAKrF,yBAAKA,MAAM,cACP,2BAAOA,MAAM,wCN5L5B,qBM6Le,yBAAKA,MAAM,sBACP,4BAAQjE,GAAG,yBAAyBiE,MAAM,sBAAsBoD,mBAAiB,OAAOC,mBAAiB,OAAOvH,KAAK,yBAAyBqE,UAAU,GACpJ,4BAAQtK,MAAM,IAAd,sBACCqN,KAMb,yBAAKlD,MAAM,cACP,2BAAOA,MAAM,wCNtM9B,mBMuMiB,yBAAKA,MAAM,sBACP,4BAAQjE,GAAG,qBAAqBF,UAAU,sBAAsBuH,mBAAiB,OAAOC,mBAAiB,OAAOvH,KAAK,qBAAqBqE,UAAU,EAAM0B,SAAUrP,KAAKiP,YACrK,4BAAQ5L,MAAM,IAAd,sBACCiK,KAKb,4BAAQ5D,KAAK,SAASL,UAAU,kBAAkBO,QAAS5J,KAAKiM,eNnOlF,UMoOkB,4BAAQvC,KAAK,SAASL,UAAU,iBAAiBO,QAAS5J,KAAKkM,eNnOjF,UMmO4H,6BAAS,8BAGvH,yBAAKsB,MAAM,gBACP,yBAAKA,MAAM,yB,sCAalC,IAAD,OAEZ,GADA1J,QAAQC,IAAIxF,IAAE,6BAA6BsL,OACvCtE,UAAUC,OACV,GAAItB,EAAsBiI,sBACtB,GAAI5N,IAAE,aAAauL,QAAS,CACxB,IAAIqB,EAAO,CACP4B,MAAO,CACHE,SAAU1O,IAAE,4BAA4BsL,MACxCmD,SAAUzO,IAAE,4BAA4BsL,MACxCqD,SAAU3O,IAAE,4BAA4BsL,MACxCsD,SAAU5O,IAAE,4BAA4BsL,OAE5C2G,kBAAmBjS,IAAE,6BAA6BsL,MAClDiH,cAAevS,IAAE,yBAAyBsL,OAE9CqB,EAAY+E,WAAW9E,GAClBnB,MAAK,SAAAC,GACF,EAAKzB,MAAM4B,QAAQC,KAAnB,oBAAqCJ,EAAS5K,KAAKqJ,aAEtD4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,oBAQzDR,MAAM,4EAGVA,MAAM,yB,sCAIVlI,KAAKwI,MAAM4B,QAAQC,KAAK,iC,GApTcW,aCAzBuF,G,YAEjB,WAAY/H,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACT+H,kBAAmB,GACnBxE,MAAO,GACPtD,QAAS,GACTrD,WAAYnB,EAAsB2H,gBAClCqE,KAAM,EAAK1H,MAAMqG,SAASpG,MAAMyH,MAEpC,EAAKjE,cAAgB,EAAKA,cAAcxE,KAAnB,gBACrB,EAAKyE,cAAgB,EAAKA,cAAczE,KAAnB,gBACrB,EAAKwH,WAAa,EAAKA,WAAWxH,KAAhB,gBAXH,E,iFAeE,IAAD,OACXvD,EAAsBiI,uBACvBjE,MAAM,uEACNlI,KAAKwI,MAAM4B,QAAQC,KAAnB,MAEJnG,EAAsBiG,yBAItBe,EAAYuF,0BACPzG,MAAK,SAAAC,GACFnG,QAAQC,IAAI,wBAAyBkG,EAAS5K,MAC9C,EAAKmL,SAAS,CACVgG,kBAAmBvG,EAAS5K,UAEjCiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAMrDwC,EAAYoB,cACPtC,MAAK,SAAAC,GACFnG,QAAQC,IAAI,eAAgBkG,EAAS5K,MACrC,EAAKmL,SAAS,CACVwB,MAAO/B,EAAS5K,UAErBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cASrDnK,IAAE,aAAasK,SAAS,CACpBC,OAAQ,GACRC,MAAO,CACH,sBAAuB,CACnBE,UAAU,EAEV2G,UAAW,KAGf,sBAAuB,CAEnBA,UAAW,KAEf,sBAAuB,CAEnBA,UAAW,KAEf,sBAAuB,CAEnBA,UAAW,KAEf,yBAA0B,CACtB3G,UAAU,GAEd,qBAAsB,CAClBA,UAAU,IAGlBC,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,iCAKnBb,GAAQ,IAAD,OACRyN,EAASlQ,KAAKyI,MAAdyH,KACNpM,QAAQC,IAAI,sBAAwBtB,EAAMyE,OAAOoC,MACvB,wBAAtB7G,EAAMyE,OAAOoC,KACb4G,EAAKnD,MAAMoD,SAAW1N,EAAMyE,OAAO7D,MACN,wBAAtBZ,EAAMyE,OAAOoC,KACpB4G,EAAKnD,MAAMqD,SAAW3N,EAAMyE,OAAO7D,MAER,wBAAtBZ,EAAMyE,OAAOoC,KAClB4G,EAAKnD,MAAMsD,SAAW5N,EAAMyE,OAAO7D,MAER,wBAAtBZ,EAAMyE,OAAOoC,KAClB4G,EAAKnD,MAAMuD,SAAW7N,EAAMyE,OAAO7D,MAER,2BAAtBZ,EAAMyE,OAAOoC,KAClB4G,EAAKM,kBAAoBtB,MAAMC,KAAK1M,EAAMyE,OAAOkI,iBAAiB,SAACvC,GAAD,OAAUA,EAAKxJ,SAGtD,uBAAtBZ,EAAMyE,OAAOoC,OAClB4G,EAAKY,cAAgB5B,MAAMC,KAAK1M,EAAMyE,OAAOkI,iBAAiB,SAACvC,GAAD,OAAUA,EAAKxJ,UAYjFrD,KAAKwK,SAAS,CACV0F,SACD,WAECpM,QAAQC,IAAI,wBAAyB,EAAK0E,MAAMyH,W,+BAK9C,IAAD,OACGM,EAAsBxQ,KAAKyI,MAA3B+H,kBACAxE,EAAUhM,KAAKyI,MAAfuD,MAEJ0E,EAAwBF,EAAkB9R,OAAS,GAChD8R,EAAkB5D,KAAI,SAACC,EAAMzI,GAC5B,OACI,oCACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAK8D,oBACtB,WACE,OAAQ,EAAKlI,MAAMpD,YACf,KAAK,EAAG,OAA+B,MAAvBwH,EAAKE,MAAMqD,UAA2C,IAAvBvD,EAAKE,MAAMqD,SAAiBvD,EAAKE,MAAMqD,SAAWvD,EAAKE,MAAMoD,SAC5G,KAAK,EAAG,OAA+B,MAAvBtD,EAAKE,MAAMsD,UAA2C,IAAvBxD,EAAKE,MAAMsD,SAAiBxD,EAAKE,MAAMsD,SAAWxD,EAAKE,MAAMoD,SAC5G,KAAK,EAAG,OAA+B,MAAvBtD,EAAKE,MAAMuD,UAA2C,IAAvBzD,EAAKE,MAAMuD,SAAiBzD,EAAKE,MAAMuD,SAAWzD,EAAKE,MAAMoD,SAC5G,QAAS,OAAOtD,EAAKE,MAAMoD,UALjC,OAWfnQ,MACHsN,EAAWtB,EAAMtN,OAAS,GACvBsN,EAAMY,KAAI,SAACC,EAAMzI,GAChB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKU,QACtB,WACE,OAAQ,EAAK9E,MAAMpD,YACf,KAAK,EAAG,OAA+B,MAAvBwH,EAAKE,MAAMqD,UAA2C,IAAvBvD,EAAKE,MAAMqD,SAAiBvD,EAAKE,MAAMqD,SAAWvD,EAAKE,MAAMoD,SAC5G,KAAK,EAAG,OAA+B,MAAvBtD,EAAKE,MAAMsD,UAA2C,IAAvBxD,EAAKE,MAAMsD,SAAiBxD,EAAKE,MAAMsD,SAAWxD,EAAKE,MAAMoD,SAC5G,KAAK,EAAG,OAA+B,MAAvBtD,EAAKE,MAAMuD,UAA2C,IAAvBzD,EAAKE,MAAMuD,SAAiBzD,EAAKE,MAAMuD,SAAWzD,EAAKE,MAAMoD,SAC5G,QAAS,OAAOtD,EAAKE,MAAMoD,UALjC,MAUXnQ,MACP,OACI,yBAAKwN,MAAM,8DACP,yBAAKA,MAAM,gBACP,wBAAIA,MAAM,cACN,4BAAI,uBAAG7D,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,eAER,yBAAK6D,MAAM,qBACP,6BAAK,4BAAKxN,KAAKyI,MAAMC,UACrB,yBAAK8E,MAAM,OACP,yBAAKA,MAAM,aAEP,0BAAMlE,KAAK,WAAWC,GAAG,WAAWiE,MAAM,mBACtC,yBAAKA,MAAM,uBACP,yBAAKA,MAAM,iBACP,wBAAIA,MAAM,eP9MvB,gBOgNS,yBAAKA,MAAM,cACP,yBAAKA,MAAM,cACP,2BAAOA,MAAM,wCP/KhC,sBOgLmB,yBAAKA,MAAM,sBACP,2BAAO9D,KAAK,OAAOH,GAAG,sBAAsBiE,MAAM,eAAelE,KAAK,sBAAsBjG,MAAOrD,KAAKyI,MAAMyH,KAAKnD,MAAMoD,SAAUd,SAAUrP,KAAKiP,WAAY8B,UAAU,MAIhL,yBAAKvD,MAAM,cACP,2BAAOA,MAAM,wCPnLhC,yBOoLmB,yBAAKA,MAAM,sBACP,2BAAO9D,KAAK,OAAOH,GAAG,sBAAsBD,KAAK,sBAAsBkE,MAAM,eAAenK,MAAOrD,KAAKyI,MAAMyH,KAAKnD,MAAMqD,SAAUf,SAAUrP,KAAKiP,WAAY8B,UAAU,MAIhL,yBAAKvD,MAAM,cACP,2BAAOA,MAAM,wCP3LhC,qBO4LmB,yBAAKA,MAAM,sBACP,2BAAO9D,KAAK,OAAOH,GAAG,sBAAsBD,KAAK,sBAAsBkE,MAAM,eAAenK,MAAOrD,KAAKyI,MAAMyH,KAAKnD,MAAMsD,SAAUhB,SAAUrP,KAAKiP,WAAY8B,UAAU,MAIhL,yBAAKvD,MAAM,cACP,2BAAOA,MAAM,wCPnMhC,sBOoMmB,yBAAKA,MAAM,sBACP,2BAAO9D,KAAK,OAAOH,GAAG,sBAAsBD,KAAK,sBAAsBkE,MAAM,eAAenK,MAAOrD,KAAKyI,MAAMyH,KAAKnD,MAAMuD,SAAUjB,SAAUrP,KAAKiP,WAAY8B,UAAU,MAKhL,yBAAKvD,MAAM,cACP,2BAAOA,MAAM,wCPnM5B,qBOoMe,yBAAKA,MAAM,sBACP,4BAAQjE,GAAG,yBAAyBiE,MAAM,sBAAsBoD,mBAAiB,OAAOC,mBAAiB,OAAOvH,KAAK,yBAAyBqE,UAAU,EAAMtK,MAAOrD,KAAKyI,MAAMyH,KAAKM,kBAAmBnB,SAAUrP,KAAKiP,WAAY+B,YAAY,mCAC3O,4BAAQ3N,MAAM,IAAd,sBACCqN,KAMb,yBAAKlD,MAAM,cACP,2BAAOA,MAAM,wCP7M9B,mBO8MiB,yBAAKA,MAAM,sBACP,4BAAQjE,GAAG,qBAAqBF,UAAU,sBAAsBuH,mBAAiB,OAAOC,mBAAiB,OAAOvH,KAAK,qBAAqBqE,UAAU,EAAMtK,MAAOrD,KAAKyI,MAAMyH,KAAKY,cAAezB,SAAUrP,KAAKiP,YAC3M,4BAAQ5L,MAAM,IAAd,sBACCiK,KAKb,4BAAQ5D,KAAK,SAASL,UAAU,kBAAkBO,QAAS5J,KAAKiM,ePxOlF,UOyOkB,4BAAQvC,KAAK,SAASL,UAAU,iBAAiBO,QAAS5J,KAAKkM,eP1OjF,UO0O4H,6BAAS,8BAGvH,yBAAKsB,MAAM,gBACP,yBAAKA,MAAM,yB,sCAalC,IAAD,OACZ1J,QAAQC,IAAIxF,IAAE,6BAA6BsL,OACvCtE,UAAUC,OACNtB,EAAsBiI,qBAClB5N,IAAE,aAAauL,SAEfoB,EAAY8E,SAAShQ,KAAKyI,MAAMyH,MAC3BlG,MAAK,SAAAC,GACF,EAAKzB,MAAM4B,QAAQC,KAAnB,oBAAqCJ,EAAS5K,KAAKqJ,aAEtD4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAQzDR,MAAM,uEAGVA,MAAM,yB,sCAIVlI,KAAKwI,MAAM4B,QAAQC,KAAK,iC,GAlTcW,a,SCa/B,O,oGApBHG,GACR,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,qBAAyC0H,EAAM,M,wCAKtD,OAAOnH,IAAMsE,IAAN,UAAa7E,EAAb,4BAAgD,M,8CAIvD,OAAOO,IAAMsE,IAAN,UAAa7E,EAAb,yBAA6C,M,mCAG3C0H,GACT,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,sBAA0C0H,EAAM,Q,MCyH5C8F,G,YAjIX,WAAYzI,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACT4E,aAAc,GACd3E,QAAS,IAEb,EAAKwI,gBAAkB,EAAKA,gBAAgBzJ,KAArB,gBACvB,EAAK0J,WAAa,EAAKA,WAAW1J,KAAhB,gBAClB,EAAK2J,WAAW,EAAKA,WAAW3J,KAAhB,gBARD,E,6EAUHhF,GACZzC,KAAKwK,SAAL,gBAES/H,EAAMyE,OAAOoC,KAAO7G,EAAMyE,OAAO7D,U,0CAM1Ca,EAAsBiG,yBACtB5L,IAAE,iBAAiBsK,SAAS,CACxBC,OAAQ,GACRC,MAAO,CACHsE,aAAc,CACVpE,UAAU,EACVoI,aAAa,EACbzB,UAAW,MAGnB1G,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,iCAKnBgO,GACP,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,K,iCAGxChP,GAAQ,IAAD,OACV8C,UAAUC,OACNjH,IAAE,iBAAiBuL,SACnB4H,GAAgBC,YAAY3R,KAAKyI,OAAOuB,MAAK,SAAAC,GACzC,EAAKzB,MAAM4B,QAAQC,KAAnB,wBAAyCJ,EAAS5K,KAAKqJ,aAGtD4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAQzDR,MAAM,gD,+BAKV,OACR,oCAaY,yBAAKmB,UAAU,qBACX,yBAAKA,UAAU,OAEf,yBAAKA,UAAU,IACX,wBAAImE,MAAM,gBAId,yBAAKnE,UAAU,4BAEnB,yBAAKA,UAAU,cACX,yBAAKA,UAAU,kCACX,yBAAKA,UAAU,iBACX,wBAAIA,UAAU,eAAd,iBAGH,yBAAKA,UAAU,cAChB,yBAAKA,UAAU,4BACP,yBAAKA,UAAU,SACT,0BAAMA,UAAU,kBAAiBC,KAAK,eAAeC,GAAG,gBACtD,yBAAKF,UAAU,cACX,2BAAOA,UAAU,0BT/E5B,gBS+EW,MACA,yBAAKA,UAAU,YACX,2BAAOK,KAAK,OAAOJ,KAAK,eAAejG,MAAOrD,KAAKyI,MAAM4E,aAAcgC,SAAUrP,KAAKkR,gBAAiB7H,UAAU,uBAWjJ,yBAAKA,UAAU,gBACN,4BAAQO,QAAS5J,KAAKmR,WAAYzH,KAAK,SAASL,UAAU,8BT9DlD,SS8DR,gB,GAvHc2B,aCFd4G,G,YAEjB,WAAYpJ,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACToJ,aAAc,IAElB,EAAKC,aAAe,EAAKA,aAAarK,KAAlB,gBACpB,EAAKsK,eAAiB,EAAKA,eAAetK,KAApB,gBANP,E,iFASE,IAAD,OAChBvD,EAAsBiG,yBACtBuH,GAAgBrF,kBACXrC,MAAK,SAAAC,GACFnG,QAAQC,IAAIkG,EAAS5K,MACrB,EAAKmL,SAAS,CACVqH,aAAc5H,EAAS5K,UAG9BiL,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,gB,mCAS9BtD,GACTpF,KAAKwI,MAAM4B,QAAQC,KAAK,CACpBI,SAAU,gBACVhC,MAAO,CAAErD,SAAUA,O,uCAKnBG,UAAUC,OACVxF,KAAKwI,MAAM4B,QAAQC,KAAnB,gBAEAnC,MAAM,yB,+BAKJ,IAAD,OACL,OACI,oCACA,2BAAIlI,KAAKwI,MAAMgB,MAAMC,OAAOf,SAC5B,6BACC,4BAAQgB,KAAK,SAAS0E,MAAO,CAAEC,WAAY,UAAYzE,QAAS5J,KAAK+R,gBVC5C,oBUDqG,6BAAM,8BAEnI,yBAAK1I,UAAU,gBAET,2BAAOiF,OAAO,IAAIC,MAAM,UACpB,+BACI,4BACI,4BVvCH,iBUwCG,4BVZP,YUgBD,+BAEQvO,KAAKyI,MAAMoJ,aAAajF,KAAI,SAAAxH,GAAQ,OAEhC,wBAAIpC,IAAKoC,EAASC,WAAYuE,QAAS,kBAAM,EAAKkI,aAAa1M,KAC3D,4BAAKA,EAASiI,cACd,4BAAmC,QAA9BjI,EAASwJ,OAAOlK,WAAuB,SAAW,wB,GA9E5CsG,aCE9BgH,G,YAEjB,WAAYxJ,GAAQ,IAAD,8BAEf,4CAAMA,KACDC,MAAQ,CAAErD,SAAU,CAACiI,aAAa,IAAK3E,QAAQ,IAEpD,EAAKwI,gBAAkB,EAAKA,gBAAgBzJ,KAArB,gBACvB,EAAKwK,WAAa,EAAKA,WAAWxK,KAAhB,gBAClB,EAAK2J,WAAW,EAAKA,WAAW3J,KAAhB,gBAPD,E,iFAWhBvD,EAAsBiG,yBACrBnK,KAAKwK,SAAS,CACVpF,SAAUpF,KAAKwI,MAAMqG,SAASpG,MAAMrD,WAExCtB,QAAQC,IAAI/D,KAAKyI,OACjBlK,IAAE,uBAAuBsK,SAAS,CAC9BC,OAAQ,GACRC,MAAO,CACH,wBAAyB,CACrBE,UAAU,EACVoI,aAAa,EACbzB,UAAW,MAGnB1G,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,sCAKdb,GAAQ,IAEd2C,EAAapF,KAAKyI,MAAlBrD,SAEoB,0BAAtB3C,EAAMyE,OAAOoC,MACbxF,QAAQC,IAAI,aACZqB,EAASiI,aAAe5K,EAAMyE,OAAO7D,OACR,oBAAtBZ,EAAMyE,OAAOoC,OACpBlE,EAASwJ,OAA6B,qBAApBnM,EAAMyE,OAAOqC,IAGnCvJ,KAAKwK,SACD,CACIpF,e,iCAIDkM,GACP,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,K,mCAGrC,IAAD,OACLlM,UAAUC,OACNjH,IAAE,uBAAuBuL,SAEzB4H,GAAgBI,aAAa9R,KAAKyI,MAAMrD,UAAU4E,MAAK,SAAAC,GACnD,EAAKzB,MAAM4B,QAAQC,KAAnB,wBAAyCJ,EAAS5K,KAAKqJ,aAGtD4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,OAE5B,MACJ,QACI,EAAKmL,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAQpDR,MAAM,gD,+BAKf,OACI,oCACI,4BX/Be,mBWgCf,0BAAMoB,KAAK,sBAAsBC,GAAG,sBAChC,6BACI,+BXhEK,gBWgEL,MACA,2BAAOG,KAAK,OAAOJ,KAAK,wBAAwBjG,MAAOrD,KAAKoR,WAAWpR,KAAKyI,MAAMrD,SAASiI,cAAegC,SAAUrP,KAAKkR,mBAE7H,6BAAM,6BACN,6BACI,6BACKgB,EADL,IAEJ,2BAAOxI,KAAK,QAAQH,GAAG,mBAAmBD,KAAK,kBAAkBjG,OAAO,EAAMiM,SAAwC,IAA/BtP,KAAKyI,MAAMrD,SAASwJ,OAAiBS,SAAUrP,KAAKkR,kBAFvI,UAGJ,2BAAOxH,KAAK,QAAQH,GAAG,mBAAmBD,KAAK,kBAAkBjG,OAAO,EAAOiM,SAAwC,IAA/BtP,KAAKyI,MAAMrD,SAASwJ,OAAkBS,SAAUrP,KAAKkR,kBAHzI,aAKA,4BAAQxH,KAAK,SAASE,QAAS5J,KAAKiS,YX1C/B,iB,GW1DsBjH,aCgBpC,O,0GApBGG,GAClB,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,2BAA8C0H,EAAK,M,8CAKtD,OAAOnH,IAAMsE,IAAN,UAAa7E,EAAb,+BAAmD,M,oDAK1D,OAAOO,IAAMsE,IAAN,UAAa7E,EAAb,qCAAyD,M,yCAIjD0H,GACf,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,4BAAgD0H,EAAM,Q,MCb5CgH,G,YAEjB,WAAY3J,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAM,CACPwE,SAAS,IAGZ,EAAKiE,gBAAgB,EAAKA,gBAAgBzJ,KAArB,gBACrB,EAAK0J,WAAW,EAAKA,WAAW1J,KAAhB,gBAChB,EAAK2J,WAAW,EAAKA,WAAW3J,KAAhB,gBARH,E,iFAadvD,EAAsBiG,yBACtB5L,IAAE,uBAAuBsK,SAAS,CAC9BC,OAAQ,GACRC,MAAO,CACH,SAAY,CACRE,UAAU,EACVmJ,uBAAuB,EACvBxC,UAAW,MAkBnB1G,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,iCAOnBgO,GACP,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,K,sCAGnChP,GAEZzC,KAAKwK,SAAL,gBAES/H,EAAMyE,OAAOoC,KAAO7G,EAAMyE,OAAO7D,U,mCAMjC,IAAD,OACJkC,UAAUC,OACNjH,IAAE,uBAAuBuL,UACzBhG,QAAQC,IAAI/D,KAAKyI,OACjB4J,GAAsBC,kBAAkBtS,KAAKyI,OAAOuB,MAAK,SAAAC,GACrD,EAAKzB,MAAM4B,QAAQC,KAAnB,8BAA+CJ,EAAS5K,KAAKqJ,UAC7D5E,QAAQC,IAAI,cAGXuG,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,eAW3CR,MAAM,gD,+BAKV,OACC,oCACD,4BbtC2B,wBauCnB,0BAAMoB,KAAK,qBAAqBC,GAAG,sBAC/B,6BACI,+BbxCe,kCawCf,MACA,2BAAOG,KAAK,OAAOJ,KAAK,WAAWjG,MAAOrD,KAAKoR,WAAWpR,KAAKyI,MAAMwE,UAAWoC,SAAUrP,KAAKkR,mBAEnG,6BAAK,6BAgBL,6BACI,4BAAQxH,KAAK,SAASE,QAAS5J,KAAKmR,YbhE/B,iB,Ga1D2BnG,aCHnCuH,G,YAEjB,WAAY/J,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACT+J,eAAgB,IAIpB,EAAKC,mBAAqB,EAAKA,mBAAmBhL,KAAxB,gBAC1B,EAAKiL,qBAAuB,EAAKA,qBAAqBjL,KAA1B,gBARb,E,iFAWE,IAAD,OAChBvD,EAAsBiG,yBACtBkI,GAAsBM,wBAAwB3I,MAAK,SAAAC,GAE/C,EAAKO,SAAS,CACVgI,eAAgBvI,EAAS5K,UAG5BiL,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,gB,yCAQxBkK,GACf5S,KAAKwI,MAAM4B,QAAQC,KAAK,CACpBI,SAAU,sBACVhC,MAAO,CAAEmK,eAAgBA,O,6CAOzBrN,UAAUC,OACVxF,KAAKwI,MAAM4B,QAAQC,KAAnB,sBAEAnC,MAAM,yB,+BAKJ,IAAD,OACL,OACI,oCAEI,2BAAIlI,KAAKwI,MAAMgB,MAAMC,OAAOf,SAC5B,6BACI,4BAAQgB,KAAK,SAAS0E,MAAO,CAAEC,WAAY,UAAYzE,QAAS5J,KAAK0S,sBdSjD,4BcTkH,6BAAM,8BAGhJ,yBAAKrJ,UAAU,sBAEX,4BdCiB,yBcAjB,2BAAOiF,OAAO,IAAIC,MAAM,UACpB,+BACI,4BACI,4BdPO,mCcQP,4BdPO,mCcQP,4BdPO,oCcQP,4BdPO,sCcQP,4BdNO,YcUf,+BAEQvO,KAAKyI,MAAM+J,eAAe5F,KAAI,SAAAgG,GAAc,OAExC,wBAAI5P,IAAK4P,EAAeC,iBAAkBjJ,QAAS,kBAAM,EAAK6I,mBAAmBG,KAC7E,4BAAKA,EAAe7F,MAAME,UAC1B,4BAAK2F,EAAe7F,MAAMG,UAC1B,4BAAK0F,EAAe7F,MAAMI,UAC1B,4BAAKyF,EAAe7F,MAAMC,UAC1B,4BAAyC,QAApC4F,EAAehE,OAAOlK,WAAuB,SAAW,wB,GAzFhDsG,aCGhC8H,G,YAGjB,WAAYtK,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTmK,eACA,CACIhE,OAAQ,GAER7B,MAAO,CACHE,SAAU,GAIV8F,QAAS,MAKrB,EAAK7B,gBAAkB,EAAKA,gBAAgBzJ,KAArB,gBACvB,EAAKwK,WAAa,EAAKA,WAAWxK,KAAhB,gBAClB,EAAK2J,WAAW,EAAKA,WAAW3J,KAAhB,gBAChB,EAAKyE,cAAc,EAAKA,cAAczE,KAAnB,gBApBJ,E,iFAwBfvD,EAAsBiG,yBACtBrG,QAAQC,IAAI/D,KAAKwI,MAAMqG,SAASpG,MAAMmK,gBACtC5S,KAAKwK,SAAS,CACVoI,eAAgB5S,KAAKwI,MAAMqG,SAASpG,MAAMmK,iBAI9CrU,IAAE,8BAA8BsK,SAAS,CACrCC,OAAQ,GACRC,MAAO,CACH,gCAAiC,CAC7BE,UAAU,EACVmJ,uBAAuB,EACvBxC,UAAW,MAkBnB1G,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,sCAKdb,GAAQ,IACdmQ,EAAmB5S,KAAKyI,MAAxBmK,eAEoB,kCAAtBnQ,EAAMyE,OAAOoC,MACbxF,QAAQC,IAAI,aACZ6O,EAAe7F,MAAME,SAAWxK,EAAMyE,OAAO7D,OAYjB,0BAAtBZ,EAAMyE,OAAOoC,OACnBsJ,EAAehE,OAA6B,2BAApBnM,EAAMyE,OAAOqC,IAIzCvJ,KAAKwK,SACD,CACIoI,qB,iCAIDtB,GACP,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,K,sCAG/CzR,KAAKwI,MAAM4B,QAAQC,KAAK,yC,mCAGd,IAAD,OAEL9E,UAAUC,OAENjH,IAAE,8BAA8BuL,SAEhCuI,GAAsBI,mBAAmBzS,KAAKyI,MAAMmK,gBAAgB5I,MAAK,SAAAC,GAErE,EAAKzB,MAAM4B,QAAQC,KAAnB,8BAA+CJ,EAAS5K,KAAKqJ,aAG5D4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,cAU3CR,MAAM,gD,+BAOV,OACI,oCAEI,4BfxEuB,2BeyEvB,0BAAMoB,KAAK,4BAA4BC,GAAG,6BACtC,6BACI,+BfjFe,kCeiFf,MACA,2BAAOG,KAAK,OAAOJ,KAAK,gCAAgCjG,MAAOrD,KAAKoR,WAAWpR,KAAKyI,MAAMmK,eAAe7F,MAAME,UAAWoC,SAAUrP,KAAKkR,mBAE7I,6BAAM,6BAgBN,6BACKgB,EADL,IAEA,2BAAOxI,KAAK,QAAQH,GAAG,yBAAyBD,KAAK,wBAAwBjG,OAAO,EAAMiM,SAA8C,IAArCtP,KAAKyI,MAAMmK,eAAehE,OAAiBS,SAAUrP,KAAKkR,kBAF7J,UAGA,2BAAOxH,KAAK,QAAQH,GAAG,yBAAyBD,KAAK,wBAAwBjG,OAAO,EAAOiM,SAA8C,IAArCtP,KAAKyI,MAAMmK,eAAehE,OAAkBS,SAAUrP,KAAKkR,kBAH/J,aAMA,6BACI,4BAAQxH,KAAK,SAASE,QAAS5J,KAAKiS,Yf9G/B,Ue+GL,4BAAQvI,KAAK,SAASE,QAAS5J,KAAKkM,efnJlC,UemJ8E,6BAAS,oC,GA1KtDlB,aCa5C,O,sGAhBGG,GACV,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,uBAA2C0H,EAAM,M,0CAKxD,OAAOnH,IAAMsE,IAAN,UAAa7E,EAAb,2BAA+C,M,qCAI3C0H,GACX,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,wBAA2C0H,EAAK,Q,MCP1C6H,G,YAEjB,WAAYxK,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,QAAQ,GACRqE,MAAO,CACHE,SAAU,IAKd2F,eAAgB,CACZC,iBAAkB,IAEtBI,mBAAoB,IAExB,EAAK/B,gBAAkB,EAAKA,gBAAgBzJ,KAArB,gBACvB,EAAK0J,WAAa,EAAKA,WAAW1J,KAAhB,gBAClB,EAAK2J,WAAW,EAAKA,WAAW3J,KAAhB,gBAjBD,E,iFAoBE,IAAD,OAChBvD,EAAsBiG,yBACtBkI,GAAsBa,8BAA8BlJ,MAAK,SAAAC,GAErD,EAAKO,SAAS,CACVyI,mBAAoBhJ,EAAS5K,UAGhCiL,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,cAMvCnK,IAAE,mBAAmBsK,SAAS,CAC1BC,OAAQ,GACRC,MAAO,CACH,iBAAkB,CACdE,UAAU,EACVmJ,uBAAuB,EACvBxC,UAAW,KAiBf,kCAAmC,CAC/B3G,UAAU,IAGlBC,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,sCAMdb,GACc,mBAAtBA,EAAMyE,OAAOoC,KAEbtJ,KAAKyI,MAAMsE,MAAME,SAAWxK,EAAMyE,OAAO7D,MAYd,oCAAtBZ,EAAMyE,OAAOoC,OAClBtJ,KAAKyI,MAAMmK,eAAeC,iBAAmBpQ,EAAMyE,OAAO7D,OAhB3C,IAmBb8P,EAAenT,KAAKyI,MAApB0K,WACNnT,KAAKwK,SACD,CACI2I,iB,iCAMD7B,GACP,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,K,mCAGrC,IAAD,OAELlM,UAAUC,OACNjH,IAAE,mBAAmBuL,UACrBhG,QAAQC,IAAI/D,KAAKyI,OAEjB2K,GAAkBC,cAAcrT,KAAKyI,OAAOuB,MAAK,SAAAC,GAC7C,EAAKzB,MAAM4B,QAAQC,KAAnB,0BAA2CJ,EAAS5K,KAAKqJ,aAIxD4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,eAU3CR,MAAM,gD,+BAOJ,IACE+K,EAAuBjT,KAAKyI,MAA5BwK,mBACJK,EAAkBL,EAAmBvU,OAAS,GAC3CuU,EAAmBrG,KAAI,SAACC,EAAMzI,GAC7B,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKgG,kBAAmBhG,EAAKE,MAAME,YAE/DjN,MACP,OACI,oCACI,6BAAK,4BAAKA,KAAKyI,MAAMC,UACrB,4BjB5Fc,mBiB6Fd,0BAAMY,KAAK,iBAAiBC,GAAG,kBAC3B,6BACI,+BjB7FU,6BiB6FV,MACA,2BAAOG,KAAK,OAAOJ,KAAK,iBAAiBjG,MAAOrD,KAAKoR,WAAWpR,KAAKyI,MAAMsE,MAAME,UAAWoC,SAAUrP,KAAKkR,mBAE/G,6BAAM,6BAiBN,6BjB3GiB,0BiB2GjB,MACwC,4BAAQ3H,GAAG,mBAAmBD,KAAK,kCAAkC+F,SAAUrP,KAAKkR,iBACpH,4BAAQ7N,MAAM,IAAd,sBACCiQ,IAGT,6BACA,6BACI,4BAAQ5J,KAAK,SAASE,QAAS5J,KAAKmR,YjBvI/B,iB,GiBzDcnG,aCHtBuH,G,YAErB,WAAY/J,GAAO,IAAD,8BAClB,4CAAMA,KACDC,MAAM,CACX+J,eAAe,IAGf,EAAKe,eAAe,EAAKA,eAAe9L,KAApB,gBACpB,EAAK+L,iBAAiB,EAAKA,iBAAiB/L,KAAtB,gBAPJ,E,iFAUG,IAAD,OAChBvD,EAAsBiG,yBACtBiJ,GAAkBK,oBAAoBzJ,MAAK,SAAAC,GACvC,EAAKO,SAAS,CACVgI,eAAgBvI,EAAS5K,UAG5BiL,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,gB,qCAQ5ByK,GACXnT,KAAKwI,MAAM4B,QAAQC,KAAK,CACpBI,SAAU,kBACVhC,MAAO,CAAE0K,WAAYA,O,yCAOrB5N,UAAUC,OACVxF,KAAKwI,MAAM4B,QAAQC,KAAnB,kBAEAnC,MAAM,yB,+BAKJ,IAAD,OACL,OACI,oCAEI,2BAAIlI,KAAKwI,MAAMgB,MAAMC,OAAOf,SAC5B,6BACI,4BAAQgB,KAAK,SAAS0E,MAAO,CAAEC,WAAY,UAAYzE,QAAS5J,KAAKwT,kBlBoBlD,uBkBpB0G,6BAAM,8BAGvI,yBAAKnK,UAAU,kBAEX,4BlBagB,qBkBZhB,2BAAOiF,OAAO,IAAIC,MAAM,UACpB,+BACI,4BACI,4BlBIM,8BkBHN,4BlBIM,6BkBHN,4BlBIM,8BkBHN,4BlBIM,iCkBHN,4BlBVW,mCkBWX,4BlBGK,YkBEb,+BAEQvO,KAAKyI,MAAM+J,eAAe5F,KAAI,SAAAuG,GAAU,OAEpC,wBAAInQ,IAAKmQ,EAAWO,aAAc9J,QAAS,kBAAM,EAAK2J,eAAeJ,KACjE,4BAAKA,EAAWpG,MAAME,UACtB,4BAAKkG,EAAWpG,MAAMG,UACtB,4BAAKiG,EAAWpG,MAAMI,UACtB,4BAAKgG,EAAWpG,MAAMC,UACtB,4BAAKmG,EAAWP,eAAe7F,MAAMoD,UACrC,4BAAqC,QAAhCgD,EAAWvE,OAAOlK,WAAuB,SAAW,wB,GA1FxCsG,aCGhC2I,G,YAEjB,WAAYnL,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAET0K,WAAY,CACRzK,QAAQ,GACRkG,OAAQ,GACR8E,aAAc,GACd3G,MAAO,CACHE,SAAU,GAIV8F,QAAS,IAEbH,eAAgB,CACZC,iBAAkB,KAG1BI,mBAAoB,IAExB,EAAK/B,gBAAkB,EAAKA,gBAAgBzJ,KAArB,gBACvB,EAAKwK,WAAa,EAAKA,WAAWxK,KAAhB,gBAClB,EAAK2J,WAAW,EAAKA,WAAW3J,KAAhB,gBAChB,EAAKyE,cAAc,EAAKA,cAAczE,KAAnB,gBAxBJ,E,iFA4BE,IAAD,OAChBvD,EAAsBiG,yBACtBnK,KAAKwK,SAAS,CACV2I,WAAYnT,KAAKwI,MAAMqG,SAASpG,MAAM0K,aAG1Cd,GAAsBa,8BAA8BlJ,MAAK,SAAAC,GAErD,EAAKO,SAAS,CACVyI,mBAAoBhJ,EAAS5K,UAGhCiL,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,cAOvCnK,IAAE,0BAA0BsK,SAAS,CACjCC,OAAQ,GACRC,MAAO,CACH,4BAA6B,CACzBE,UAAU,EACVmJ,uBAAuB,EACvBxC,UAAW,KAiBf,6CAA8C,CAC1C3G,UAAU,IAGlBC,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,sCAKdb,GAAQ,IAEd0Q,EAAenT,KAAKyI,MAApB0K,WAEoB,8BAAtB1Q,EAAMyE,OAAOoC,OAEb6J,EAAWpG,MAAME,SAAWxK,EAAMyE,OAAO7D,OAYnB,+CAAtBZ,EAAMyE,OAAOoC,KACbtJ,KAAKyI,MAAM0K,WAAWP,eAAeC,iBAAmBpQ,EAAMyE,OAAO7D,MACxC,sBAAtBZ,EAAMyE,OAAOoC,OAEpB6J,EAAWvE,OAA6B,uBAApBnM,EAAMyE,OAAOqC,IAIrCvJ,KAAKwK,SACD,CACI2I,iB,iCAMD7B,GACP,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,K,sCAG/CzR,KAAKwI,MAAM4B,QAAQC,KAAK,qC,mCAEd,IAAD,OAEL9E,UAAUC,OACNjH,IAAE,0BAA0BuL,SAE5BsJ,GAAkBG,eAAevT,KAAKyI,MAAM0K,YAAYnJ,MAAK,SAAAC,GACzD,EAAKzB,MAAM4B,QAAQC,KAAnB,0BAA2CJ,EAAS5K,KAAKqJ,aAIxD4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,cAS3CR,MAAM,gD,+BAIJ,IACE+K,EAAuBjT,KAAKyI,MAA5BwK,mBACJK,EAAkBL,EAAmBvU,OAAS,GAC3CuU,EAAmBrG,KAAI,SAACC,EAAMzI,GAC7B,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKgG,kBAAmBhG,EAAKE,MAAME,YAE/DjN,MACP,OAEI,oCACI,6BAAK,4BAAKA,KAAKyI,MAAMC,UACrB,4BnB3GiB,sBmB4GjB,0BAAMY,KAAK,wBAAwBC,GAAG,yBAClC,6BACI,+BnBvHe,kCmBuHf,MACA,2BAAOG,KAAK,OAAOJ,KAAK,4BAA4BjG,MAAOrD,KAAKoR,WAAWpR,KAAKyI,MAAM0K,WAAWpG,MAAME,UAAWoC,SAAUrP,KAAKkR,mBAErI,6BAAM,6BAgBN,6BACKgB,EADL,IAEA,2BAAOxI,KAAK,QAAQH,GAAG,qBAAqBD,KAAK,oBAAoBjG,OAAO,EAAMiM,SAA0C,IAAjCtP,KAAKyI,MAAM0K,WAAWvE,OAAiBS,SAAUrP,KAAKkR,kBAFjJ,UAGA,2BAAOxH,KAAK,QAAQH,GAAG,qBAAqBD,KAAK,oBAAoBjG,OAAO,EAAOiM,SAA0C,IAAjCtP,KAAKyI,MAAM0K,WAAWvE,OAAkBS,SAAUrP,KAAKkR,kBAHnJ,aAKA,6BAAM,6BACN,6BnBhIiB,0BmBgIjB,MACwC,4BAAQ3H,GAAG,mBAAmBD,KAAK,6CAA6CjG,MAAOrD,KAAKyI,MAAM0K,WAAWP,eAAiB5S,KAAKyI,MAAM0K,WAAWP,eAAeC,iBAAmB,GAAIxD,SAAUrP,KAAKkR,iBACzO,4BAAQ7N,MAAM,IAAd,sBACCiQ,IAGT,6BAAM,6BACN,2BAAO5J,KAAK,SAASJ,KAAK,0BAA0BjG,MAAOrD,KAAKyI,MAAM0K,WAAWO,eACjF,2BAAOhK,KAAK,SAASJ,KAAK,2BAA2BjG,MAAOrD,KAAKyI,MAAM0K,WAAWpG,MAAMgG,UACxF,6BACI,4BAAQrJ,KAAK,SAASE,QAAS5J,KAAKiS,YnB7J/B,UmB8JL,4BAAQvI,KAAK,SAASE,QAAS5J,KAAKkM,enBlMlC,UmBkM8E,6BAAS,oC,GAxN1DlB,aCexC,O,oGAnBCG,GACR,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,qBAAyC0H,EAAM,M,wCAKtD,OAAOnH,IAAMsE,IAAN,UAAa7E,EAAb,yBAA6C,M,8CAKpD,OAAOO,IAAMsE,IAAN,UAAa7E,EAAb,+BAAmD,M,mCAGjD0H,GACT,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,sBAA0C0H,EAAM,Q,MCb1CyI,G,YAEjB,WAAYpL,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACToL,aAAc,GACdC,eAAgB,GAChB/G,MAAO,CACHE,SAAU,IAKd8G,oBAAqB,IAEzB,EAAK7C,gBAAkB,EAAKA,gBAAgBzJ,KAArB,gBACvB,EAAK0J,WAAa,EAAKA,WAAW1J,KAAhB,gBAElB,EAAK2J,WAAW,EAAKA,WAAW3J,KAAhB,gBAhBD,E,iFAoBfvD,EAAsBiG,yBACtB5L,IAAE,iBAAiBsK,SAAS,CACxBC,OAAQ,GACRC,MAAO,CACH,iBAAkB,CACdE,UAAU,EACVmJ,uBAAuB,EACvBxC,UAAW,KAcf,aAAgB,CACZyB,aAAa,EACbpI,UAAU,EACV2G,UAAW,GAEf,eAAkB,CACdoE,wBAAuB,EACvB/K,UAAU,EACV2G,UAAW,GAEf,oBAAuB,CACnBqE,wBAAuB,EACvBhL,UAAU,IAIlBC,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,iCAQnBgO,GACP,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,K,sCAGnChP,GAWa,iBAAtBA,EAAMyE,OAAOoC,OACZtJ,KAAKyI,MAAMoL,aAAepR,EAAMyE,OAAO7D,MAAMmO,eACvB,mBAAtB/O,EAAMyE,OAAOoC,OACbtJ,KAAKyI,MAAMqL,eAAiBrR,EAAMyE,OAAO7D,OACnB,mBAAtBZ,EAAMyE,OAAOoC,KACbtJ,KAAKyI,MAAMsE,MAAME,SAAWxK,EAAMyE,OAAO7D,MASf,wBAAtBZ,EAAMyE,OAAOoC,OACjBtJ,KAAKyI,MAAMsL,oBAAsBtR,EAAMyE,OAAO7D,OA1B/B,IA4Bb6Q,EAAalU,KAAKyI,MAAlByL,SACNlU,KAAKwK,SACD,CACI0J,e,mCAOE,IAAD,OAEL3O,UAAUC,OAENjH,IAAE,iBAAiBuL,UACnBhG,QAAQC,IAAI/D,KAAKyI,OACjB0L,GAAgBC,YAAYpU,KAAKyI,OAAOuB,MAAK,SAAAC,GACzC,EAAKzB,MAAM4B,QAAQC,KAAnB,wBAAyCJ,EAAS5K,KAAKqJ,UACvD5E,QAAQC,IAAI,cAGXuG,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,eAQzDR,MAAM,gD,+BAMV,OACI,oCACI,4BrBjEY,gBqBkEZ,6BAAK,4BAAKlI,KAAKyI,MAAMC,UACrB,0BAAMY,KAAK,eAAeC,GAAG,gBACzB,6BACI,+BrB/DK,gBqB+DL,MACA,2BAAOG,KAAK,OAAOJ,KAAK,eAAejG,MAAOrD,KAAKyI,MAAMoL,aAAcxE,SAAUrP,KAAKkR,mBAE1F,6BAAM,6BACN,6BACI,+BrBnEO,kBqBmEP,MACA,2BAAOxH,KAAK,OAAOJ,KAAK,iBAAiB+F,SAAUrP,KAAKkR,mBAE5D,6BAAM,6BACN,6BACI,+BrB7EQ,0BqB6ER,MACA,2BAAOxH,KAAK,OAAOJ,KAAK,iBAAiBjG,MAAOrD,KAAKoR,WAAWpR,KAAKyI,MAAMsE,MAAME,UAAWoC,SAAUrP,KAAKkR,mBAE/G,6BAAM,6BAgBN,6BACI,+BrB3Fa,yBqB2Fb,MACA,2BAAOxH,KAAK,OAAOJ,KAAK,sBAAsB+F,SAAUrP,KAAKkR,mBAEjE,6BAAM,6BACN,6BACI,4BAAQxH,KAAK,SAASE,QAAS5J,KAAKmR,YrB/H/B,iB,GqB3DqBnG,aCD7BqJ,G,YAGjB,WAAY7L,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACT6L,aAAc,IAElB,EAAKC,aAAe,EAAKA,aAAa9M,KAAlB,gBACpB,EAAK+M,eAAe,EAAKA,eAAe/M,KAApB,gBANL,E,iFASE,IAAD,OAChBvD,EAAsBiG,yBACtBgK,GAAgBM,kBAAkBzK,MAAK,SAAAC,GACnC,EAAKO,SAAS,CACV8J,aAAcrK,EAAS5K,UAG1BiL,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,gB,mCAU9BwL,GACTlU,KAAKwI,MAAM4B,QAAQC,KAAK,CACpBI,SAAU,gBACVhC,MAAO,CAAEyL,SAAUA,O,uCAOnB3O,UAAUC,OACVxF,KAAKwI,MAAM4B,QAAQC,KAAnB,gBAEAnC,MAAM,yB,+BAIJ,IAAD,OAEL,OACI,oCACK,2BAAIlI,KAAKwI,MAAMgB,MAAMC,OAAOf,SAC7B,6BACI,4BAAQgB,KAAK,SAAS0E,MAAO,CAAEC,WAAY,UAAYzE,QAAS5J,KAAKwU,gBtB+B3D,oBsB/B8G,6BAAM,8BAGlI,yBAAKnL,UAAU,gBAEX,4BtByBO,iBsBxBP,2BAAOiF,OAAO,IAAIC,MAAM,UACpB,+BACI,4BACI,4BtBkBH,iBsBjBG,4BtBkBD,mBsBjBC,4BtBYA,2BsBXA,4BtBYA,0BsBXA,4BtBYA,2BsBXA,4BtBYA,8BsBXA,4BtBcK,4BsBVb,+BAEQvO,KAAKyI,MAAM6L,aAAa1H,KAAI,SAAAsH,GAAQ,OAChC,wBAAIlR,IAAKkR,EAASQ,WAAY9K,QAAS,kBAAM,EAAK2K,aAAaL,KAC3D,4BAAKA,EAASL,cACd,4BAAKK,EAASJ,gBACd,4BAAKI,EAASnH,MAAME,UACpB,4BAAKiH,EAASnH,MAAMG,UACpB,4BAAKgH,EAASnH,MAAMI,UACpB,4BAAK+G,EAASnH,MAAMC,UACpB,4BAAKkH,EAASH,iC,GA3FH/I,aCE9B2J,G,YAEjB,WAAYnM,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTyL,SAAU,CACNL,aAAc,GACdC,eAAgB,GAChB/G,MAAO,CACHE,SAAU,IAKd8G,oBAAqB,KAG7B,EAAK7C,gBAAkB,EAAKA,gBAAgBzJ,KAArB,gBACvB,EAAKwK,WAAa,EAAKA,WAAWxK,KAAhB,gBAElB,EAAK2J,WAAW,EAAKA,WAAW3J,KAAhB,gBAChB,EAAKyE,cAAc,EAAKA,cAAczE,KAAnB,gBAnBJ,E,iFAuBfvD,EAAsBiG,yBACtBnK,KAAKwK,SAAS,CACV0J,SAAUlU,KAAKwI,MAAMqG,SAASpG,MAAMyL,WAExC3V,IAAE,uBAAuBsK,SAAS,CAC9BC,OAAQ,GACRC,MAAO,CACH,0BAA2B,CACvBE,UAAU,EACVmJ,uBAAuB,EACvBxC,UAAW,KAcf,wBAAyB,CACrByB,aAAa,EACbpI,UAAU,EACV2G,UAAW,GAEf,0BAA2B,CACvB3G,UAAU,EACV+K,wBAAwB,EACxBpE,UAAW,GAEf,+BAAgC,CAC5BqE,wBAAwB,EACxBhL,UAAU,IAGlBC,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,sCAKdb,GAAQ,IACdyR,EAAalU,KAAKyI,MAAlByL,SAEoB,0BAAtBzR,EAAMyE,OAAOoC,OACbtJ,KAAKyI,MAAMyL,SAASL,aAAepR,EAAMyE,OAAO7D,MAAMmO,eAEhC,4BAAtB/O,EAAMyE,OAAOoC,OACbtJ,KAAKyI,MAAMyL,SAASJ,eAAiBrR,EAAMyE,OAAO7D,OAE5B,4BAAtBZ,EAAMyE,OAAOoC,KACbtJ,KAAKyI,MAAMyL,SAASnH,MAAMoD,SAAW1N,EAAMyE,OAAO7D,MAWvB,iCAAtBZ,EAAMyE,OAAOoC,OAClBtJ,KAAKyI,MAAMyL,SAASH,oBAAsBtR,EAAMyE,OAAO7D,OAY3DrD,KAAKwK,SACD,CACI0J,e,iCASD5C,GACP,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,K,sCAI/CzR,KAAKwI,MAAM4B,QAAQC,KAAK,mC,mCAEd,IAAD,OAEL9E,UAAUC,OAENjH,IAAE,uBAAuBuL,SAEzBqK,GAAgBI,aAAavU,KAAKyI,MAAMyL,UAAUlK,MAAK,SAAAC,GACnD,EAAKzB,MAAM4B,QAAQC,KAAnB,wBAAyCJ,EAAS5K,KAAKqJ,UACvD5E,QAAQC,IAAI,cAGXuG,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,cAY3CR,MAAM,gD,+BAOV,OACI,oCACI,4BvBlFe,mBuBmFf,0BAAMoB,KAAK,qBAAqBC,GAAG,sBAC/B,6BACI,+BvBhFK,gBuBgFL,MACA,2BAAOG,KAAK,OAAOJ,KAAK,wBAAwBjG,MAAOrD,KAAKyI,MAAMyL,SAASL,aAAcxE,SAAUrP,KAAKkR,mBAE5G,6BAAM,6BACN,6BACI,+BvBpFO,kBuBoFP,MACA,2BAAOxH,KAAK,OAAOJ,KAAK,0BAA0BjG,MAAOrD,KAAKyI,MAAMyL,SAASJ,eAAgBzE,SAAUrP,KAAKkR,mBAEhH,6BAAM,6BACN,6BACI,+BvB9FQ,0BuB8FR,MACA,2BAAOxH,KAAK,OAAOJ,KAAK,0BAA0BjG,MAAOrD,KAAKoR,WAAWpR,KAAKyI,MAAMyL,SAASnH,MAAME,UAAWoC,SAAUrP,KAAKkR,mBAEjI,6BAAM,6BAgBN,6BACI,+BvB5Ga,yBuB4Gb,MACA,2BAAOxH,KAAK,OAAOJ,KAAK,+BAA+BjG,MAAOrD,KAAKyI,MAAMyL,SAASH,oBAAqB1E,SAAUrP,KAAKkR,mBAE1H,6BAAM,6BACN,6BACI,4BAAQxH,KAAK,SAASE,QAAS5J,KAAKiS,YvB/I/B,UuBgJL,4BAAQvI,KAAK,SAASE,QAAS5J,KAAKkM,evBpLlC,UuBoL8E,6BAAS,oC,GA3M5DlB,aC0BtC,O,mGA7BAG,GACP,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,oBAAwC0H,EAAM,M,0CAKrD,OAAOnH,IAAMsE,IAAN,UAAa7E,EAAb,2BAA+C,M,6CAItD,OAAOO,IAAMsE,IAAN,UAAa7E,EAAb,8BAAkD,M,kCAIjD0H,GACR,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,qBAAyC0H,EAAM,M,4CAKtD,OAAOnH,IAAMsE,IAAN,UAAa7E,EAAb,6BAAiD,M,mDAG/BqJ,GACzB,OAAO9I,IAAMsE,IAAN,UAAa7E,EAAb,6CAAyDqJ,GAAW,Q,MCnB9D8H,G,YAEjB,WAAYpM,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTsE,MAAO,CACHE,SAAS,IAEbiH,SAAU,CACNQ,WAAY,IAEhBtP,SAAU,CACNC,WAAY,IAEhBwP,aAAc,GACdP,aAAc,IAIlB,EAAKnD,WAAa,EAAKA,WAAW1J,KAAhB,gBAClB,EAAKyJ,gBAAkB,EAAKA,gBAAgBzJ,KAArB,gBACvB,EAAK2J,WAAW,EAAKA,WAAW3J,KAAhB,gBAnBD,E,iFAsBE,IAAD,OAChBvD,EAAsBiG,yBACtBuH,GAAgBoD,wBAAwB9K,MAAK,SAAAC,GACzC,EAAKO,SAAS,CACVqK,aAAc5K,EAAS5K,UAG1BiL,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,cAMvCyL,GAAgBY,wBAAwB/K,MAAK,SAAAC,GACzC,EAAKO,SAAS,CACV8J,aAAcrK,EAAS5K,UAG1BiL,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,cAOvCnK,IAAE,gBAAgBsK,SAAS,CACvBC,OAAQ,GACRC,MAAO,CACH,iBAAkB,CACdE,UAAU,EACVmJ,uBAAuB,EACvBxC,UAAW,KAkBf,sBAAuB,CACnB3G,UAAU,GAEd,sBAAuB,CACnBA,UAAU,IAGlBC,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,sCAKdb,GACc,mBAAtBA,EAAMyE,OAAOoC,OACbtJ,KAAKyI,MAAMsE,MAAME,SAAWxK,EAAMyE,OAAO7D,OASnB,wBAAtBZ,EAAMyE,OAAOoC,KACbtJ,KAAKyI,MAAMyL,SAASQ,WAAajS,EAAMyE,OAAO7D,MACjB,wBAAtBZ,EAAMyE,OAAOoC,OACpBtJ,KAAKyI,MAAMrD,SAASC,WAAa5C,EAAMyE,OAAO7D,OAd/B,IAgBb6Q,EAAalU,KAAKyI,MAAlByL,SACNlU,KAAKwK,SACD,CACI0J,e,mCAIE,IAAD,OAEL3O,UAAUC,OAENjH,IAAE,gBAAgBuL,SAClBkL,GAAeC,WAAWjV,KAAKyI,OAAOuB,MAAK,SAAAC,GACvC,EAAKzB,MAAM4B,QAAQC,KAAnB,uBAAwCJ,EAAS5K,KAAKqJ,aAIrD4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,cAS3CR,MAAM,gD,iCAIHoJ,GACP,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,K,+BAGzC,IACEoD,EAAiB7U,KAAKyI,MAAtBoM,aACJK,EAAgBL,EAAanW,OAAS,GACnCmW,EAAajI,KAAI,SAACC,EAAMzI,GACvB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKxH,YAAawH,EAAKQ,gBAEnDrN,MAECsU,EAAiBtU,KAAKyI,MAAtB6L,aACJa,EAAgBb,EAAa5V,OAAS,GACnC4V,EAAa1H,KAAI,SAACwI,EAAShR,GAC1B,OACI,4BAAQpB,IAAKoB,EAAGf,MAAO+R,EAAQV,YAAaU,EAAQrI,MAAME,YAE/DjN,MACP,OAEI,oCACI,4BzBxFS,eyByFT,0BAAMsJ,KAAK,cAAcC,GAAG,eACxB,6BACI,+BzBjGO,yByBiGP,MACA,2BAAOG,KAAK,OAAOJ,KAAK,iBAAiBjG,MAAOrD,KAAKoR,WAAWpR,KAAKyI,MAAMsE,MAAME,UAAWoC,SAAUrP,KAAKkR,mBAE/G,6BAAM,6BAiBN,6BzBjHS,kByBiHT,MACgC,4BAAQ3H,GAAG,aAAaD,KAAK,sBAAsB+F,SAAUrP,KAAKkR,iBAC1F,4BAAQ7N,MAAM,IAAd,sBACC6R,IAGT,6BACA,6BzBvHS,kByBuHT,MACgC,4BAAQ3L,GAAG,aAAaD,KAAK,sBAAsB+F,SAAUrP,KAAKkR,iBAC1F,4BAAQ7N,MAAM,IAAd,sBACC8R,IAGT,6BACA,6BACI,4BAAQzL,KAAK,SAASE,QAAS5J,KAAKmR,YzBvK/B,iB,GyBxDoBnG,aCL5BqK,G,YAEjB,WAAY7M,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACT6M,YAAa,IAEjB,EAAKC,cAAgB,EAAKA,cAAc9N,KAAnB,gBACrB,EAAK+N,YAAc,EAAKA,YAAY/N,KAAjB,gBANJ,E,iFAQE,IAAD,OAChBvD,EAAsBiG,yBACtB6K,GAAeS,oBAAoBzL,MAAK,SAAAC,GACpC,EAAKO,SAAS,CACV8K,YAAarL,EAAS5K,UAGzBiL,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,gB,sCAUnCnD,UAAUC,OACVxF,KAAKwI,MAAM4B,QAAQC,KAAnB,eAEAnC,MAAM,yB,kCAIFwN,GACR5R,QAAQC,IAAI2R,GACZ1V,KAAKwI,MAAM4B,QAAQC,KAAK,CACpBI,SAAU,eACVhC,MAAO,CAAEiN,QAASA,O,+BAKhB,IAAD,OAEL,OAEI,oCACI,2BAAI1V,KAAKwI,MAAMgB,MAAMC,OAAOf,SAE5B,6BACI,4BAAQgB,KAAK,SAAS0E,MAAO,CAAEC,WAAY,UAAYzE,QAAS5J,KAAKuV,e1B0C5D,mB0B1C6G,6BAAM,8BAGhI,yBAAKlM,UAAU,eAEX,4B1BsCM,gB0BrCN,2BAAOiF,OAAO,IAAIC,MAAM,UACpB,+BACI,4BACI,4B1B0BD,0B0BzBC,4B1B0BD,yB0BzBC,4B1B0BD,0B0BzBC,4B1B0BD,6B0BzBC,4B1B+BJ,Y0B3BJ,+BAEQvO,KAAKyI,MAAM6M,YAAY1I,KAAI,SAAA8I,GAAO,OAE9B,wBAAI1S,IAAK0S,EAAQC,UAAW/L,QAAS,kBAAM,EAAK4L,YAAYE,KACxD,4BAAKA,EAAQ3I,MAAME,UACnB,4BAAKyI,EAAQ3I,MAAMG,UACnB,4BAAKwI,EAAQ3I,MAAMI,UACnB,4BAAKuI,EAAQ3I,MAAMC,UACnB,4BAC8B,QAA7B0I,EAAQ9G,OAAOlK,WAAuB,SAAW,wB,GAxFxCsG,aCK7B4K,G,YAEjB,WAAYpN,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTiN,QAAS,CACLC,UAAU,GACV5I,MAAO,CACHE,SAAU,GAIV8F,QAAQ,IAEZmB,SAAU,CACN2B,UAAW,IAEfzQ,SAAU,CACNC,WAAY,IAEhBuJ,OAAQ,IAGZiG,aAAa,GACbP,aAAa,IAGjB,EAAKpD,gBAAgB,EAAKA,gBAAgBzJ,KAArB,gBACrB,EAAKwK,WAAW,EAAKA,WAAWxK,KAAhB,gBAChB,EAAK2J,WAAW,EAAKA,WAAW3J,KAAhB,gBAChB,EAAKyE,cAAc,EAAKA,cAAczE,KAAnB,gBA5BJ,E,iFAgCE,IAAD,OAChBvD,EAAsBiG,yBACtBnK,KAAKwK,SAAS,CACVkL,QAAS1V,KAAKwI,MAAMqG,SAASpG,MAAMiN,UAGvChE,GAAgBoD,wBAAwB9K,MAAK,SAAAC,GACzC,EAAKO,SAAS,CACVqK,aAAc5K,EAAS5K,UAG1BiL,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,cAMvCyL,GAAgBY,wBAAwB/K,MAAK,SAAAC,GACzC,EAAKO,SAAS,CACV8J,aAAcrK,EAAS5K,UAG1BiL,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,cAM/BnK,IAAE,sBAAsBsK,SAAS,CAC7BC,OAAQ,GACRC,MAAO,CACH,yBAA0B,CACtBE,UAAU,EACVmJ,uBAAuB,EACvBxC,UAAW,KAiBf,8BAA+B,CAC3B3G,UAAU,GAEd,8BAA+B,CAC3BA,UAAU,IAGlBC,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,iCAK3BgO,GACP,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,K,sCAEnChP,GAAO,IACbiT,EAAY1V,KAAKyI,MAAjBiN,QACoB,2BAAtBjT,EAAMyE,OAAOoC,OACdtJ,KAAKyI,MAAMiN,QAAQ3I,MAAME,SAAWxK,EAAMyE,OAAO7D,OAS1B,gCAAtBZ,EAAMyE,OAAOoC,OACbtJ,KAAKyI,MAAMiN,QAAQxB,SAASQ,WAAajS,EAAMyE,OAAO7D,OAC/B,gCAAtBZ,EAAMyE,OAAOoC,KACdtJ,KAAKyI,MAAMiN,QAAQtQ,SAASC,WAAa5C,EAAMyE,OAAO7D,MAC3B,mBAAtBZ,EAAMyE,OAAOoC,OAClBxF,QAAQC,IAAI,UACZ/D,KAAKyI,MAAMiN,QAAQ9G,OAASnM,EAAMyE,OAAOqC,IAAyB,GAGtEvJ,KAAKwK,SACD,CACIkL,c,sCAOR1V,KAAKwI,MAAM4B,QAAQC,KAAK,kC,mCAGf,IAAD,OACL9E,UAAUC,OAENjH,IAAE,sBAAsBuL,SAC/BkL,GAAeQ,YAAYxV,KAAKyI,MAAMiN,SAAS1L,MAAK,SAAAC,GAChD,EAAKzB,MAAM4B,QAAQC,KAAnB,uBAAwCJ,EAAS5K,KAAKqJ,aAIrD4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,cASnCR,MAAM,gD,+BAIJ,IACE2M,EAAiB7U,KAAKyI,MAAtBoM,aACJK,EAAgBL,EAAanW,OAAS,GACnCmW,EAAajI,KAAI,SAACC,EAAMzI,GACvB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKxH,YAAawH,EAAKQ,gBAEnDrN,MAECsU,EAAiBtU,KAAKyI,MAAtB6L,aACJa,EAAgBb,EAAa5V,OAAS,GACnC4V,EAAa1H,KAAI,SAACwI,EAAShR,GAC1B,OACI,4BAAQpB,IAAKoB,EAAGf,MAAO+R,EAAQV,YAAaU,EAAQrI,MAAME,YAE/DjN,MAEP,OACI,oCAEI,4B3BzGY,kB2B0GZ,0BAAMsJ,KAAK,oBAAoBC,GAAG,qBAC9B,6BACI,+B3BtHO,yB2BsHP,MACA,2BAAOG,KAAK,OAAOJ,KAAK,yBAAyBjG,MAAOrD,KAAKoR,WAAWpR,KAAKyI,MAAMiN,QAAQ3I,MAAME,UAAWoC,SAAUrP,KAAKkR,mBAE/H,6BAAM,6BAgBN,6BACKgB,EADL,IAEZ,2BAAOxI,KAAK,QAAQH,GAAG,kBAAkBD,KAAK,iBAAiBjG,OAAO,EAAMiM,SAAuC,IAA9BtP,KAAKyI,MAAMiN,QAAQ9G,OAAiBS,SAAUrP,KAAKkR,kBAF5H,UAGZ,2BAAOxH,KAAK,QAAQH,GAAG,kBAAkBD,KAAK,iBAAiBjG,OAAO,EAAOiM,SAAuC,IAA9BtP,KAAKyI,MAAMiN,QAAQ9G,OAAkBS,SAAUrP,KAAKkR,kBAH9H,aAKA,6BAAM,6BACN,6B3B3IS,kB2B2IT,MACgC,4BAAQ3H,GAAG,aAAaD,KAAK,8BAA8BjG,MAAOrD,KAAKyI,MAAMiN,QAAQtQ,SAAWpF,KAAKyI,MAAMiN,QAAQtQ,SAASC,WAAa,GAAIgK,SAAUrP,KAAKkR,iBACpL,4BAAQ7N,MAAM,IAAd,sBACC6R,IAGT,6BACA,6B3BjJS,kB2BiJT,MACgC,4BAAQ3L,GAAG,aAAaD,KAAK,8BAA8BjG,MAAOrD,KAAKyI,MAAMiN,QAAQxB,SAAWlU,KAAKyI,MAAMiN,QAAQxB,SAASQ,WAAa,GAAIrF,SAAUrP,KAAKkR,iBACpL,4BAAQ7N,MAAM,IAAd,sBACC8R,IAGT,6BAAM,6BAGN,6BAEI,4BAAQzL,KAAK,SAASE,QAAS5J,KAAKiS,Y3BnM/B,U2BoML,4BAAQvI,KAAK,SAASE,QAAS5J,KAAKkM,e3BxOlC,U2BwO8E,6BAAS,oC,GA7P7DlB,aCcrC,O,0GAnBOG,GACd,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,2BAA+C0H,EAAM,M,iDAK5D,OAAOnH,IAAMsE,IAAN,UAAa7E,EAAb,kCAAsD,M,oDAI7D,OAAOO,IAAMsE,IAAN,UAAa7E,EAAb,qCAAyD,M,yCAGjD0H,GACf,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,4BAAgD0H,EAAM,Q,MCXhD2K,G,YAEjB,WAAYtN,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTsN,eAAgB,CACZhJ,MAAO,CACHE,SAAU,IAKd+I,0BAA2B,IAE/BC,mBAAoB,IAGxB,EAAK/E,gBAAkB,EAAKA,gBAAgBzJ,KAArB,gBACvB,EAAK0J,WAAa,EAAKA,WAAW1J,KAAhB,gBAClB,EAAK2J,WAAW,EAAKA,WAAW3J,KAAhB,gBAjBD,E,iFAqBE,IAAD,OAChBvD,EAAsBiG,yBACtB+L,GAAsBC,8BAA8BnM,MAAK,SAAAC,GAErD,EAAKO,SAAS,CACVyL,mBAAoBhM,EAAS5K,UAGhCiL,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,cAMvCnK,IAAE,uBAAuBsK,SAAS,CAC9BC,OAAQ,GACRC,MAAO,CACH,gCAAiC,CAC7BE,UAAU,EACVmJ,uBAAuB,EACvBxC,UAAW,MAkBnB1G,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,sCAIdb,GACc,kCAAtBA,EAAMyE,OAAOoC,KAEbtJ,KAAKyI,MAAMsN,eAAehJ,MAAME,SAAWxK,EAAMyE,OAAO7D,MAY7B,6CAAtBZ,EAAMyE,OAAOoC,OAClBtJ,KAAKyI,MAAMsN,eAAeC,0BAA4B9G,MAAMC,KAAK1M,EAAMyE,OAAOkI,iBAAiB,SAACvC,GAAD,OAAUA,EAAKxJ,UAhB/F,IAoBb0S,EAAmB/V,KAAKyI,MAAxBsN,eACN/V,KAAKwK,SACD,CACIuL,qB,mCAKE,IAAD,OACLxQ,UAAUC,OACNjH,IAAE,uBAAuBuL,UACzBhG,QAAQC,IAAI/D,KAAKyI,OACjByN,GAAsBE,kBAAkBpW,KAAKyI,MAAMsN,gBAAgB/L,MAAK,SAAAC,GACpE,EAAKzB,MAAM4B,QAAQC,KAAnB,iCAAkDJ,EAAS5K,KAAKqJ,aAI/D4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,eAU3CR,MAAM,gD,iCAIHoJ,GACP,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,K,+BAEzC,IAEEwE,EAAuBjW,KAAKyI,MAA5BwN,mBACJI,EAAsBJ,EAAmBvX,OAAS,GAC/CuX,EAAmBrJ,KAAI,SAACC,EAAMzI,GAC7B,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKyJ,kBAAmBzJ,EAAKE,MAAME,YAE/DjN,MACP,OACI,oCACI,4B7B9CiB,uB6B+CjB,0BAAMsJ,KAAK,qBAAqBC,GAAG,sBAC/B,6BACI,+B7B/Cc,iC6B+Cd,MACA,2BAAOG,KAAK,OAAOJ,KAAK,gCAAgCjG,MAAOrD,KAAKoR,WAAWpR,KAAKyI,MAAMsN,eAAehJ,MAAME,UAAWoC,SAAUrP,KAAKkR,mBAE7I,6BAAM,6BAiBN,6BAEI,oC7B/DiB,8B6B+DjB,QAA0D,4BAAQ3H,GAAG,mBAAmBD,KAAK,2CAA2CqE,SAAS,OAAO0B,SAAUrP,KAAKkR,iBACnK,4BAAQ7N,MAAM,IAAd,sBACCgT,IAKT,6BAAM,6BACN,6BACI,4BAAQ3M,KAAK,SAASE,QAAS5J,KAAKmR,Y7B/H/B,iB,G6B1D2BnG,aCHnCuL,G,YAEjB,WAAY/N,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTwN,mBAAoB,IAExB,EAAKO,mBAAmB,EAAKA,mBAAmB/O,KAAxB,gBACxB,EAAKgP,qBAAqB,EAAKA,qBAAqBhP,KAA1B,gBANX,E,iFASE,IAAD,OAChBvD,EAAsBiG,yBACtB+L,GAAsBQ,2BAA2B1M,MAAK,SAAAC,GAElD,EAAKO,SAAS,CACVyL,mBAAoBhM,EAAS5K,UAGhCiL,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,gB,6CAUnCnD,UAAUC,OACVxF,KAAKwI,MAAM4B,QAAQC,KAAnB,sBAEAnC,MAAM,yB,yCAKK6N,GACf/V,KAAKwI,MAAM4B,QAAQC,KAAK,CACpBI,SAAU,sBACVhC,MAAO,CAAEsN,eAAgBA,O,+BAKvB,IAAD,OACL,OACI,oCACK,2BAAI/V,KAAKwI,MAAMgB,MAAMC,OAAOf,SAC7B,6BACI,4BAAQgB,KAAK,SAAS0E,MAAO,CAAEC,WAAY,UAAYzE,QAAS5J,KAAKyW,sB9BuDpD,2B8BvDoH,6BAAM,8BAG/I,yBAAKpN,UAAU,sBAEX,4B9BiDc,wB8BhDd,2BAAOiF,OAAO,IAAIC,MAAM,UACpB,+BACI,4BACI,4B9ByCM,kC8BxCN,4B9ByCM,iC8BxCN,4B9ByCM,kC8BxCN,4B9ByCM,qC8BxCN,4B9BHO,Y8BOf,+BAEQvO,KAAKyI,MAAMwN,mBAAmBrJ,KAAI,SAAAmJ,GAAc,OAE5C,wBAAI/S,IAAK+S,EAAeO,iBAAkB1M,QAAS,kBAAM,EAAK4M,mBAAmBT,KAC7E,4BAAKA,EAAehJ,MAAME,UAC1B,4BAAK8I,EAAehJ,MAAMG,UAC1B,4BAAK6I,EAAehJ,MAAMI,UAC1B,4BAAK4I,EAAehJ,MAAMC,UAC1B,4BAAyC,QAApC+I,EAAenH,OAAOlK,WAAuB,SAAW,wB,GAtF5CsG,aCEpC2L,G,YAEjB,WAAYnO,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTsN,eAAgB,CAEZO,iBAAkB,GAClBvJ,MAAO,CACHE,SAAU,IAKd2B,OAAQ,IAGZqH,mBAAoB,IAExB,EAAK/E,gBAAkB,EAAKA,gBAAgBzJ,KAArB,gBACvB,EAAKwK,WAAa,EAAKA,WAAWxK,KAAhB,gBAClB,EAAKyE,cAAc,EAAKA,cAAczE,KAAnB,gBACnB,EAAK2J,WAAW,EAAKA,WAAW3J,KAAhB,gBApBD,E,iFAuBE,IAAD,OAChBvD,EAAsBiG,yBAGtB+L,GAAsBC,8BAA8BnM,MAAK,SAAAC,GAErD,EAAKO,SAAS,CACVyL,mBAAoBhM,EAAS5K,UAGhCiL,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,cAMvC1I,KAAKwK,SAAS,CACVuL,eAAgB/V,KAAKwI,MAAMqG,SAASpG,MAAMsN,iBAE9CxX,IAAE,6BAA6BsK,SAAS,CACpCC,OAAQ,GACRC,MAAO,CACH,gCAAiC,CAC7BE,UAAU,EACVmJ,uBAAuB,EACvBxC,UAAW,MAkBnB1G,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,mCAIhB,IAAD,OAELiC,UAAUC,QAENjH,IAAE,6BAA6BuL,SAE/BoM,GAAsBM,mBAAmBxW,KAAKyI,MAAMsN,gBAAgB/L,MAAK,SAAAC,GAErE,EAAKzB,MAAM4B,QAAQC,KAAnB,iCAAkDJ,EAAS5K,KAAKqJ,aAG/D4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,gB,sCAW/C1I,KAAKwI,MAAM4B,QAAQC,KAAK,4C,iCAEjBiH,GACP,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,K,sCAEnChP,GAAQ,IACdsT,EAAmB/V,KAAKyI,MAAxBsN,eACoB,kCAAtBtT,EAAMyE,OAAOoC,OAEbtJ,KAAKyI,MAAMsN,eAAehJ,MAAME,SAAWxK,EAAMyE,OAAO7D,OAalC,6CAAtBZ,EAAMyE,OAAOoC,KACbtJ,KAAKyI,MAAMsN,eAAeC,0BAA4B9G,MAAMC,KAAK1M,EAAMyE,OAAOkI,iBAAiB,SAACvC,GAAD,OAAUA,EAAKxJ,SAEnF,0BAAtBZ,EAAMyE,OAAOoC,OAClBtJ,KAAKyI,MAAMsN,eAAenH,OAA6B,2BAApBnM,EAAMyE,OAAOqC,IAEpDvJ,KAAKwK,SACD,CACIuL,qB,+BAKF,IACEE,EAAuBjW,KAAKyI,MAA5BwN,mBACJI,EAAsBJ,EAAmBvX,OAAS,GAC/CuX,EAAmBrJ,KAAI,SAACC,EAAMzI,GAC7B,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKyJ,kBAAmBzJ,EAAKE,MAAME,YAE/DjN,MACP,OACI,oCACI,4B/BrDoB,0B+BsDpB,0BAAMsJ,KAAK,2BAA2BC,GAAG,4BACrC,6BACI,+B/BvDc,iC+BuDd,MACA,2BAAOG,KAAK,OAAOJ,KAAK,gCAAgCjG,MAAOrD,KAAKoR,WAAWpR,KAAKyI,MAAMsN,eAAehJ,MAAME,UAAWoC,SAAUrP,KAAKkR,mBAE7I,6BAAM,6BAgBN,6BACKgB,EADL,IAEA,2BAAOxI,KAAK,QAAQH,GAAG,yBAAyBD,KAAK,wBAAwBjG,OAAO,EAAMiM,SAA8C,IAArCtP,KAAKyI,MAAMsN,eAAenH,OAAiBS,SAAUrP,KAAKkR,kBAF7J,UAGA,2BAAOxH,KAAK,QAAQH,GAAG,yBAAyBD,KAAK,wBAAwBjG,OAAO,EAAOiM,SAA8C,IAArCtP,KAAKyI,MAAMsN,eAAenH,OAAkBS,SAAUrP,KAAKkR,kBAH/J,aAKA,6BAAK,6BACD,6BACI,oC/B3Ea,8B+B2Eb,QAA0D,4BAAQ3H,GAAG,mBAAmBD,KAAK,2CAA2CqE,SAAS,OAAOtK,MAAOrD,KAAKyI,MAAMsN,eAAeC,0BAA2B3G,SAAUrP,KAAKkR,iBAC/N,4BAAQ7N,MAAM,IAAd,sBACCgT,IAGT,6BAAK,6BAEL,6BACI,4BAAQ3M,KAAK,SAASE,QAAS5J,KAAKiS,Y/BzInC,U+B0ID,4BAAQvI,KAAK,SAASE,QAAS5J,KAAKkM,e/B9KtC,U+B8KkF,6BAAS,oC,GAtM1DlB,aCQ5C,O,uGAXI4L,GAEX,OADA9S,QAAQC,IAAI6S,GACL5S,IAAMsE,IAAN,UAAa7E,EAAb,yCAAqDmT,GAAa,M,uCAKzE,OAAO5S,IAAMsE,IAAN,UAAa7E,EAAb,uBAA2C,Q,eCArCoT,I,mBAEjB,WAAYrO,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTqO,YAAa,GACbpO,QAAS,IAEb,EAAKqO,gBAAkB,EAAKA,gBAAgBtP,KAArB,gBANR,E,iFASE,IAAD,OAChBvD,EAAsBiG,yBACtB6M,GAAeC,iBAAiBjN,MAAK,SAAAC,GACjCnG,QAAQC,IAAIkG,EAAS5K,MACrB,EAAKmL,SAAS,CACVsM,YAAa7M,EAAS5K,UAGzBiL,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,cAOvCnK,IAAE,iBAAiBsK,SAAS,CACxBC,OAAQ,GACRC,MAAO,CACH,UAAa,CACTE,UAAU,Q,+BAMhB,IACE6N,EAAgB9W,KAAKyI,MAArBqO,YACJI,EAAeJ,EAAYpY,OAAS,GACjCoY,EAAYlK,KAAI,SAACC,EAAMzI,GACtB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAK+J,WAAY/J,EAAKE,MAAME,YAExDjN,MACP,OACI,6BACI,yBAAKqJ,UAAU,qBAEX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,IACX,wBAAImE,MAAM,gBAGd,yBAAKnE,UAAU,4BACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,iBACX,wBAAIA,UAAU,eAAd,0BAEJ,yBAAKA,UAAU,cACX,0BAAMC,KAAK,eAAeC,GAAG,gBAEzB,yBAAKF,UAAU,cACX,4BAAQsE,UAAQ,EAACH,MAAM,gBACnB,qCACA,qCACA,qCACA,qCACA,yCAMhB,yBAAKnE,UAAU,gBACX,4BAAQ8N,IAAI,SAASvN,QAAS5J,KAAK+W,gBAAiB1N,UAAU,8BjC7C5E,kBiCsDV,4BAAKrJ,KAAKyI,MAAMC,SAChB,4BjClDY,yBiCkDa,6BACzB,0BAAMY,KAAK,eAAeC,GAAG,gBjCrDxB,UiCqDL,MACgB,4BAAQA,GAAG,YAAYD,KAAK,YAAYqE,UAAU,GACzDuJ,GACI,6BAAS,6BAClB,4BAAQxN,KAAK,SAASE,QAAS5J,KAAK+W,iBjC5D9B,gB,wCiCkEH,IAAD,OACVxR,UAAUC,OACNjH,IAAE,iBAAiBuL,SACnBsN,wBAAa,CACTC,MAAO,oBACP3O,QAAQ,GAAD,OAAKiD,GACZ2L,QAAS,CACL,CACIvK,MAAO,MACPnD,QAAS,WAEL,IADA,IAAI2N,EAAahZ,IAAE,cAAcsL,MACxB2N,EAAI,EAAGA,EAAID,EAAW7Y,OAAQ8Y,IACnCtT,EAAsBiG,yBACtB6M,GAAeS,eAAeF,EAAWC,IACpCxN,MAAK,SAAAC,GACF,IAAIkB,EAAOlB,EAAS5K,KAGhByH,EAAcC,UAAUC,KAAK,OAAQ,GACzCF,EAAYG,gBAAkB,SAAU1G,GACpC,IAAImX,EAAMnX,EAAE2G,OAAOC,OACduQ,EAAItQ,iBAAiBC,SAAS,gBACrBqQ,EAAIpQ,kBAAkB,cAAe,CAAEC,QAAS,KAAMC,eAAe,IAE9EkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,KAAMC,eAAe,IAE/EkQ,EAAItQ,iBAAiBC,SAAS,aACrBqQ,EAAIpQ,kBAAkB,WAAY,CAAEC,QAAS,aAAcC,eAAe,IAEnFkQ,EAAItQ,iBAAiBC,SAAS,YACrBqQ,EAAIpQ,kBAAkB,UAAW,CAAEC,QAAS,YAAaC,eAAe,IAEjFkQ,EAAItQ,iBAAiBC,SAAS,aACrBqQ,EAAIpQ,kBAAkB,WAAY,CAAEC,QAAS,aAAcC,eAAe,IAEnFkQ,EAAItQ,iBAAiBC,SAAS,SACrBqQ,EAAIpQ,kBAAkB,OAAQ,CAAEC,QAAS,SAAUC,eAAe,IAE3EkQ,EAAItQ,iBAAiBC,SAAS,aACrBqQ,EAAIpQ,kBAAkB,WAAY,CAAEC,QAAS,aAAcC,eAAe,IAEnFkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,iBAAkBC,eAAe,IAE3FkQ,EAAItQ,iBAAiBC,SAAS,eACrBqQ,EAAIpQ,kBAAkB,aAAc,CAAEC,QAAS,eAAgBC,eAAe,IAEvFkQ,EAAItQ,iBAAiBC,SAAS,WACrBqQ,EAAIpQ,kBAAkB,SAAU,CAAEC,QAAS,WAAYC,eAAe,IAE/EkQ,EAAItQ,iBAAiBC,SAAS,kBACrBqQ,EAAIpQ,kBAAkB,gBAAiB,CAAEC,QAAS,kBAAmBC,eAAe,IAE7FkQ,EAAItQ,iBAAiBC,SAAS,qBACrBqQ,EAAIpQ,kBAAkB,mBAAoB,CAAEC,QAAS,qBAAsBC,eAAe,IAEnGkQ,EAAItQ,iBAAiBC,SAAS,YACrBqQ,EAAIpQ,kBAAkB,UAAW,CAAEC,QAAS,YAAaC,eAAe,IAEjFkQ,EAAItQ,iBAAiBC,SAAS,oBACrBqQ,EAAIpQ,kBAAkB,kBAAmB,CAAEC,QAAS,oBAAqBC,eAAe,IAEjGkQ,EAAItQ,iBAAiBC,SAAS,eACrBqQ,EAAIpQ,kBAAkB,aAAc,CAAEC,QAAS,eAAgBC,eAAe,IAEvFkQ,EAAItQ,iBAAiBC,SAAS,mBACrBqQ,EAAIpQ,kBAAkB,iBAAkB,CAAEC,QAAS,mBAAoBC,eAAe,IAE/FkQ,EAAItQ,iBAAiBC,SAAS,mBACrBqQ,EAAIpQ,kBAAkB,iBAAkB,CAAEC,QAAS,mBAAoBC,eAAe,IAE/FkQ,EAAItQ,iBAAiBC,SAAS,0BACrBqQ,EAAIpQ,kBAAkB,wBAAyB,CAAEC,QAAS,0BAA2BC,eAAe,IAE7GkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,iBAAkBC,eAAe,IAE3FkQ,EAAItQ,iBAAiBC,SAAS,kBACrBqQ,EAAIpQ,kBAAkB,gBAAiB,CAAEC,QAAS,kBAAmBC,eAAe,IAE7FkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,iBAAkBC,eAAe,KAGpGV,EAAYY,UAAY,SAAUnH,GAC9BuD,QAAQC,IAAI,cAEZ,IACI4T,EAFEpX,EAAE2G,OAAOC,OACOQ,YAAY,CAAC,eAAgB,aACzBC,YAAY,eAClCgQ,EAAgBrT,IAASC,IAAI0F,QAAQ2N,KAAKC,UAAU3M,GAAOzH,GAE3DkD,EADYrC,IAASC,IAAIC,QAAQJ,aAAaC,QAAQ,WAAYZ,GAC/CgB,SAASH,IAASI,IAAIC,MACzCiI,EAAO,CACPtD,GAAI4B,EAAKyL,UAAY,KAAOzL,EAAK4M,eAAiB,QAAUnR,EAC5DgQ,UAAWzL,EAAKyL,UAChBoB,QAAS7M,EAAK4M,eACdE,YAAc1T,IAASC,IAAI0F,QAASiB,EAAK4B,MAAMmL,QAAUxU,GAAagB,WACtEyT,YAAaP,EAAclT,WAC3BkC,OAAQA,GAEZ9C,QAAQC,IAAI8I,GACZ,IAAIuL,EAAaT,EAAQvM,IAAIyB,GAE7BuL,EAAWrQ,QAAU,SAAUtF,KAG/B2V,EAAW1Q,UAAY,SAAUjF,GAC7BzC,KAAKwK,SAAS,CACV9B,QAAQ,GAAD,OjCvK5B,oCiCyKejB,KAAKzH,OACTyH,KAAK,MAEV6C,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,gBASjE,CACIqE,MAAO,KACPnD,QAAS,WACL,EAAKY,SAAS,CACV9B,QAAQ,GAAD,OjChHhB,oCiCwHfR,MAAM,GAAD,OAAIwD,Q,GA3PqCV,c,oBCDrCqN,G,YAEjB,WAAY7P,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,QAAS,GACToO,YAAa,IAEjB,EAAKwB,cAAgB,EAAKA,cAAc7Q,KAAnB,gBACrB,EAAK8Q,qBAAuB,EAAKA,qBAAqB9Q,KAA1B,gBAPb,E,iFAWflJ,IAAE,eAAe0C,OACjB1C,IAAE,cAAcY,OAChBZ,IAAE,eAAesK,SAAS,CACtBC,OAAQ,GACRC,MAAO,CACH,UAAa,CACTE,UAAU,Q,+BAMhB,IACE6N,EAAgB9W,KAAKyI,MAArBqO,YACJI,EAAeJ,EAAYpY,OAAS,GACjCoY,EAAYlK,KAAI,SAACC,EAAMzI,GACtB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKtD,IAAKsD,EAAKvD,QAE3CtJ,MACP,OACI,6BACI,4BAAKA,KAAKyI,MAAMC,SAChB,4BlCWU,uBkCXa,6BACvB,0BAAMa,GAAG,aAAaD,KAAK,cACvB,yBAAKC,GAAG,aACJ,2BAAOG,KAAK,SAAS,6BAAS,6BAC9B,4BAAQA,KAAK,SAASE,QAAS5J,KAAKsY,elCQpC,WkCNJ,yBAAK/O,GAAG,clCUA,4BkCVR,MACuB,4BAAQA,GAAG,YAAYD,KAAK,YAAYqE,UAAU,GAChEuJ,GACI,6BAAS,6BAClB,4BAAQxN,KAAK,SAASE,QAAS5J,KAAKuY,sBlC1BlC,e,sCkCkClB,GAAIxZ,OAAOyZ,MAAQzZ,OAAO0Z,YAAc1Z,OAAO2Z,UAAY3Z,OAAO4Z,KAC9D,QAA2DC,GAAvD9Z,SAAS+Z,cAAc,oBAAoBC,MAAM,GACjD5Q,MAAM,GAAD,OlC0EI,6BkCzEN,CACH,IAAI6Q,EAAOja,SAAS+Z,cAAc,oBAAoBC,MAAM,GAGnC,OAFVC,EAAKzP,KACU0P,MAAM,KACjB,GACfC,KAAMC,UAAUH,GAAM/O,KAAK,SAAUmP,GACjC,IAAI/U,EAAI,EACJgV,EAAW,GACXtW,EAAO,EACXD,OAAOwW,KAAKF,EAAIL,OAAOQ,SAAQ,SAAUC,GACrCzW,OAEJD,OAAOwW,KAAKF,EAAIL,OAAOQ,QAAQ,SAAUC,GACrCJ,EAAIL,MAAMS,GAAUC,MAAM,UAAUxP,KAAK,SAAUyP,GAC/CrV,IACA,IAAIsV,EAAkB7B,KAAK8B,MAAMF,GAE7BG,EADQrV,IAASC,IAAIC,QAAQiV,EAAgBvB,YAAazU,GACxCgB,SAASH,IAASI,IAAIC,MACxCiV,EAA2BhC,KAAK8B,MAAMC,GAC1CR,EAAShV,GAAK,CACVmF,GAAIgQ,EACJjQ,KAAMuQ,EAAyB9M,MAAMmL,QAAU,KAAO2B,EAAyB9B,gBAE/E3T,IAAMtB,IACN9C,KAAKwK,SAAS,CACVsM,YAAasC,IAGjB7a,IAAE,eAAeY,OACjBZ,IAAE,cAAc0C,SAEtBwG,KAAKzH,QAETyH,KAAKzH,QAETyH,KAAKzH,OAEPkI,MAAM,GAAD,OlCqCI,+B,6CkC7BD,IAAD,OACf3J,IAAE,eAAeuL,SACb/K,OAAOyZ,MAAQzZ,OAAO0Z,YAAc1Z,OAAO2Z,UAAY3Z,OAAO4Z,YACHC,GAAvD9Z,SAAS+Z,cAAc,oBAAoBC,MAAM,GACjD5Q,MAAM,GAAD,OlCwBA,yBkCtBLkP,wBAAa,CACTC,MAAO,oBACP3O,QAAQ,GAAD,OAAKiD,GACZ2L,QAAS,CACL,CACIvK,MAAO,MACPnD,QAAS,WAET,IAAImP,EAAOja,SAAS+Z,cAAc,oBAAoBC,MAAM,GAGxDhS,EAAcC,UAAUC,KAAK,OAAQ,GACrC8S,EAAiBvb,IAAE,cAAcsL,MACrC/C,EAAYG,gBAAkB,SAAU1G,GACpC,IAAImX,EAAMnX,EAAE2G,OAAOC,OACduQ,EAAItQ,iBAAiBC,SAAS,gBACrBqQ,EAAIpQ,kBAAkB,cAAe,CAAEC,QAAS,KAAMC,eAAe,IAE9EkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,KAAMC,eAAe,IAE/EkQ,EAAItQ,iBAAiBC,SAAS,aACrBqQ,EAAIpQ,kBAAkB,WAAY,CAAEC,QAAS,aAAcC,eAAe,IAEnFkQ,EAAItQ,iBAAiBC,SAAS,YACrBqQ,EAAIpQ,kBAAkB,UAAW,CAAEC,QAAS,YAAaC,eAAe,IAEjFkQ,EAAItQ,iBAAiBC,SAAS,aACrBqQ,EAAIpQ,kBAAkB,WAAY,CAAEC,QAAS,aAAcC,eAAe,IAEnFkQ,EAAItQ,iBAAiBC,SAAS,SACrBqQ,EAAIpQ,kBAAkB,OAAQ,CAAEC,QAAS,SAAUC,eAAe,IAE3EkQ,EAAItQ,iBAAiBC,SAAS,aACrBqQ,EAAIpQ,kBAAkB,WAAY,CAAEC,QAAS,aAAcC,eAAe,IAEnFkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,iBAAkBC,eAAe,IAE3FkQ,EAAItQ,iBAAiBC,SAAS,eACrBqQ,EAAIpQ,kBAAkB,aAAc,CAAEC,QAAS,eAAgBC,eAAe,IAEvFkQ,EAAItQ,iBAAiBC,SAAS,WACrBqQ,EAAIpQ,kBAAkB,SAAU,CAAEC,QAAS,WAAYC,eAAe,IAE/EkQ,EAAItQ,iBAAiBC,SAAS,kBACrBqQ,EAAIpQ,kBAAkB,gBAAiB,CAAEC,QAAS,kBAAmBC,eAAe,IAE7FkQ,EAAItQ,iBAAiBC,SAAS,qBACrBqQ,EAAIpQ,kBAAkB,mBAAoB,CAAEC,QAAS,qBAAsBC,eAAe,IAEnGkQ,EAAItQ,iBAAiBC,SAAS,YACrBqQ,EAAIpQ,kBAAkB,UAAW,CAAEC,QAAS,YAAaC,eAAe,IAEjFkQ,EAAItQ,iBAAiBC,SAAS,oBACrBqQ,EAAIpQ,kBAAkB,kBAAmB,CAAEC,QAAS,oBAAqBC,eAAe,IAEjGkQ,EAAItQ,iBAAiBC,SAAS,eACrBqQ,EAAIpQ,kBAAkB,aAAc,CAAEC,QAAS,eAAgBC,eAAe,IAEvFkQ,EAAItQ,iBAAiBC,SAAS,mBACrBqQ,EAAIpQ,kBAAkB,iBAAkB,CAAEC,QAAS,mBAAoBC,eAAe,IAE/FkQ,EAAItQ,iBAAiBC,SAAS,mBACrBqQ,EAAIpQ,kBAAkB,iBAAkB,CAAEC,QAAS,mBAAoBC,eAAe,IAE/FkQ,EAAItQ,iBAAiBC,SAAS,0BACrBqQ,EAAIpQ,kBAAkB,wBAAyB,CAAEC,QAAS,0BAA2BC,eAAe,IAE7GkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,iBAAkBC,eAAe,IAE3FkQ,EAAItQ,iBAAiBC,SAAS,kBACrBqQ,EAAIpQ,kBAAkB,gBAAiB,CAAEC,QAAS,kBAAmBC,eAAe,IAE7FkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,iBAAkBC,eAAe,KAGpGV,EAAYY,UAAY,SAAUnH,GACxBA,EAAE2G,OAAOC,OACOQ,YAAY,CAAC,eAAgB,aACzBC,YAAY,eACtCqR,KAAMC,UAAUH,GAAM/O,MAAK,SAAUmP,GACjCtW,OAAOwW,KAAKF,EAAIL,OAAOQ,SAAQ,SAAUC,GAErCJ,EAAIL,MAAMS,GAAUC,MAAM,UAAUxP,MAAK,SAAUyP,GAC/C,IAAK,IAAIjC,EAAI,EAAGA,EAAIsC,EAAepb,OAAQ8Y,IACvC,GAAIsC,EAAetC,IAAM+B,EAAU,CAE/B,IACIQ,EAFExZ,EAAE2G,OAAOC,OACQQ,YAAY,CAAC,eAAgB,aACxBC,YAAY,eACpCuD,EAAO0M,KAAK8B,MAAMF,GAElB7S,EADYrC,IAASC,IAAIC,QAAQJ,aAAaC,QAAQ,WAAYZ,GAC/CgB,SAASH,IAASI,IAAIC,MAC7CuG,EAAKvE,OAASA,EACduE,EAAK5B,GAAK4B,EAAKyL,UAAY,KAAOzL,EAAK6M,QAAU,QAAUpR,EAC3D,IAAIoT,EAAwBD,EAAS3O,IAAID,GACzC6O,EAAsBjS,QAAU,SAAUtF,KAE1CuX,EAAsBtS,UAAY,SAAUjF,eAQhEzC,KAAKwK,SAAS,CACV9B,QAAQ,GAAD,OlCtKd,gCkCwKGnK,IAAE,eAAe0C,OACjB1C,IAAE,cAAcY,QAClBsI,KAAK,KAGX,CACIsF,MAAO,KACPnD,QAAS,WACL,EAAKY,SAAS,CACV9B,QAAQ,GAAD,OlChGpB,yC,GkCpI6BsC,a,qBCDnCiP,G,YAEjB,WAAYzR,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTqO,YAAa,GACbpO,QAAS,IAEb,EAAKwR,cAAgB,EAAKA,cAAczS,KAAnB,gBANN,E,iFAUf,IAEIX,EAAcC,UAAUC,KAAK,OAAQ,GACzCF,EAAYG,gBAAkB,SAAU1G,GACpC,IAAImX,EAAMnX,EAAE2G,OAAOC,OACduQ,EAAItQ,iBAAiBC,SAAS,gBACrBqQ,EAAIpQ,kBAAkB,cAAe,CAAEC,QAAS,KAAMC,eAAe,IAE9EkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,KAAMC,eAAe,IAE/EkQ,EAAItQ,iBAAiBC,SAAS,aACrBqQ,EAAIpQ,kBAAkB,WAAY,CAAEC,QAAS,aAAcC,eAAe,IAEnFkQ,EAAItQ,iBAAiBC,SAAS,YACrBqQ,EAAIpQ,kBAAkB,UAAW,CAAEC,QAAS,YAAaC,eAAe,IAEjFkQ,EAAItQ,iBAAiBC,SAAS,aACrBqQ,EAAIpQ,kBAAkB,WAAY,CAAEC,QAAS,aAAcC,eAAe,IAEnFkQ,EAAItQ,iBAAiBC,SAAS,SACrBqQ,EAAIpQ,kBAAkB,OAAQ,CAAEC,QAAS,SAAUC,eAAe,IAE3EkQ,EAAItQ,iBAAiBC,SAAS,aACrBqQ,EAAIpQ,kBAAkB,WAAY,CAAEC,QAAS,aAAcC,eAAe,IAEnFkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,iBAAkBC,eAAe,IAE3FkQ,EAAItQ,iBAAiBC,SAAS,eACrBqQ,EAAIpQ,kBAAkB,aAAc,CAAEC,QAAS,eAAgBC,eAAe,IAEvFkQ,EAAItQ,iBAAiBC,SAAS,WACrBqQ,EAAIpQ,kBAAkB,SAAU,CAAEC,QAAS,WAAYC,eAAe,IAE/EkQ,EAAItQ,iBAAiBC,SAAS,kBACrBqQ,EAAIpQ,kBAAkB,gBAAiB,CAAEC,QAAS,kBAAmBC,eAAe,IAE7FkQ,EAAItQ,iBAAiBC,SAAS,qBACrBqQ,EAAIpQ,kBAAkB,mBAAoB,CAAEC,QAAS,qBAAsBC,eAAe,IAEnGkQ,EAAItQ,iBAAiBC,SAAS,YACrBqQ,EAAIpQ,kBAAkB,UAAW,CAAEC,QAAS,YAAaC,eAAe,IAEjFkQ,EAAItQ,iBAAiBC,SAAS,oBACrBqQ,EAAIpQ,kBAAkB,kBAAmB,CAAEC,QAAS,oBAAqBC,eAAe,IAEjGkQ,EAAItQ,iBAAiBC,SAAS,eACrBqQ,EAAIpQ,kBAAkB,aAAc,CAAEC,QAAS,eAAgBC,eAAe,IAEvFkQ,EAAItQ,iBAAiBC,SAAS,mBACrBqQ,EAAIpQ,kBAAkB,iBAAkB,CAAEC,QAAS,mBAAoBC,eAAe,IAE/FkQ,EAAItQ,iBAAiBC,SAAS,mBACrBqQ,EAAIpQ,kBAAkB,iBAAkB,CAAEC,QAAS,mBAAoBC,eAAe,IAE/FkQ,EAAItQ,iBAAiBC,SAAS,0BACrBqQ,EAAIpQ,kBAAkB,wBAAyB,CAAEC,QAAS,0BAA2BC,eAAe,IAE7GkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,iBAAkBC,eAAe,IAE3FkQ,EAAItQ,iBAAiBC,SAAS,kBACrBqQ,EAAIpQ,kBAAkB,gBAAiB,CAAEC,QAAS,kBAAmBC,eAAe,IAE7FkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,iBAAkBC,eAAe,KAGpGV,EAAYY,UAAY,SAAUnH,GAE9B,IAEI4Z,EAHE5Z,EAAE2G,OAAOC,OACOQ,YAAY,CAAC,eAAgB,aACzBC,YAAY,eACbS,SACrB+R,EAAU,GACdD,EAAWpS,QAAU,SAAUtF,KAG/B0X,EAAWzS,UAAY,SAAUjF,GAC7B,IAAI4X,EACJA,EAAWF,EAAWhT,OAGtB,IAFA,IACIP,EADYrC,IAASC,IAAIC,QAAQJ,aAAaC,QAAQ,WAAYZ,GAC/CgB,SAASH,IAASI,IAAIC,MACpCR,EAAI,EAAGA,EAAIiW,EAAS3b,OAAQ0F,IACjC,GAAIiW,EAASjW,GAAGwC,QAAUA,EAAQ,CAC9B,IAEI0T,EAAc,CACdhR,KAHQ/E,IAASC,IAAIC,QAAQ4V,EAASjW,GAAG6T,YAAavU,GAClCgB,SAASH,IAASI,IAAIC,MAExBF,WAAa,KAAO2V,EAASjW,GAAG4T,QAClDzO,GAAI8Q,EAASjW,GAAGmF,IAEpB6Q,EAAQhW,GAAKkW,EAGrBta,KAAKwK,SAAS,CACVsM,YAAasD,KAEnB3S,KAAKzH,OACTyH,KAAKzH,MACPzB,IAAE,eAAesK,SAAS,CACtBC,OAAQ,GACRC,MAAO,CACH,UAAa,CACTE,UAAU,Q,+BAOhB,IACE6N,EAAgB9W,KAAKyI,MAArBqO,YACJI,EAAeJ,EAAYpY,OAAS,GACjCoY,EAAYlK,KAAI,SAACC,EAAMzI,GACtB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKtD,IAAKsD,EAAKvD,QAE3CtJ,MACP,OACI,6BACI,4BAAKA,KAAKyI,MAAMC,SAChB,4BnCzFU,uBmCyFa,6BACvB,0BAAMY,KAAK,aAAaC,GAAG,cnCzFtB,UmCyFL,MACgB,4BAAQA,GAAG,YAAYD,KAAK,YAAYqE,UAAU,GACzDuJ,GACI,6BAAS,6BAClB,4BAAQxN,KAAK,SAASE,QAAS5J,KAAKka,enC/FhC,c,sCmCsGhB,GAAI3b,IAAE,eAAeuL,QAAS,CAC1B,IAAIqP,EAAM,IAAIF,KACVa,EAAiBvb,IAAE,cAAcsL,MACjC0Q,EAAqBhc,IAAE,8BAA8Bic,UAAU5N,KAAI,SAAAC,GAAI,OAAIA,EAAK4N,QAGhF3T,EAAcC,UAAUC,KAAK,OAAQ,GACzCF,EAAYG,gBAAkB,SAAU1G,GACpC,IAAImX,EAAMnX,EAAE2G,OAAOC,OACduQ,EAAItQ,iBAAiBC,SAAS,gBACrBqQ,EAAIpQ,kBAAkB,cAAe,CAAEC,QAAS,KAAMC,eAAe,IAE9EkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,KAAMC,eAAe,IAE/EkQ,EAAItQ,iBAAiBC,SAAS,aACrBqQ,EAAIpQ,kBAAkB,WAAY,CAAEC,QAAS,aAAcC,eAAe,IAEnFkQ,EAAItQ,iBAAiBC,SAAS,YACrBqQ,EAAIpQ,kBAAkB,UAAW,CAAEC,QAAS,YAAaC,eAAe,IAEjFkQ,EAAItQ,iBAAiBC,SAAS,aACrBqQ,EAAIpQ,kBAAkB,WAAY,CAAEC,QAAS,aAAcC,eAAe,IAEnFkQ,EAAItQ,iBAAiBC,SAAS,SACrBqQ,EAAIpQ,kBAAkB,OAAQ,CAAEC,QAAS,SAAUC,eAAe,IAE3EkQ,EAAItQ,iBAAiBC,SAAS,aACrBqQ,EAAIpQ,kBAAkB,WAAY,CAAEC,QAAS,aAAcC,eAAe,IAEnFkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,iBAAkBC,eAAe,IAE3FkQ,EAAItQ,iBAAiBC,SAAS,eACrBqQ,EAAIpQ,kBAAkB,aAAc,CAAEC,QAAS,eAAgBC,eAAe,IAEvFkQ,EAAItQ,iBAAiBC,SAAS,WACrBqQ,EAAIpQ,kBAAkB,SAAU,CAAEC,QAAS,WAAYC,eAAe,IAE/EkQ,EAAItQ,iBAAiBC,SAAS,kBACrBqQ,EAAIpQ,kBAAkB,gBAAiB,CAAEC,QAAS,kBAAmBC,eAAe,IAE7FkQ,EAAItQ,iBAAiBC,SAAS,qBACrBqQ,EAAIpQ,kBAAkB,mBAAoB,CAAEC,QAAS,qBAAsBC,eAAe,IAEnGkQ,EAAItQ,iBAAiBC,SAAS,YACrBqQ,EAAIpQ,kBAAkB,UAAW,CAAEC,QAAS,YAAaC,eAAe,IAEjFkQ,EAAItQ,iBAAiBC,SAAS,oBACrBqQ,EAAIpQ,kBAAkB,kBAAmB,CAAEC,QAAS,oBAAqBC,eAAe,IAEjGkQ,EAAItQ,iBAAiBC,SAAS,eACrBqQ,EAAIpQ,kBAAkB,aAAc,CAAEC,QAAS,eAAgBC,eAAe,IAEvFkQ,EAAItQ,iBAAiBC,SAAS,mBACrBqQ,EAAIpQ,kBAAkB,iBAAkB,CAAEC,QAAS,mBAAoBC,eAAe,IAE/FkQ,EAAItQ,iBAAiBC,SAAS,mBACrBqQ,EAAIpQ,kBAAkB,iBAAkB,CAAEC,QAAS,mBAAoBC,eAAe,IAE/FkQ,EAAItQ,iBAAiBC,SAAS,0BACrBqQ,EAAIpQ,kBAAkB,wBAAyB,CAAEC,QAAS,0BAA2BC,eAAe,IAE7GkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,iBAAkBC,eAAe,IAE3FkQ,EAAItQ,iBAAiBC,SAAS,kBACrBqQ,EAAIpQ,kBAAkB,gBAAiB,CAAEC,QAAS,kBAAmBC,eAAe,IAE7FkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,iBAAkBC,eAAe,KAGpGV,EAAYY,UAAY,SAAUnH,GAE9B,IAEI4Z,EAHE5Z,EAAE2G,OAAOC,OACOQ,YAAY,CAAC,eAAgB,aACzBC,YAAY,eACbS,SACzB8R,EAAWpS,QAAU,SAAUtF,KAG/B0X,EAAWzS,UAAY,SAAUjF,GAC7B,IAAI4X,EACJA,EAAWF,EAAWhT,OACtB,IAAK,IAAI/C,EAAI,EAAGA,EAAIiW,EAAS3b,OAAQ0F,IAAK,CACtC,IAAK,IAAIoT,EAAI,EAAGA,EAAIsC,EAAepb,OAAQ8Y,IACvC,GAAI6C,EAASjW,GAAGmF,IAAMuQ,EAAetC,GAAI,CACrC,IAAIkD,EAAM7C,KAAKC,UAAUuC,EAASjW,IAClC+U,EAAIJ,KAAKwB,EAAmBnW,GAAK,IAAMuW,SAASvW,EAAI,GAAK,OAAQsW,GAIrEtW,GAAKiW,EAAS3b,OAAS,IACvBya,EAAIyB,cAAc,CACdlR,KAAM,SACPM,MAAK,SAAUrL,GACdkc,KAAUC,OAAOnc,EAAS,mBAE9BqB,KAAKwK,SAAS,CACV9B,QAAQ,GAAD,OnCjMN,oCmCuMfjB,KAAKzH,OACTyH,KAAKzH,W,GA3PqCgL,aCuMzC,O,+GA5MY+P,GAOnB,OAJIA,EADgB,MAAhBA,EACe,KAEAA,EAAaA,aAEzB/W,IAAMsE,IAAN,UAAa7E,EAAb,oDAAgEsX,GAAgB,M,4CAIrEA,GAOlB,OAJIA,EADgB,MAAhBA,EACe,KAEAA,EAAaA,aAEzB/W,IAAMsE,IAAN,UAAa7E,EAAb,mDAA+DsX,GAAgB,M,6CAInEA,GAOnB,OAJIA,EADgB,MAAhBA,EACe,KAEAA,EAAaA,aAEzB/W,IAAMsE,IAAN,UAAa7E,EAAb,oDAAgEsX,GAAgB,M,yCAIxEA,GAOf,OAJIA,EADgB,MAAhBA,EACe,KAEAA,EAAaA,aAEzB/W,IAAMsE,IAAN,UAAa7E,EAAb,gDAA4DsX,GAAgB,M,wCAKnF,OAAO/W,IAAMsE,IAAN,UAAa7E,EAAb,+BAAmD,M,iDAInCsX,GAOvB,OAJIA,EADgB,MAAhBA,EACe,KAEAA,EAAaA,aAEzB/W,IAAMsE,IAAN,UAAa7E,EAAb,wDAAoEsX,GAAgB,M,+CAItEA,GAOrB,OAJIA,EADgB,MAAhBA,EACe,KAEAA,EAAaA,aAEzB/W,IAAMsE,IAAN,UAAa7E,EAAb,sDAAkEsX,GAAgB,M,2CAIxEA,GAOjB,OAJIA,EADgB,MAAhBA,EACe,KAEAA,EAAaA,aAEzB/W,IAAMsE,IAAN,UAAa7E,EAAb,kDAA8DsX,GAAgB,M,kDAI7DA,GAOxB,OAJIA,EADgB,MAAhBA,EACe,KAEAA,EAAaA,aAEzB/W,IAAMsE,IAAN,UAAa7E,EAAb,yDAAqEsX,GAAgB,M,qDAGjEA,GAO3B,OAJIA,EADgB,MAAhBA,EACe,KAEAA,EAAaA,aAEzB/W,IAAMsE,IAAN,UAAa7E,EAAb,4DAAwEsX,GAAgB,M,4CAI7EA,GAOlB,OAJIA,EADgB,MAAhBA,EACe,KAEAA,EAAaA,aAEzB/W,IAAMsE,IAAN,UAAa7E,EAAb,mDAA+DsX,GAAgB,M,oDAI5DA,GAO1B,OAJIA,EADgB,MAAhBA,EACe,KAEAA,EAAaA,aAEzB/W,IAAMsE,IAAN,UAAa7E,EAAb,2DAAuEsX,GAAgB,M,+CAIzEA,GAOrB,OAJIA,EADgB,MAAhBA,EACe,KAEAA,EAAaA,aAEzB/W,IAAMsE,IAAN,UAAa7E,EAAb,sDAAkEsX,GAAgB,M,mDAIhEA,GAOzB,OAJIA,EADgB,MAAhBA,EACe,KAEAA,EAAaA,aAEzB/W,IAAMsE,IAAN,UAAa7E,EAAb,0DAAsEsX,GAAgB,M,mDAIpEA,GAOzB,OAJIA,EADgB,MAAhBA,EACe,KAEAA,EAAaA,aAEzB/W,IAAMsE,IAAN,UAAa7E,EAAb,0DAAsEsX,GAAgB,M,0DAI7DA,GAOhC,OAJIA,EADgB,MAAhBA,EACe,KAEAA,EAAaA,aAEzB/W,IAAMsE,IAAN,UAAa7E,EAAb,iEAA6EsX,GAAgB,M,iDAI7EA,GAOvB,OAJIA,EADgB,MAAhBA,EACe,KAEAA,EAAaA,aAEzB/W,IAAMsE,IAAN,UAAa7E,EAAb,wDAAoEsX,GAAgB,M,kDAInEA,GAOxB,OAJIA,EADgB,MAAhBA,EACe,KAEAA,EAAaA,aAEzB/W,IAAMsE,IAAN,UAAa7E,EAAb,yDAAqEsX,GAAgB,M,iDAIrEA,GAOvB,OAJIA,EADgB,MAAhBA,EACe,KAEAA,EAAaA,aAEzB/W,IAAMsE,IAAN,UAAa7E,EAAb,wDAAoEsX,GAAgB,Q,MCnM9EC,G,YAEjB,WAAYxS,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTwS,aAAc,GACdC,cAAe,EACfC,iBAAkB,GAEtB,EAAKC,YAAc,EAAKA,YAAY3T,KAAjB,gBACnB,EAAK4T,aAAe,EAAKA,aAAa5T,KAAlB,gBARL,E,iFAYfzH,KAAKob,gB,+BAIL,OACI,oCACKpb,KAAKyI,MAAMC,QACZ,yBAAK8E,MAAM,uBACP,yBAAKA,MAAM,qCACP,wBAAIA,MAAM,erCrBE,qBqCuBhB,yBAAKA,MAAM,cACP,yBAAKA,MAAM,YACP,yBAAKA,MAAM,YACP,yBAAKA,MAAM,oCAAoC0C,KAAK,cAAcoL,gBAAetb,KAAKyI,MAAM0S,iBAAkBI,gBAAc,IAAIC,gBAAc,MAAMpN,MAAO,CAAE,MAAQ,GAAR,OAAYpO,KAAKyI,MAAM0S,iBAAvB,OACxJnb,KAAKyI,MAAM0S,iBADhB,MrCkGZ,SqClGY,IAC8Cnb,KAAKyI,MAAMyS,cADzD,IrCmGhB,KqCnGgB,IAC8Elb,KAAKyI,MAAMwS,aADzF,IrCoGX,UqCpGW,SAOhB,yBAAK1R,GAAG,iBAAiB6E,MAAO,CAAE,QAAW,SACzC,4BAAQ+I,IAAI,SAASvN,QAAS5J,KAAKqb,aAAchS,UAAU,6BrC6FxD,a,oCqCtFf,GAAI9D,UAAUC,OAAQ,CAClB,IAAIkS,EAEA5Q,EAAcC,UAAUC,KAAK,OAAQ,GACzCF,EAAYG,gBAAkB,SAAU1G,GACpC,IAAImX,EAAMnX,EAAE2G,OAAOC,OACduQ,EAAItQ,iBAAiBC,SAAS,gBACrBqQ,EAAIpQ,kBAAkB,cAAe,CAAEC,QAAS,KAAMC,eAAe,IAE9EkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,KAAMC,eAAe,IAE/EkQ,EAAItQ,iBAAiBC,SAAS,aACrBqQ,EAAIpQ,kBAAkB,WAAY,CAAEC,QAAS,aAAcC,eAAe,IAEnFkQ,EAAItQ,iBAAiBC,SAAS,YACrBqQ,EAAIpQ,kBAAkB,UAAW,CAAEC,QAAS,YAAaC,eAAe,IAEjFkQ,EAAItQ,iBAAiBC,SAAS,aACrBqQ,EAAIpQ,kBAAkB,WAAY,CAAEC,QAAS,aAAcC,eAAe,IAEnFkQ,EAAItQ,iBAAiBC,SAAS,SACrBqQ,EAAIpQ,kBAAkB,OAAQ,CAAEC,QAAS,SAAUC,eAAe,IAE3EkQ,EAAItQ,iBAAiBC,SAAS,aACrBqQ,EAAIpQ,kBAAkB,WAAY,CAAEC,QAAS,aAAcC,eAAe,IAEnFkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,iBAAkBC,eAAe,IAE3FkQ,EAAItQ,iBAAiBC,SAAS,eACrBqQ,EAAIpQ,kBAAkB,aAAc,CAAEC,QAAS,eAAgBC,eAAe,IAEvFkQ,EAAItQ,iBAAiBC,SAAS,WACrBqQ,EAAIpQ,kBAAkB,SAAU,CAAEC,QAAS,WAAYC,eAAe,IAE/EkQ,EAAItQ,iBAAiBC,SAAS,kBACrBqQ,EAAIpQ,kBAAkB,gBAAiB,CAAEC,QAAS,kBAAmBC,eAAe,IAE7FkQ,EAAItQ,iBAAiBC,SAAS,qBACrBqQ,EAAIpQ,kBAAkB,mBAAoB,CAAEC,QAAS,qBAAsBC,eAAe,IAEnGkQ,EAAItQ,iBAAiBC,SAAS,YACrBqQ,EAAIpQ,kBAAkB,UAAW,CAAEC,QAAS,YAAaC,eAAe,IAEjFkQ,EAAItQ,iBAAiBC,SAAS,oBACrBqQ,EAAIpQ,kBAAkB,kBAAmB,CAAEC,QAAS,oBAAqBC,eAAe,IAEjGkQ,EAAItQ,iBAAiBC,SAAS,eACrBqQ,EAAIpQ,kBAAkB,aAAc,CAAEC,QAAS,eAAgBC,eAAe,IAEvFkQ,EAAItQ,iBAAiBC,SAAS,mBACrBqQ,EAAIpQ,kBAAkB,iBAAkB,CAAEC,QAAS,mBAAoBC,eAAe,IAE/FkQ,EAAItQ,iBAAiBC,SAAS,mBACrBqQ,EAAIpQ,kBAAkB,iBAAkB,CAAEC,QAAS,mBAAoBC,eAAe,IAE/FkQ,EAAItQ,iBAAiBC,SAAS,0BACrBqQ,EAAIpQ,kBAAkB,wBAAyB,CAAEC,QAAS,0BAA2BC,eAAe,IAE7GkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,iBAAkBC,eAAe,IAE3FkQ,EAAItQ,iBAAiBC,SAAS,kBACrBqQ,EAAIpQ,kBAAkB,gBAAiB,CAAEC,QAAS,kBAAmBC,eAAe,IAE7FkQ,EAAItQ,iBAAiBC,SAAS,iBACrBqQ,EAAIpQ,kBAAkB,eAAgB,CAAEC,QAAS,iBAAkBC,eAAe,KAGpGV,EAAYY,UAAY,SAAUnH,GAE9B,IACIkb,GAFJ/D,EAAMnX,EAAE2G,OAAOC,QACOQ,YAAY,CAAC,gBAAiB,aACVC,YAAY,gBAClD8T,EAAoBjN,IAAO3I,KAAK6V,OAAOC,UAAU,SAASlN,OAAO,oBACjEmN,EAAsBJ,EAAwBnT,IAAI,GACtDuT,EAAoBnU,UAAY,SAAUjF,GAAQ,IAAD,OACzCsY,EAAec,EAAoB1U,YACnByR,GAAhBmC,IACAA,EAAe,MAEnB7W,EAAsBiG,yBAGtB2R,GAAkBC,sBAAsBhB,GACnC/Q,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhB2c,EADqBtE,EAAI/P,YAAY,CAAC,WAAY,aACVC,YAAY,WAC/CxD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7B4X,EAAmB5Q,IAAID,EAAK/G,IAEhC,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAG9Fa,GAAkBK,uBAAuBpB,GACpC/Q,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhB+c,EADsB1E,EAAI/P,YAAY,CAAC,YAAa,aACVC,YAAY,YACjDxD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7BgY,EAAoBhR,IAAID,EAAK/G,IAEjC,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAG9Fa,GAAkBO,mBAAmBtB,GAChC/Q,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhBid,EADkB5E,EAAI/P,YAAY,CAAC,QAAS,aACVC,YAAY,QACzCxD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7BkY,EAAgBlR,IAAID,EAAK/G,IAE7B,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAG9Fa,GAAkBS,kBACbvS,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhBmd,EADsB9E,EAAI/P,YAAY,CAAC,YAAa,aACVC,YAAY,YACjDxD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7BoY,EAAoBpR,IAAID,EAAK/G,IAEjC,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAG9Fa,GAAkBW,2BAA2B1B,GACxC/Q,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhBqd,EAD0BhF,EAAI/P,YAAY,CAAC,gBAAiB,aACVC,YAAY,gBACzDxD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7BsY,EAAwBtR,IAAID,EAAK/G,IAErC,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAG9Fa,GAAkBa,yBAAyB5B,GACtC/Q,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhBud,EADwBlF,EAAI/P,YAAY,CAAC,cAAe,aACVC,YAAY,cACrDxD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7BwY,EAAsBxR,IAAID,EAAK/G,IAEnC,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAG9Fa,GAAkBe,qBAAqB9B,GAClC/Q,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhByd,EADoBpF,EAAI/P,YAAY,CAAC,UAAW,aACVC,YAAY,UAC7CxD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7B0Y,EAAkB1R,IAAID,EAAK/G,IAE/B,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAG9Fa,GAAkBiB,4BAA4BhC,GACzC/Q,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhB2d,EAD2BtF,EAAI/P,YAAY,CAAC,iBAAkB,aACVC,YAAY,iBAC3DxD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7B4Y,EAAyB5R,IAAID,EAAK/G,IAEtC,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAG9Fa,GAAkBmB,+BAA+BlC,GAC5C/Q,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhB6d,EAD8BxF,EAAI/P,YAAY,CAAC,oBAAqB,aACVC,YAAY,oBACjExD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7B8Y,EAA4B9R,IAAID,EAAK/G,IAEzC,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAG9Fa,GAAkBqB,sBAAsBpC,GACnC/Q,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhB+d,EADqB1F,EAAI/P,YAAY,CAAC,WAAY,aACVC,YAAY,WAC/CxD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7BgZ,EAAmBhS,IAAID,EAAK/G,IAEhC,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAG9Fa,GAAkBuB,8BAA8BtC,GAC3C/Q,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhBie,EAD6B5F,EAAI/P,YAAY,CAAC,mBAAoB,aACVC,YAAY,mBAC/DxD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7BkZ,EAA2BlS,IAAID,EAAK/G,IAExC,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAI9Fa,GAAkByB,yBAAyBxC,GACtC/Q,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhBme,EADwB9F,EAAI/P,YAAY,CAAC,cAAe,aACVC,YAAY,cACrDxD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7BoZ,EAAsBpS,IAAID,EAAK/G,IAEnC,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAI9Fa,GAAkB2B,6BAA6B1C,GAC1C/Q,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhBqe,EAD4BhG,EAAI/P,YAAY,CAAC,kBAAmB,aACVC,YAAY,kBAC7DxD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7BsZ,EAA0BtS,IAAID,EAAK/G,IAEvC,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAI9Fa,GAAkB6B,6BAA6B5C,GAC1C/Q,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhBue,EAD4BlG,EAAI/P,YAAY,CAAC,kBAAmB,aACVC,YAAY,kBAC7DxD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7BwZ,EAA0BxS,IAAID,EAAK/G,IAEvC,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAI9Fa,GAAkB+B,oCAAoC9C,GACjD/Q,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhBye,EADmCpG,EAAI/P,YAAY,CAAC,yBAA0B,aACVC,YAAY,yBAC3ExD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7B0Z,EAAiC1S,IAAID,EAAK/G,IAE9C,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAI9Fa,GAAkBiC,4BAA4BhD,GACzC/Q,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhB2e,EAD2BtG,EAAI/P,YAAY,CAAC,iBAAkB,aACVC,YAAY,iBAC3DxD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7B4Z,EAAyB5S,IAAID,EAAK/G,IAEtC,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAI9Fa,GAAkBmC,2BAA2BlD,GACxC/Q,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhB6e,EAD0BxG,EAAI/P,YAAY,CAAC,gBAAiB,aACVC,YAAY,gBACzDxD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7B8Z,EAAwB9S,IAAID,EAAK/G,IAErC,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAI9Fa,GAAkBqC,2BAA2BpD,GACxC/Q,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhB+e,EAD0B1G,EAAI/P,YAAY,CAAC,gBAAiB,aACVC,YAAY,gBACzDxD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7Bga,EAAwBhT,IAAID,EAAK/G,IAErC,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAG9Fa,GAAkBuC,uBAAuBtD,GACpC/Q,MAAK,SAAAC,GAIF,IAHA,IAAIkB,EAAOlB,EAAS5K,KAEhBif,EADsB5G,EAAI/P,YAAY,CAAC,YAAa,aACVC,YAAY,YACjDxD,EAAI,EAAGA,EAAI+G,EAAKzM,OAAQ0F,IAC7Bka,EAAoBlT,IAAID,EAAK/G,IASjC,GALA,EAAKoG,SAAS,CACV0Q,cAAe,EAAKzS,MAAMyS,cAAgB,EAC1CC,iBAAkBc,KAAKC,OAAQ,EAAKzT,MAAMyS,cAAgB,GAAK,EAAKzS,MAAMwS,aAAgB,OAG1F,EAAKxS,MAAMyS,gBAAkB,EAAKzS,MAAMwS,aAAc,CACtD,IACIQ,EADc/D,EAAI/P,YAAY,CAAC,gBAAiB,aACVC,YAAY,gBAClD2W,EAA0B,CAC1BxD,aAAcW,EACdnS,GAAI,GAEiBkS,EAAwBrQ,IAAImT,GAClC7W,UAAY,SAAUjF,GACrClE,IAAE,mBAAmB0C,OACrBjB,KAAKwK,SAAS,CACV9B,QAAQ,GAAD,OrCxQ9J,uCqC0QiJjB,KAAK,QAEP,EAAK+C,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,QAIvBnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,WAK/BnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,WAI/BnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,WAI/BnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,WAI/BnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,WAI/BnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,WAI/BnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,WAI/BnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,WAI/BnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,WAI/BnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,WAI/BnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,WAI/BnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,WAI/BnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,WAI/BnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,WAI/BnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,WAI/BnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,WAI/BnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,WAI/BnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,WAI/BnB,OACG,SAAAnB,GACI5K,IAAE,mBAAmBY,OACrB,EAAKqL,SAAS,CACV9B,QAAQ,GAAD,OAAK+C,SAG9BhE,KAAKzH,OACTyH,KAAKzH,WAEPkI,MAAM,GAAD,OAAIwD,M,qCAKb1L,KAAKob,kB,GAnjBwCpQ,aCctC,O,kGAhBDG,GAEN,OADArH,QAAQC,IAAIoH,GACLnH,IAAMoH,IAAN,UAAa3H,EAAb,mBAAuC0H,EAAM,M,sCAKpD,OAAOnH,IAAMsE,IAAN,UAAa7E,EAAb,uBAA2C,M,iCAG3C0H,GACP,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,oBAAwC0H,EAAM,Q,MCLxCqT,G,YAEjB,WAAYhW,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTgW,UAAW,GACX3S,OAAQ,GACR4S,OAAQ,CACJ3R,MAAO,GAGP4R,aAAc,IAIlBC,aAAa,GACblW,QAAS,IAEb,EAAKuD,cAAgB,EAAKA,cAAcxE,KAAnB,gBACrB,EAAKyE,cAAgB,EAAKA,cAAczE,KAAnB,gBACrB,EAAKwH,WAAa,EAAKA,WAAWxH,KAAhB,gBAClB,EAAKoX,wBAA0B,EAAKA,wBAAwBpX,KAA7B,gBAnBhB,E,wEAqBRhF,GAAQ,IAAD,OACRic,EAAW1e,KAAKyI,MAAhBiW,OACoB,0BAAtBjc,EAAMyE,OAAOoC,KACboV,EAAO3R,MAAME,SAAWxK,EAAMyE,OAAO7D,MACR,uCAAtBZ,EAAMyE,OAAOoC,OACpBoV,EAAOC,aAAaG,eAAiBrc,EAAMyE,OAAO7D,OAEtDrD,KAAKwK,SAAS,CACVkU,WACD,WAEC5a,QAAQC,IAAI,wBAAyB,EAAK0E,MAAMiW,a,0CAKnC,IAAD,OAChB5a,QAAQC,IAAI,WAAaG,EAAsBiI,sBAC1CjI,EAAsBiI,uBACvBjE,MAAM,uEACNlI,KAAKwI,MAAM4B,QAAQC,KAAnB,MAEJnG,EAAsBiG,yBACtB6K,GAAe+J,sBACV/U,MAAK,SAAAC,GACFnG,QAAQC,IAAI,kBAAmBkG,EAAS5K,MACxC,EAAKmL,SAAS,CACViU,UAAWxU,EAAS5K,UAEzBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAMrDwC,EAAYkB,eACPpC,MAAK,SAAAC,GACFnG,QAAQC,IAAI,gBAAiBkG,EAAS5K,MACtC,EAAKmL,SAAS,CACVsB,OAAQ7B,EAAS5K,UAEtBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAOrDnK,IAAE,eAAesK,SAAS,CACtBC,OAAQ,GACRC,MAAO,CACH,wBAAyB,CACrBE,UAAU,GAEd,qCAAsC,CAClCA,UAAU,GAEd,uBAAwB,CACpBA,UAAU,IAGlBC,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,+BAMpB,IAAD,OACGsb,EAAiB5e,KAAKyI,MAAtBmW,aACA9S,EAAW9L,KAAKyI,MAAhBqD,OAEJa,EAAYb,EAAOpN,OAAS,GACzBoN,EAAOc,KAAI,SAACC,EAAMzI,GACjB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKC,SACtB,WACE,OAAQ,EAAKrE,MAAMpD,YACf,KAAK,EAAG,OAAgC,OAAxBwH,EAAKE,MAAMC,UAA6C,KAAxBH,EAAKE,MAAMC,SAAkBH,EAAKE,MAAMC,SAAWH,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMG,UAA6C,KAAxBL,EAAKE,MAAMG,SAAkBL,EAAKE,MAAMG,SAAWL,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMI,UAA6C,KAAxBN,EAAKE,MAAMI,SAAkBN,EAAKE,MAAMI,SAAWN,EAAKE,MAAME,SAC9G,QAAS,OAAOJ,EAAKE,MAAME,UALjC,MAUXjN,MAEHsV,EAAcsJ,EAAalgB,OAAS,GACjCkgB,EAAahS,KAAI,SAACC,EAAMzI,GACvB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKiS,gBACvBjS,EAAK6I,QAAQ3I,MAAME,YAG7BjN,MACP,OACI,yBAAKwN,MAAM,8DACP,yBAAKA,MAAM,gBACP,wBAAIA,MAAM,cACN,4BAAI,uBAAG7D,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,KAAR,WACJ,4BAAI,uBAAGA,KAAK,KAAR,gBAER,yBAAK6D,MAAM,qBACP,6BAAK,4BAAKxN,KAAKyI,MAAMC,UACrB,yBAAK8E,MAAM,OACP,yBAAKA,MAAM,aAEP,0BAAMlE,KAAK,aAAaC,GAAG,aAAaiE,MAAM,mBAC1C,yBAAKA,MAAM,uBACP,yBAAKA,MAAM,iBACP,wBAAIA,MAAM,evCjKtB,mBuCmKQ,yBAAKA,MAAM,cACP,yBAAKA,MAAM,cACP,2BAAOA,MAAM,wCAAwCwR,GACrD,yBAAKxR,MAAM,sBACP,4BAAQjE,GAAG,uBAAuBiE,MAAM,sBAAsBoD,mBAAiB,OAAOtH,KAAK,uBAAuB+F,UAAUrP,KAAKiP,WAAYjP,KAAK6e,0BAC9I,4BAAQxb,MAAM,IAAd,sBACCsJ,KAKb,yBAAKa,MAAM,cACP,2BAAOA,MAAM,wCvChKtC,WuCiKyB,yBAAKA,MAAM,sBACP,4BAAQjE,GAAG,qCAAqCiE,MAAM,sBAAsBoD,mBAAiB,OAAOtH,KAAK,qCAAqC+F,SAAUrP,KAAKiP,YACzJ,4BAAQ5L,MAAM,IAAd,sBACCiS,KAKb,yBAAK9H,MAAM,cACP,2BAAOA,MAAM,wCvCnJ9B,wBuCoJiB,yBAAKA,MAAM,sBACP,2BAAO9D,KAAK,OAAOH,GAAG,wBAAwBiE,MAAM,eAAelE,KAAK,wBAAwB+F,SAAUrP,KAAKiP,gBAI3H,yBAAKzB,MAAM,gBACP,yBAAKA,MAAM,cACP,4BAAQ9D,KAAK,SAASL,UAAU,kBAAkBO,QAAS5J,KAAKiM,evCzKtF,UuC0KsB,4BAAQvC,KAAK,SAASL,UAAU,iBAAiBO,QAAS5J,KAAKkM,evCzKrF,UuCyKgI,6BAAS,wC,8CAYvIzJ,GACpBqB,QAAQC,IAAI,cAAgBtB,EAAMyE,OAAO7D,OACzCS,QAAQC,IAAI/D,KAAKyI,MAAMgW,WACvB,IAAI3R,EAAUrK,EAAMyE,OAAO7D,MACrBub,EAAe5e,KAAKyI,MAAMgW,UAAUQ,QAAO,SAAAC,GAAC,OAAIA,EAAEtR,MAAMd,SAAWA,KACzEhJ,QAAQC,IAAI,kBAAmB6a,GAE/B5e,KAAKwK,SAAS,CACVoU,aAAaA,M,sCAGJ,IAAD,OACZ9a,QAAQC,IAAIxF,IAAE,eAAesL,OACzBtE,UAAUC,QACV1B,QAAQC,IAAI,WAAaG,EAAsBiI,sBAC3CjI,EAAsBiI,sBACtBrI,QAAQC,IAAI,WAAa/D,KAAKyI,MAAMiW,QAChCngB,IAAE,eAAeuL,UAWjBhG,QAAQC,IAAI/D,KAAKyI,MAAMiW,QACvBS,GAAcC,UAAUpf,KAAKyI,MAAMiW,QAC9B1U,MAAK,SAAAC,GACF,EAAKzB,MAAM4B,QAAQC,KAAnB,sBAAuCJ,EAAS5K,KAAKqJ,aAExD4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,gBAQzDR,MAAM,wEAGVA,MAAM,yB,sCAIVlI,KAAKwI,MAAM4B,QAAQC,KAAK,mC,GAnQgBW,aCA3BqU,G,YAEjB,WAAY7W,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTgW,UAAW,GACX3S,OAAQ,GACR4S,OAAQ,EAAKlW,MAAMqG,SAASpG,MAAMiW,OAClChW,QAAS,IAEb,EAAKsG,cAAgB,EAAKA,cAAcvH,KAAnB,gBACrB,EAAKyE,cAAgB,EAAKA,cAAczE,KAAnB,gBACrB,EAAKwH,WAAa,EAAKA,WAAWxH,KAAhB,gBAClB,EAAKoX,wBAA0B,EAAKA,wBAAwBpX,KAA7B,gBAC/B,EAAK6X,mBAAqB,EAAKA,mBAAmB7X,KAAxB,gBAZX,E,gFAeAhF,GACfzC,KAAKiP,WAAWxM,GAChBzC,KAAK6e,wBAAwBpc,EAAMyE,OAAO7D,S,iCAEnCZ,GAAQ,IAAD,OACRic,EAAW1e,KAAKyI,MAAhBiW,OACoB,0BAAtBjc,EAAMyE,OAAOoC,KACboV,EAAO3R,MAAME,SAAWxK,EAAMyE,OAAO7D,MACR,uCAAtBZ,EAAMyE,OAAOoC,KACpBoV,EAAOC,aAAaG,eAAiBrc,EAAMyE,OAAO7D,MAEvB,sCAAtBZ,EAAMyE,OAAOoC,KAClBoV,EAAOC,aAAa/Q,MAAMd,QAAUrK,EAAMyE,OAAO7D,MAEtB,kBAAtBZ,EAAMyE,OAAOoC,OAClBoV,EAAO9P,OAA6B,mBAApBnM,EAAMyE,OAAOqC,IAEjCvJ,KAAKwK,SAAS,CACVkU,WACD,WAEC5a,QAAQC,IAAI,wBAAyB,EAAK0E,MAAMiW,a,0CAKnC,IAAD,OACXxa,EAAsBiI,uBACvBjE,MAAM,uEACNlI,KAAKwI,MAAM4B,QAAQC,KAAnB,MAEJnG,EAAsBiG,yBACtB6K,GAAe+J,sBACV/U,MAAK,SAAAC,GACFnG,QAAQC,IAAI,kBAAmBkG,EAAS5K,MACxC,EAAKmL,SAAS,CACViU,UAAWxU,EAAS5K,UAEzBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAMrDwC,EAAYkB,eACPpC,MAAK,SAAAC,GACFnG,QAAQC,IAAI,gBAAiBkG,EAAS5K,MACtC,EAAKmL,SAAS,CACVsB,OAAQ7B,EAAS5K,UAEtBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAOrDnK,IAAE,eAAesK,SAAS,CACtBC,OAAQ,GACRC,MAAO,CACH,wBAAyB,CACrBE,UAAU,GAEd,qCAAsC,CAClCA,UAAU,GAEd,oCAAqC,CACjCA,UAAU,IAGlBC,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,+BAMpB,IAAD,OACGmb,EAAcze,KAAKyI,MAAnBgW,UACA3S,EAAW9L,KAAKyI,MAAhBqD,OAEJa,EAAYb,EAAOpN,OAAS,GACzBoN,EAAOc,KAAI,SAACC,EAAMzI,GACjB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKC,SACtB,WACE,OAAQ,EAAKrE,MAAMpD,YACf,KAAK,EAAG,OAAgC,OAAxBwH,EAAKE,MAAMC,UAA6C,KAAxBH,EAAKE,MAAMC,SAAkBH,EAAKE,MAAMC,SAAWH,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMG,UAA6C,KAAxBL,EAAKE,MAAMG,SAAkBL,EAAKE,MAAMG,SAAWL,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMI,UAA6C,KAAxBN,EAAKE,MAAMI,SAAkBN,EAAKE,MAAMI,SAAWN,EAAKE,MAAME,SAC9G,QAAS,OAAOJ,EAAKE,MAAME,UALjC,MAUXjN,MAEHsV,EAAcmJ,EAAU/f,OAAS,GAC9B+f,EAAU7R,KAAI,SAACC,EAAMzI,GACpB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKiS,gBACvBjS,EAAK6I,QAAQ3I,MAAME,YAG7BjN,MACP,OACI,yBAAKwN,MAAM,8DACP,yBAAKA,MAAM,gBACP,wBAAIA,MAAM,cACN,4BAAI,uBAAG7D,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,KAAR,WACJ,4BAAI,uBAAGA,KAAK,KAAR,mBAER,yBAAK6D,MAAM,qBACP,6BAAK,4BAAKxN,KAAKyI,MAAMC,UACrB,yBAAK8E,MAAM,OACP,yBAAKA,MAAM,aAEP,0BAAMlE,KAAK,aAAaC,GAAG,aAAaiE,MAAM,mBAC1C,yBAAKA,MAAM,uBACP,yBAAKA,MAAM,iBACP,wBAAIA,MAAM,exClKrB,kBwCoKO,yBAAKA,MAAM,cACP,yBAAKA,MAAM,cACP,2BAAOA,MAAM,wCAAwCwR,GACrD,yBAAKxR,MAAM,sBACP,4BAAQjE,GAAG,oCAAoCiE,MAAM,sBAAsBoD,mBAAiB,OAAOtH,KAAK,oCAAoC+F,SAAUrP,KAAKsf,mBAAoBjc,MAAOrD,KAAKyI,MAAMiW,OAAOC,aAAa/Q,MAAMd,SACvN,4BAAQzJ,MAAM,IAAd,sBACCsJ,KAKb,yBAAKa,MAAM,cACP,2BAAOA,MAAM,wCxCnKtC,WwCoKyB,yBAAKA,MAAM,sBACP,4BAAQjE,GAAG,qCAAqCiE,MAAM,sBAAsBoD,mBAAiB,OAAOtH,KAAK,qCAAqC+F,SAAUrP,KAAKiP,WAAY5L,MAAOrD,KAAKyI,MAAMiW,OAAOC,aAAaG,gBAC3M,4BAAQzb,MAAM,IAAd,sBACCiS,KAKb,yBAAK9H,MAAM,cACP,2BAAOA,MAAM,wCxCtJ9B,wBwCuJiB,yBAAKA,MAAM,sBACP,2BAAO9D,KAAK,OAAOH,GAAG,wBAAwBiE,MAAM,eAAelE,KAAK,wBAAwB+F,SAAUrP,KAAKiP,WAAY5L,MAAOrD,KAAKyI,MAAMiW,OAAO3R,MAAME,aAGlK,yBAAK5D,UAAU,cACX,2BAAOmE,MAAM,wCAAwCwR,GACrD,yBAAKxR,MAAM,sBACP,2BAAO9D,KAAK,QAAQH,GAAG,iBAAiBD,KAAK,gBAAgBjG,OAAO,EAAMiM,SAAsC,IAA7BtP,KAAKyI,MAAMiW,OAAO9P,OAAiBS,SAAUrP,KAAKiP,aADzI,UAEI,2BAAOvF,KAAK,QAAQH,GAAG,iBAAiBD,KAAK,gBAAgBjG,OAAO,EAAOiM,SAAsC,IAA7BtP,KAAKyI,MAAMiW,OAAO9P,OAAkBS,SAAUrP,KAAKiP,aAF3I,eAMR,yBAAKzB,MAAM,gBACP,yBAAKA,MAAM,cACP,4BAAQ9D,KAAK,SAASL,UAAU,kBAAkBO,QAAS5J,KAAKgP,exCjLtF,UwCkLsB,4BAAQtF,KAAK,SAASL,UAAU,iBAAiBO,QAAS5J,KAAKkM,exCnLrF,UwCmLgI,6BAAS,wC,8CAYvIY,GAAU,IAAD,OAC7BkI,GAAeuK,6BAAyC,KAAZzS,EAAiBA,EAAU,GAClE9C,MAAK,SAAAC,GACF,EAAKO,SAAS,CACViU,UAAWxU,EAAS5K,UAEzBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,gB,sCAQxC,IAAD,OACZ5E,QAAQC,IAAIxF,IAAE,eAAesL,OACzBtE,UAAUC,QACV1B,QAAQC,IAAI,WAAaG,EAAsBiI,sBAC3CjI,EAAsBiI,sBACtBrI,QAAQC,IAAI,WAAa/D,KAAKyI,MAAMiW,QAChCngB,IAAE,eAAeuL,UACjBhG,QAAQC,IAAI/D,KAAKyI,MAAMiW,QACvBS,GAAcK,WAAWxf,KAAKyI,MAAMiW,QAC/B1U,MAAK,SAAAC,GACF,EAAKzB,MAAM4B,QAAQC,KAAnB,sBAAuCJ,EAAS5K,KAAKqJ,aAExD4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,gBAQzDR,MAAM,wEAGVA,MAAM,yB,sCAIVlI,KAAKwI,MAAM4B,QAAQC,KAAK,mC,GAhRiBW,aCJ5ByU,G,YAEjB,WAAYjX,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTiX,QAAS,GACThX,QAAS,IAEb,EAAK8W,WAAa,EAAKA,WAAW/X,KAAhB,gBAClB,EAAK2X,UAAY,EAAKA,UAAU3X,KAAf,gBAPF,E,iFAUE,IAAD,OACXvD,EAAsBiI,uBACvBjE,MAAM,uEACNlI,KAAKwI,MAAM4B,QAAQC,KAAnB,MAEJnG,EAAsBiG,yBACtBgV,GAAcQ,gBACT3V,MAAK,SAAAC,GACFnG,QAAQC,IAAI,cAAgBkG,EAAS5K,MACrC,EAAKmL,SAAS,CACVkV,QAASzV,EAAS5K,UAEvBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,gB,+BAQjC,IAAD,OACL,OACI,yBAAKW,UAAU,cACX,2BAAIrJ,KAAKwI,MAAMgB,MAAMC,OAAOf,SAC5B,4BAAK1I,KAAKyI,MAAMC,SAChB,6BzC/CiB,eyCgDjB,4BAAQW,UAAU,cAAcK,KAAK,SAAS0E,MAAO,CAAEC,WAAY,UAAYzE,QAAS5J,KAAKof,WzCjD7E,kByCiD0H,6BAAM,6BAChJ,2BAAO9Q,OAAO,IAAIC,MAAM,UACpB,+BACI,4BACI,sCACA,uCACA,qCACA,wCAGR,+BAEQvO,KAAKyI,MAAMiX,QAAQ9S,KAAI,SAAA8R,GAAM,OACzB,wBAAI1b,IAAK0b,EAAOkB,SAAUhW,QAAS,kBAAM,EAAK4V,WAAWd,KACrD,4BAAKA,EAAO3R,MAAME,UAClB,4BAAKyR,EAAOC,aAAajJ,QAAQ3I,MAAME,UACvC,4BAAKyR,EAAOC,aAAa/Q,MAAMb,MAAME,UACrC,4BAAkC,SAA7ByR,EAAO9P,OAAOlK,WAAwB,SAAW,kBAK1E,gC,iCAIDga,GACP1e,KAAKwI,MAAM4B,QAAQC,KAAK,CACpBI,SAAU,cACVhC,MAAO,CAAEiW,OAAQA,O,kCAIjBnZ,UAAUC,OACVxF,KAAKwI,MAAM4B,QAAQC,KAAnB,cAEAnC,MAAM,2B,GApF+B8C,aCQlC,O,2GAVP,OAAOhH,IAAMsE,IAAN,UAAa7E,EAAb,0BAA8C,M,mCAI5C0H,GACT,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,sBAA0C0H,EAAM,Q,MCF1C0U,G,YAEjB,WAAYrX,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTsE,MAAO,CACHgG,QAAS,GACT5F,SAAU,GACVH,SAAU,GACVE,SAAU,GACVD,SAAU,KAIlB,EAAKiE,gBAAkB,EAAKA,gBAAgBzJ,KAArB,gBACvB,EAAK0J,WAAa,EAAKA,WAAW1J,KAAhB,gBAClB,EAAK2J,WAAW,EAAKA,WAAW3J,KAAhB,gBAdD,E,iFAmBfvD,EAAsBiG,yBACtBnK,KAAKwK,SAAS,CACVuC,MAAO/M,KAAKwI,MAAMqG,SAASpG,MAAMsE,QAErCxO,IAAE,UAAUsK,SAAS,CACjBC,OAAQ,GACRC,MAAO,CACH,iBAAkB,CACdE,UAAU,EACVmJ,uBAAuB,EACvBxC,UAAW,KAEf,iBAAkB,CAEdwC,uBAAuB,EACvBxC,UAAW,KAEf,iBAAkB,CAEdwC,uBAAuB,EACvBxC,UAAW,KAEf,iBAAkB,CAEdwC,uBAAuB,EACvBxC,UAAW,U,sCAOXnN,GAAQ,IACdsK,EAAU/M,KAAKyI,MAAfsE,MACoB,mBAAtBtK,EAAMyE,OAAOoC,OACbyD,EAAME,SAAWxK,EAAMyE,OAAO7D,OAER,mBAAtBZ,EAAMyE,OAAOoC,OACbyD,EAAMG,SAAWzK,EAAMyE,OAAO7D,OACN,mBAAtBZ,EAAMyE,OAAOoC,KACfyD,EAAMI,SAAW1K,EAAMyE,OAAO7D,MACD,mBAAtBZ,EAAMyE,OAAOoC,OACpByD,EAAMC,SAAWvK,EAAMyE,OAAO7D,OAIlCrD,KAAKwK,SACD,CACIuC,Y,iCAMDuE,GACP,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,K,mCAErC,IAAD,OAELlT,IAAE,UAAUuL,iBACJ9J,KAAKyI,MAAMsE,MAAX,mBACA/M,KAAKyI,MAAMsE,MAAX,iBACR+S,GAAcC,aAAa/f,KAAKyI,MAAMsE,OAAO/C,MAAK,SAAAC,GAC9C,EAAKzB,MAAM4B,QAAQC,KAAnB,qBAAsCJ,EAAS5K,KAAKqJ,aAGnD4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,iB,+BAa3C,OACI,oCACI,yBAAKW,UAAU,qBACX,yBAAKA,UAAU,OACX,6BACI,wBAAIA,UAAU,cACV,4BAAI,uBAAGM,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,gBACJ,wBAAIN,UAAU,UAAd,kBAIR,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,iBACX,wBAAIA,UAAU,eAAd,UAEJ,yBAAKA,UAAU,cACX,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,SAEX,0BAAMA,UAAU,kBAAkBC,KAAK,QAAQC,GAAG,SAc9C,2BAAOG,KAAK,SAASH,GAAG,cAAcD,KAAK,gBAAgBjG,MAAOrD,KAAKyI,MAAMsE,MAAMgG,QAAS1J,UAAU,eAAegG,SAAUrP,KAAKkR,kBAEpI,yBAAK7H,UAAU,cACX,2BAAOA,UAAU,0BAAjB,oBACA,yBAAKA,UAAU,YACX,2BAAOK,KAAK,OAAOH,GAAG,cAAcD,KAAK,iBAAiBjG,MAAOrD,KAAKoR,WAAWpR,KAAKyI,MAAMsE,MAAME,UAAW5D,UAAU,eAAegG,SAAUrP,KAAKkR,kBACrJ,0BAAM7H,UAAU,iBAIxB,yBAAKA,UAAU,cACX,2BAAOA,UAAU,0BAAjB,kBACA,yBAAKA,UAAU,YACX,2BAAOK,KAAK,OAAOH,GAAG,cAAcD,KAAK,iBAAiBjG,MAAOrD,KAAKoR,WAAWpR,KAAKyI,MAAMsE,MAAMG,UAAW7D,UAAU,eAAegG,SAAUrP,KAAKkR,kBACrJ,0BAAM7H,UAAU,iBAGxB,yBAAKA,UAAU,cACX,2BAAOA,UAAU,2BAAjB,oBACA,yBAAKA,UAAU,YACX,2BAAOK,KAAK,OAAOH,GAAG,cAAcD,KAAK,iBAAiBjG,MAAOrD,KAAKoR,WAAWpR,KAAKyI,MAAMsE,MAAMI,UAAW9D,UAAU,eAAegG,SAAUrP,KAAKkR,kBACrJ,0BAAM7H,UAAU,iBAGxB,yBAAKA,UAAU,cACX,2BAAOA,UAAU,2BAAjB,sBACA,yBAAKA,UAAU,YACX,2BAAOK,KAAK,OAAOH,GAAG,cAAcD,KAAK,iBAAiBjG,MAAOrD,KAAKoR,WAAWpR,KAAKyI,MAAMsE,MAAMC,UAAW3D,UAAU,eAAegG,SAAUrP,KAAKkR,kBACrJ,0BAAM7H,UAAU,qBAWxC,yBAAKA,UAAU,gBAEX,kBAAC,SAAD,KACI,4BAAQK,KAAK,SAASL,UAAU,mCAAhC,WAEJ,kBAAC,SAAD,KACI,4BAAQK,KAAK,SAASE,QAAS5J,KAAKmR,WAAY9H,UAAU,8BAA1D,sB,GA/LO2B,aCJ9BgV,G,YAEjB,WAAYxX,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTwX,UAAW,IAEf,EAAKC,UAAU,EAAKA,UAAUzY,KAAf,gBALA,E,iFAOE,IAAD,OAEhBvD,EAAsBiG,yBACtB2V,GAAcK,mBAAmBnW,MAAK,SAAAC,GAElC,EAAKO,SAAS,CACVyV,UAAWhW,EAAS5K,UAGvBiL,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,gB,gCASjCqE,GACN/M,KAAKwI,MAAM4B,QAAQC,KAAK,CACpBI,SAAU,cACVhC,MAAO,CAAEsE,MAAOA,O,+BAId,IAAD,OAEL,OAEI,yBAAK1D,UAAU,qBAGX,yBAAKA,UAAU,OACX,6BACI,wBAAImE,MAAM,cACN,4BAAI,uBAAG7D,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,gBACJ,wBAAI6D,MAAM,UAAV,kBAMR,yBAAKnE,UAAU,4BAEX,yBAAKA,UAAU,QAGX,yBAAKA,UAAU,uBAGX,yBAAKA,UAAU,iBACX,wBAAIA,UAAU,eAAd,eAEJ,yBAAKA,UAAU,cACX,yBAAKA,UAAU,aAIX,yBAAKA,UAAU,oBACX,2BAAOA,UAAU,mBACb,+BACI,4BACI,wCACA,wCACA,wCACA,wCAEA,4CACC,+CAMT,+BAEQrJ,KAAKyI,MAAMwX,UAAUrT,KAAI,SAAAG,GAAK,OAE1B,wBAAI/J,IAAK+J,EAAMgG,QAASnJ,QAAS,kBAAM,EAAKsW,UAAUnT,KAClD,4BAAKA,EAAME,UACX,4BAAKF,EAAMG,UACX,4BAAKH,EAAMC,UACX,4BAAKD,EAAMI,UAGX,4BAAKJ,EAAMqT,aACV,4BAAKrT,EAAMsT,oC,GA1G5BrV,aCiBjC,O,mGAhBAG,GACP,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,qBAAyC0H,EAAM,M,2CAKtD,OAAOnH,IAAMsE,IAAN,UAAa7E,EAAb,sBAA0C,M,qCAItC0H,GACX,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,sBAA0C0H,EAAM,Q,MCR1CmV,G,YAEjB,WAAY9X,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACT8X,SAAU,CACNxT,MAAO,CACHE,SAAU,MAItB,EAAKiE,gBAAkB,EAAKA,gBAAgBzJ,KAArB,gBACvB,EAAK0J,WAAa,EAAKA,WAAW1J,KAAhB,gBAClB,EAAK2J,WAAa,EAAKA,WAAW3J,KAAhB,gBAXH,E,iFAefvD,EAAsBiG,yBACtB5L,IAAE,iBAAiBsK,SAAS,CACxBC,OAAQ,GACRC,MAAO,CACH,iBAAkB,CACdE,UAAU,EACVmJ,uBAAuB,EACvBxC,UAAW,MAGnB1G,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,sCAIdb,GAAQ,IACd8d,EAAavgB,KAAKyI,MAAlB8X,SACoB,mBAAtB9d,EAAMyE,OAAOoC,OAEbiX,EAASxT,MAAME,SAAWxK,EAAMyE,OAAO7D,OAE3CrD,KAAKwK,SACD,CACI+V,e,mCAKE,IAAD,OACLhiB,IAAE,iBAAiBuL,SACnB0W,GAAgBC,WAAWzgB,KAAKyI,MAAM8X,UAAUvW,MAAK,SAAAC,GACjD,EAAKzB,MAAM4B,QAAQC,KAAnB,wBAAyCJ,EAAS5K,KAAKqJ,UACvD5E,QAAQC,IAAI,cAGXuG,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,gB,iCAQlD4I,GACP,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,K,+BAI/C,OACI,oCACI,6CACA,0BAAMnI,KAAK,eAAeC,GAAG,gBACzB,6BACI,8CACA,2BAAOG,KAAK,OAAOJ,KAAK,iBAAiBjG,MAAOrD,KAAKoR,WAAWpR,KAAKyI,MAAM8X,SAASxT,MAAME,UAAWoC,SAAUrP,KAAKkR,mBAExH,6BAAM,6BACN,6BACI,4BAAQxH,KAAK,SAASE,QAAS5J,KAAKmR,Y9C3B/B,iB,G8C1DqBnG,aCF7B0V,G,YAEjB,WAAYlY,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTkY,aAAc,IAElB,EAAKC,eAAiB,EAAKA,eAAenZ,KAApB,gBACtB,EAAKoZ,aAAe,EAAKA,aAAapZ,KAAlB,gBANL,E,iFASE,IAAD,OAChBvD,EAAsBiG,yBACtBqW,GAAgBM,qBAAqB9W,MAAK,SAAAC,GACtCnG,QAAQC,IAAIkG,EAAS5K,MACrB,EAAKmL,SAAS,CACVmW,aAAc1W,EAAS5K,UAG1BiL,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,gB,mCAQ9B6X,GACTvgB,KAAKwI,MAAM4B,QAAQC,KAAK,CACpBI,SAAU,gBACVhC,MAAO,CAAE8X,SAAUA,O,uCAKnBhb,UAAUC,OACVxF,KAAKwI,MAAM4B,QAAQC,KAAnB,gBAEAnC,MAAM,yB,+BAIJ,IAAD,OAEL,OACI,oCACI,2BAAIlI,KAAKwI,MAAMgB,MAAMC,OAAOf,SAC5B,6BACI,4BAAQgB,KAAK,SAAS0E,MAAO,CAAEC,WAAY,UAAYzE,QAAS5J,KAAK4gB,gB/CgExD,qB+ChE4G,6BAAM,8BAGnI,yBAAKvX,UAAU,gBAEX,4B/C0DU,kB+CzDV,2BAAOiF,OAAO,IAAIC,MAAM,UACpB,+BACI,4BACI,4B/CkDC,4B+CjDD,4B/CkDC,2B+CjDD,4B/CkDC,4B+CjDD,4B/CkDC,iC+C5CT,+BAEQvO,KAAKyI,MAAMkY,aAAa/T,KAAI,SAAAmU,GAAS,OAEjC,wBAAI/d,IAAK+d,EAAUC,WAAYpX,QAAS,kBAAM,EAAKiX,aAAaE,KAC5D,4BAAKA,EAAUhU,MAAME,UACrB,4BAAK8T,EAAUhU,MAAMG,UACrB,4BAAK6T,EAAUhU,MAAMI,UACrB,4BAAK4T,EAAUhU,MAAMC,sB,GApFVhC,aCG9BiW,G,YAEjB,WAAYzY,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACT8X,SAAU,CACNS,WAAY,GACZjU,MAAO,CACHgG,QAAS,GACT9F,SAAU,MAItB,EAAKmE,WAAa,EAAKA,WAAW3J,KAAhB,gBAClB,EAAKyJ,gBAAkB,EAAKA,gBAAgBzJ,KAArB,gBACvB,EAAKwK,WAAa,EAAKA,WAAWxK,KAAhB,gBAClB,EAAKyE,cAAgB,EAAKA,cAAczE,KAAnB,gBAdN,E,iFAkBfvD,EAAsBiG,yBACtBrG,QAAQC,IAAI/D,KAAKwI,MAAMqG,SAASpG,MAAM8X,UACtCvgB,KAAKwK,SAAS,CACV+V,SAAUvgB,KAAKwI,MAAMqG,SAASpG,MAAM8X,WAExChiB,IAAE,uBAAuBsK,SAAS,CAC9BC,OAAQ,GACRC,MAAO,CACH,0BAA2B,CACvBE,UAAU,EACVmJ,uBAAuB,EACvBxC,UAAW,MAGnB1G,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,iCAKnBgO,GACP,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,K,sCAEnChP,GAAQ,IACd8d,EAAavgB,KAAKyI,MAAlB8X,SACoB,4BAAtB9d,EAAMyE,OAAOoC,OAEbiX,EAASxT,MAAME,SAAWxK,EAAMyE,OAAO7D,OAE3CrD,KAAKwK,SACD,CACI+V,e,mCAME,IAAD,OACLhiB,IAAE,uBAAuBuL,UAGzBhG,QAAQC,IAAI/D,KAAKyI,OACjB+X,GAAgBU,eAAelhB,KAAKyI,MAAM8X,UAAUvW,MAAK,SAAAC,GACrD,EAAKzB,MAAM4B,QAAQC,KAAnB,wBAAyCJ,EAAS5K,KAAKqJ,UACvD5E,QAAQC,IAAI,cAGXuG,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,iB,sCAU3C1I,KAAKwI,MAAM4B,QAAQC,KAAK,mC,+BAKxB,OACI,oCACI,4BhD6BgB,oBgD5BhB,0BAAMf,KAAK,qBAAqBC,GAAG,sBAC/B,6BACI,+BhDiBS,2BgDjBT,MACA,2BAAOG,KAAK,OAAOJ,KAAK,0BAA0BjG,MAAOrD,KAAKoR,WAAWpR,KAAKyI,MAAM8X,SAASxT,MAAME,UAAWoC,SAAUrP,KAAKkR,mBAEjI,6BAAM,6BAQN,6BACI,4BAAQxH,KAAK,SAASE,QAAS5J,KAAKiS,YhDnD/B,UgDoDL,4BAAQvI,KAAK,SAASE,QAAS5J,KAAKkM,ehDxFlC,UgDwF8E,6BAAS,oC,GA9G5DlB,aCYtC,O,sGAhBGG,GAEV,OADArH,QAAQC,IAAIoH,GACLnH,IAAMC,KAAN,UAAcR,EAAd,oBAAyC0H,EAAM,M,0CAKtD,OAAOnH,IAAMsE,IAAN,UAAa7E,EAAb,oBAAwC,M,qCAGpC0H,GACX,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,oBAAwC0H,EAAM,Q,MCLxCgW,G,YAEjB,WAAY3Y,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTgW,UAAW,GACX3S,OAAQ,GACRsV,WAAY,CACRrU,MAAO,GAGPa,MAAO,GAGPyT,kBAAmB,IAIvBzC,aAAc,GACdlW,QAAS,IAEb,EAAKuD,cAAgB,EAAKA,cAAcxE,KAAnB,gBACrB,EAAKyE,cAAgB,EAAKA,cAAczE,KAAnB,gBACrB,EAAKwH,WAAa,EAAKA,WAAWxH,KAAhB,gBAClB,EAAKoX,wBAA0B,EAAKA,wBAAwBpX,KAA7B,gBAtBhB,E,wEAwBRhF,GAAQ,IAAD,OACR2e,EAAephB,KAAKyI,MAApB2Y,WACNtd,QAAQC,IAAItB,EAAMyE,OAAOoC,MACzBxF,QAAQC,IAAItB,EAAMyE,OAAO7D,OACC,8BAAtBZ,EAAMyE,OAAOoC,KACb8X,EAAWrU,MAAME,SAAWxK,EAAMyE,OAAO7D,MACZ,iCAAtBZ,EAAMyE,OAAOoC,KACpB8X,EAAWC,kBAAoBnS,MAAMC,KAAK1M,EAAMyE,OAAOkI,iBAAiB,SAACvC,GAAD,OAAUA,EAAKxJ,SAC1D,6BAAtBZ,EAAMyE,OAAOoC,OACpBtJ,KAAK6e,wBAAwBpc,GAC7B2e,EAAWxT,MAAMd,QAAUrK,EAAMyE,OAAO7D,OAE5CrD,KAAKwK,SAAS,CACV4W,eACD,WAECtd,QAAQC,IAAI,wBAAyB,EAAK0E,MAAM2Y,iB,0CAKnC,IAAD,OAChBtd,QAAQC,IAAI,WAAaG,EAAsBiI,sBAC1CjI,EAAsBiI,uBACvBjE,MAAM,uEACNlI,KAAKwI,MAAM4B,QAAQC,KAAnB,MAEJnG,EAAsBiG,yBACtB6K,GAAe+J,sBACV/U,MAAK,SAAAC,GACFnG,QAAQC,IAAI,kBAAmBkG,EAAS5K,MACxC,EAAKmL,SAAS,CACViU,UAAWxU,EAAS5K,UAEzBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAMrDwC,EAAYkB,eACPpC,MAAK,SAAAC,GACFnG,QAAQC,IAAI,gBAAiBkG,EAAS5K,MACtC,EAAKmL,SAAS,CACVsB,OAAQ7B,EAAS5K,UAEtBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAOrDnK,IAAE,mBAAmBsK,SAAS,CAC1BC,OAAQ,GACRC,MAAO,CACH,4BAA6B,CACzBE,UAAU,GAEd,+BAAgC,CAC5BA,UAAU,GAEd,2BAA4B,CACxBA,UAAU,IAGlBC,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,+BAMpB,IAAD,OACGsb,EAAiB5e,KAAKyI,MAAtBmW,aACA9S,EAAW9L,KAAKyI,MAAhBqD,OAEJa,EAAYb,EAAOpN,OAAS,GACzBoN,EAAOc,KAAI,SAACC,EAAMzI,GACjB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKC,SACtB,WACE,OAAQ,EAAKrE,MAAMpD,YACf,KAAK,EAAG,OAAgC,OAAxBwH,EAAKE,MAAMC,UAA6C,KAAxBH,EAAKE,MAAMC,SAAkBH,EAAKE,MAAMC,SAAWH,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMG,UAA6C,KAAxBL,EAAKE,MAAMG,SAAkBL,EAAKE,MAAMG,SAAWL,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMI,UAA6C,KAAxBN,EAAKE,MAAMI,SAAkBN,EAAKE,MAAMI,SAAWN,EAAKE,MAAME,SAC9G,QAAS,OAAOJ,EAAKE,MAAME,UALjC,MAUXjN,MAEHsV,EAAcsJ,EAAalgB,OAAS,GACjCkgB,EAAahS,KAAI,SAACC,EAAMzI,GACvB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKiS,gBACvBjS,EAAK6I,QAAQ3I,MAAME,YAG7BjN,MACP,OACI,yBAAKwN,MAAM,8DACP,yBAAKA,MAAM,gBACP,wBAAIA,MAAM,cACN,4BAAI,uBAAG7D,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,KAAR,gBACJ,4BAAI,uBAAGA,KAAK,KAAR,qBAER,yBAAK6D,MAAM,qBACP,6BAAK,4BAAKxN,KAAKyI,MAAMC,UACrB,yBAAK8E,MAAM,OACP,yBAAKA,MAAM,aAEP,0BAAMlE,KAAK,iBAAiBC,GAAG,iBAAiBiE,MAAM,mBAClD,yBAAKA,MAAM,uBACP,yBAAKA,MAAM,iBACP,wBAAIA,MAAM,elDlKjB,wBkDoKG,yBAAKA,MAAM,cACP,yBAAKA,MAAM,cACP,2BAAOA,MAAM,wCAAwCwR,GACrD,yBAAKxR,MAAM,sBACP,4BAAQjE,GAAG,2BAA2BiE,MAAM,sBAAsBoD,mBAAiB,OAAOtH,KAAK,2BAA2B+F,SAAUrP,KAAKiP,YACrI,4BAAQ5L,MAAM,IAAd,sBACCsJ,KAKb,yBAAKa,MAAM,cACP,2BAAOA,MAAM,wClDxKtC,WkDyKyB,yBAAKA,MAAM,sBACP,4BAAQjE,GAAG,+BAA+BiE,MAAM,sBAAsBoD,mBAAiB,OAAOtH,KAAK,+BAA+B+F,SAAUrP,KAAKiP,WAAYtB,UAAU,GACnK,4BAAQtK,MAAM,IAAd,sBACCiS,KAKb,yBAAK9H,MAAM,cACP,2BAAOA,MAAM,wClDxJzB,6BkDyJY,yBAAKA,MAAM,sBACP,2BAAO9D,KAAK,OAAOH,GAAG,4BAA4BiE,MAAM,eAAelE,KAAK,4BAA4B+F,SAAUrP,KAAKiP,gBAInI,yBAAKzB,MAAM,gBACP,yBAAKA,MAAM,cACP,4BAAQ9D,KAAK,SAASL,UAAU,kBAAkBO,QAAS5J,KAAKiM,elDjLtF,UkDkLsB,4BAAQvC,KAAK,SAASL,UAAU,iBAAiBO,QAAS5J,KAAKkM,elDjLrF,UkDiLgI,6BAAS,wC,8CAYvIzJ,GACpB,IAAIqK,EAAUrK,EAAMyE,OAAO7D,MACrBub,EAAe5e,KAAKyI,MAAMgW,UAAUQ,QAAO,SAAAC,GAAC,OAAIA,EAAEtR,MAAMd,SAAWA,KACzE9M,KAAKwK,SAAS,CACVoU,aAAcA,M,sCAGL,IAAD,OACRrZ,UAAUC,OACNtB,EAAsBiI,qBAClB5N,IAAE,mBAAmBuL,SACrBwX,GAAkBC,cAAcvhB,KAAKyI,MAAM2Y,YACtCpX,MAAK,SAAAC,GAC2B,UAAzBA,EAAS5K,KAAKqJ,QACd,EAAKF,MAAM4B,QAAQC,KAAnB,0BAA2CJ,EAAS5K,KAAKqJ,UAEzD,EAAK8B,SAAS,CACV9B,QAASuB,EAAS5K,KAAKqJ,aAIlC4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAQzDR,MAAM,uEAGVA,MAAM,yB,sCAIVlI,KAAKwI,MAAM4B,QAAQC,KAAK,uC,GA/PoBW,aCJ/BwW,G,YAEjB,WAAYhZ,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTgZ,YAAa,GACb/Y,QAAS,IAEb,EAAKgZ,eAAiB,EAAKA,eAAeja,KAApB,gBACtB,EAAK8Z,cAAgB,EAAKA,cAAc9Z,KAAnB,gBAPN,E,iFAUE,IAAD,OACXvD,EAAsBiI,uBACvBjE,MAAM,uEACNlI,KAAKwI,MAAM4B,QAAQC,KAAnB,MAEJnG,EAAsBiG,yBACtBmX,GAAkBK,oBACb3X,MAAK,SAAAC,GACFnG,QAAQC,IAAI,cAAekG,GACC,UAAxBA,EAAS5K,KAAKkL,OACd,EAAKC,SAAS,CACViX,YAAaxX,EAAS5K,KAAKA,OAG/B,EAAKmL,SAAS,CACV9B,QAASuB,EAAS5K,KAAKqJ,aAIhC4B,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,gB,+BAQjC,IAAD,OACL,OACI,yBAAKW,UAAU,kBACX,2BAAIrJ,KAAKwI,MAAMgB,MAAMC,OAAOf,SAC5B,4BAAK1I,KAAKyI,MAAMC,SAChB,6BnD/CsB,oBmDgDtB,4BAAQW,UAAU,cAAcK,KAAK,SAAS0E,MAAO,CAAEC,WAAY,UAAYzE,QAAS5J,KAAKuhB,enDjDxE,uBmDiD8H,6BAAM,6BACzJ,2BAAOjT,OAAO,IAAIC,MAAM,UACpB,+BACI,4BACI,2CACA,qCAEA,wCAGR,+BAEQvO,KAAKyI,MAAMgZ,YAAY7U,KAAI,SAAAwU,GAAU,OACjC,wBAAIpe,IAAKoe,EAAWQ,eAAgBhY,QAAS,kBAAM,EAAK8X,eAAeN,KACnE,4BAAKA,EAAWrU,MAAME,UACtB,4BAAKmU,EAAWxT,MAAMb,MAAME,UAM5B,4BAAsC,SAAjCmU,EAAWxS,OAAOlK,WAAwB,SAAW,kBAK9E,gC,qCAIG0c,GACXphB,KAAKwI,MAAM4B,QAAQC,KAAK,CACpBI,SAAU,kBACVhC,MAAO,CAAE2Y,WAAYA,O,sCAIrB7b,UAAUC,OACVxF,KAAKwI,MAAM4B,QAAQC,KAAnB,kBAEAnC,MAAM,2B,GA/FmC8C,aCIhC6W,G,YAEjB,WAAYrZ,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTgW,UAAW,GACX3S,OAAQ,GACRsV,WAAY,EAAK5Y,MAAMqG,SAASpG,MAAM2Y,WACtC1Y,QAAS,IAEb,EAAKsG,cAAgB,EAAKA,cAAcvH,KAAnB,gBACrB,EAAKyE,cAAgB,EAAKA,cAAczE,KAAnB,gBACrB,EAAKwH,WAAa,EAAKA,WAAWxH,KAAhB,gBAClB,EAAKoX,wBAA0B,EAAKA,wBAAwBpX,KAA7B,gBAXhB,E,wEAaRhF,GAAQ,IAAD,OACR2e,EAAephB,KAAKyI,MAApB2Y,WACNtd,QAAQC,IAAItB,EAAMyE,OAAOoC,MACzBxF,QAAQC,IAAItB,EAAMyE,OAAO7D,OACC,8BAAtBZ,EAAMyE,OAAOoC,KACb8X,EAAWrU,MAAME,SAAWxK,EAAMyE,OAAO7D,MACZ,iCAAtBZ,EAAMyE,OAAOoC,KACpB8X,EAAWC,kBAAoBnS,MAAMC,KAAK1M,EAAMyE,OAAOkI,iBAAiB,SAACvC,GAAD,OAAUA,EAAKxJ,SAC1D,6BAAtBZ,EAAMyE,OAAOoC,MACpBtJ,KAAK6e,wBAAwBpc,EAAMyE,OAAO7D,OAC1C+d,EAAWxT,MAAMd,QAAUrK,EAAMyE,OAAO7D,OACX,sBAAtBZ,EAAMyE,OAAOoC,OACpB8X,EAAWxS,OAA6B,uBAApBnM,EAAMyE,OAAOqC,IAErCvJ,KAAKwK,SAAS,CACV4W,eACD,WAECtd,QAAQC,IAAI,wBAAyB,EAAK0E,MAAM2Y,iB,0CAKnC,IAAD,OAChBtd,QAAQC,IAAI,WAAY/D,KAAKyI,MAAM2Y,YAC9Bld,EAAsBiI,uBACvBjE,MAAM,uEACNlI,KAAKwI,MAAM4B,QAAQC,KAAnB,MAEJnG,EAAsBiG,yBACtB,IAAI2C,EAAU6N,SAAS3a,KAAKyI,MAAM2Y,WAAWxT,MAAMd,SACnD9M,KAAK6e,wBAAwB/R,GAC7B5B,EAAYkB,eACPpC,MAAK,SAAAC,GACFnG,QAAQC,IAAI,gBAAiBkG,EAAS5K,MACtC,EAAKmL,SAAS,CACVsB,OAAQ7B,EAAS5K,UAEtBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAOrDnK,IAAE,mBAAmBsK,SAAS,CAC1BC,OAAQ,GACRC,MAAO,CACH,4BAA6B,CACzBE,UAAU,GAEd,+BAAgC,CAC5BA,UAAU,GAEd,2BAA4B,CACxBA,UAAU,IAGlBC,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,+BAMpB,IAAD,OACGmb,EAAcze,KAAKyI,MAAnBgW,UACA3S,EAAW9L,KAAKyI,MAAhBqD,OAEJa,EAAYb,EAAOpN,OAAS,GACzBoN,EAAOc,KAAI,SAACC,EAAMzI,GACjB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKC,SACtB,WACE,OAAQ,EAAKrE,MAAMpD,YACf,KAAK,EAAG,OAAgC,OAAxBwH,EAAKE,MAAMC,UAA6C,KAAxBH,EAAKE,MAAMC,SAAkBH,EAAKE,MAAMC,SAAWH,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMG,UAA6C,KAAxBL,EAAKE,MAAMG,SAAkBL,EAAKE,MAAMG,SAAWL,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMI,UAA6C,KAAxBN,EAAKE,MAAMI,SAAkBN,EAAKE,MAAMI,SAAWN,EAAKE,MAAME,SAC9G,QAAS,OAAOJ,EAAKE,MAAME,UALjC,MAUXjN,MAEHsV,EAAcmJ,EAAU/f,OAAS,GAC9B+f,EAAU7R,KAAI,SAACC,EAAMzI,GACpB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKiS,gBACvBjS,EAAK6I,QAAQ3I,MAAME,YAG7BjN,MACP,OACI,yBAAKwN,MAAM,8DACP,yBAAKA,MAAM,gBACP,wBAAIA,MAAM,cACN,4BAAI,uBAAG7D,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,KAAR,gBACJ,4BAAI,uBAAGA,KAAK,KAAR,wBAER,yBAAK6D,MAAM,qBACP,6BAAK,4BAAKxN,KAAKyI,MAAMC,UACrB,yBAAK8E,MAAM,OACP,yBAAKA,MAAM,aAEP,0BAAMlE,KAAK,iBAAiBC,GAAG,iBAAiBiE,MAAM,mBAClD,yBAAKA,MAAM,uBACP,yBAAKA,MAAM,iBACP,wBAAIA,MAAM,epDnIhB,uBoDqIE,yBAAKA,MAAM,cACP,yBAAKA,MAAM,cACP,2BAAOA,MAAM,wCAAwCwR,GACrD,yBAAKxR,MAAM,sBACP,4BAAQjE,GAAG,2BAA2BiE,MAAM,sBAAsBoD,mBAAiB,OAAOtH,KAAK,2BAA2B+F,SAAUrP,KAAKiP,WAAY5L,MAAOrD,KAAKyI,MAAM2Y,WAAWxT,MAAMd,QAASgV,UAAU,GACvM,4BAAQze,MAAM,IAAd,sBACCsJ,KAKb,yBAAKa,MAAM,cACP,2BAAOA,MAAM,wCpD3ItC,WoD4IyB,yBAAKA,MAAM,sBACP,4BAAQjE,GAAG,+BAA+BiE,MAAM,sBAAsBoD,mBAAiB,OAAOtH,KAAK,+BAA+B+F,SAAUrP,KAAKiP,WAAYtB,UAAU,EAAMtK,MAAOrD,KAAKyI,MAAM2Y,WAAWC,mBACtM,4BAAQhe,MAAM,IAAd,sBACCiS,KAKb,yBAAK9H,MAAM,cACP,2BAAOA,MAAM,wCpD3HzB,6BoD4HY,yBAAKA,MAAM,sBACP,2BAAO9D,KAAK,OAAOH,GAAG,4BAA4BiE,MAAM,eAAelE,KAAK,4BAA4B+F,SAAUrP,KAAKiP,WAAY5L,MAAOrD,KAAKyI,MAAM2Y,WAAWrU,MAAME,SAAU8D,UAAU,MAGlM,yBAAK1H,UAAU,cACX,2BAAOmE,MAAM,wCAAwCwR,GACrD,yBAAKxR,MAAM,sBACP,2BAAO9D,KAAK,QAAQH,GAAG,qBAAqBD,KAAK,oBAAoBjG,OAAO,EAAMiM,SAA0C,IAAjCtP,KAAKyI,MAAM2Y,WAAWxS,OAAiBS,SAAUrP,KAAKiP,aADrJ,UAEI,2BAAOvF,KAAK,QAAQH,GAAG,qBAAqBD,KAAK,oBAAoBjG,OAAO,EAAOiM,SAA0C,IAAjCtP,KAAKyI,MAAM2Y,WAAWxS,OAAkBS,SAAUrP,KAAKiP,aAFvJ,eAMR,yBAAKzB,MAAM,gBACP,yBAAKA,MAAM,cACP,4BAAQ9D,KAAK,SAASL,UAAU,kBAAkBO,QAAS5J,KAAKgP,epDzJtF,UoD0JsB,4BAAQtF,KAAK,SAASL,UAAU,iBAAiBO,QAAS5J,KAAKkM,epD3JrF,UoD2JgI,6BAAS,wC,8CAYvIY,GAAU,IAAD,OAC7BhJ,QAAQC,IAAI,aAAe+I,GAC3BkI,GAAeuK,6BAAyC,KAAZzS,EAAiBA,EAAU,GAClE9C,MAAK,SAAAC,GACFnG,QAAQC,IAAI,cAAekG,EAAS5K,MACpC,EAAKmL,SAAS,CACViU,UAAWxU,EAAS5K,UAEzBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,gB,sCAQxC,IAAD,OACRnD,UAAUC,OACNtB,EAAsBiI,qBAClB5N,IAAE,mBAAmBuL,SACrBwX,GAAkBI,eAAe1hB,KAAKyI,MAAM2Y,YACvCpX,MAAK,SAAAC,GACFnG,QAAQC,IAAI,mBAAoBkG,GACH,UAAzBA,EAAS5K,KAAKqJ,QACd,EAAKF,MAAM4B,QAAQC,KAAnB,0BAA2CJ,EAAS5K,KAAKqJ,UAEzD,EAAK8B,SAAS,CACV9B,QAASuB,EAAS5K,KAAKqJ,aAIlC4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAQzDR,MAAM,uEAGVA,MAAM,yB,sCAIVlI,KAAKwI,MAAM4B,QAAQC,KAAK,uC,GA7PqBW,aCUtC,O,wGAhBKG,GAEZ,OADArH,QAAQC,IAAIoH,GACLnH,IAAMC,KAAN,UAAcR,EAAd,sBAA2C0H,EAAM,M,4CAKxD,OAAOnH,IAAMsE,IAAN,UAAa7E,EAAb,sBAA0C,M,uCAGpC0H,GACb,OAAOnH,IAAMoH,IAAN,UAAa3H,EAAb,sBAA0C0H,EAAM,Q,MCL1C4W,G,YAEjB,WAAYvZ,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTgW,UAAW,GACX3S,OAAQ,GACRkW,aAAc,CACVjV,MAAO,GAGPa,MAAO,CACHd,QAAS,IAEbuU,kBAAmB,IAIvBzC,aAAc,GACdlW,QAAS,IAEb,EAAKuD,cAAgB,EAAKA,cAAcxE,KAAnB,gBACrB,EAAKyE,cAAgB,EAAKA,cAAczE,KAAnB,gBACrB,EAAKwH,WAAa,EAAKA,WAAWxH,KAAhB,gBAClB,EAAKoX,wBAA0B,EAAKA,wBAAwBpX,KAA7B,gBAtBhB,E,wEAwBRhF,GAAQ,IAAD,OACRuf,EAAiBhiB,KAAKyI,MAAtBuZ,aACNle,QAAQC,IAAItB,EAAMyE,OAAOoC,MACzBxF,QAAQC,IAAItB,EAAMyE,OAAO7D,OACC,gCAAtBZ,EAAMyE,OAAOoC,KACb0Y,EAAajV,MAAME,SAAWxK,EAAMyE,OAAO7D,MACd,kCAAtBZ,EAAMyE,OAAOoC,KACpB0Y,EAAaC,iBAAmBxf,EAAMyE,OAAO7D,MAChB,mCAAtBZ,EAAMyE,OAAOoC,KACpB0Y,EAAaX,kBAAoBnS,MAAMC,KAAK1M,EAAMyE,OAAOkI,iBAAiB,SAACvC,GAAD,OAAUA,EAAKxJ,SAC5D,+BAAtBZ,EAAMyE,OAAOoC,OACpBtJ,KAAK6e,wBAAwBpc,GAC7BqB,QAAQC,IAAItB,EAAMyE,OAAO7D,OACzB2e,EAAapU,MAAMd,QAAUrK,EAAMyE,OAAO7D,OAE9CrD,KAAKwK,SAAS,CACVwX,iBACD,WAECle,QAAQC,IAAI,wBAAyB,EAAK0E,MAAMuZ,mB,0CAKnC,IAAD,OAChBle,QAAQC,IAAI,WAAaG,EAAsBiI,sBAC1CjI,EAAsBiI,uBACvBjE,MAAM,uEACNlI,KAAKwI,MAAM4B,QAAQC,KAAnB,MAEJnG,EAAsBiG,yBACtB6K,GAAe+J,sBACV/U,MAAK,SAAAC,GACFnG,QAAQC,IAAI,kBAAmBkG,EAAS5K,MACxC,EAAKmL,SAAS,CACViU,UAAWxU,EAAS5K,UAEzBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAMrDwC,EAAYkB,eACPpC,MAAK,SAAAC,GACFnG,QAAQC,IAAI,gBAAiBkG,EAAS5K,MACtC,EAAKmL,SAAS,CACVsB,OAAQ7B,EAAS5K,UAEtBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAOrDnK,IAAE,qBAAqBsK,SAAS,CAC5BC,OAAQ,GACRC,MAAO,CACH,8BAA+B,CAC3BE,UAAU,GAEd,gCAAiC,CAC7BA,UAAU,GAEd,iCAAkC,CAC9BA,UAAU,GAEd,6BAA8B,CAC1BA,UAAU,IAGlBC,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,+BAMpB,IAAD,OACGsb,EAAiB5e,KAAKyI,MAAtBmW,aACA9S,EAAW9L,KAAKyI,MAAhBqD,OAEJa,EAAYb,EAAOpN,OAAS,GACzBoN,EAAOc,KAAI,SAACC,EAAMzI,GACjB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKC,SACtB,WACE,OAAQ,EAAKrE,MAAMpD,YACf,KAAK,EAAG,OAAgC,OAAxBwH,EAAKE,MAAMC,UAA6C,KAAxBH,EAAKE,MAAMC,SAAkBH,EAAKE,MAAMC,SAAWH,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMG,UAA6C,KAAxBL,EAAKE,MAAMG,SAAkBL,EAAKE,MAAMG,SAAWL,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMI,UAA6C,KAAxBN,EAAKE,MAAMI,SAAkBN,EAAKE,MAAMI,SAAWN,EAAKE,MAAME,SAC9G,QAAS,OAAOJ,EAAKE,MAAME,UALjC,MAUXjN,MAEHsV,EAAcsJ,EAAalgB,OAAS,GACjCkgB,EAAahS,KAAI,SAACC,EAAMzI,GACvB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKiS,gBACvBjS,EAAK6I,QAAQ3I,MAAME,YAG7BjN,MACP,OACI,yBAAKwN,MAAM,8DACP,yBAAKA,MAAM,gBACP,wBAAIA,MAAM,cACN,4BAAI,uBAAG7D,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,KAAR,iBACJ,4BAAI,uBAAGA,KAAK,KAAR,sBAER,yBAAK6D,MAAM,qBACP,6BAAK,4BAAKxN,KAAKyI,MAAMC,UACrB,yBAAK8E,MAAM,OACP,yBAAKA,MAAM,aAEP,0BAAMlE,KAAK,mBAAmBC,GAAG,mBAAmBiE,MAAM,mBACtD,yBAAKA,MAAM,uBACP,yBAAKA,MAAM,iBACP,wBAAIA,MAAM,etD3KhB,yBsD6KE,yBAAKA,MAAM,cACP,yBAAKA,MAAM,cACP,2BAAOA,MAAM,wCAAwCwR,GACrD,yBAAKxR,MAAM,sBACP,4BAAQjE,GAAG,6BAA6BiE,MAAM,sBAAsBoD,mBAAiB,OAAOtH,KAAK,6BAA6B+F,SAAUrP,KAAKiP,YACzI,4BAAQ5L,MAAM,IAAd,sBACCsJ,KAKb,yBAAKa,MAAM,cACP,2BAAOA,MAAM,wCtD9KtC,WsD+KyB,yBAAKA,MAAM,sBACP,4BAAQjE,GAAG,iCAAiCiE,MAAM,sBAAsBoD,mBAAiB,OAAOtH,KAAK,iCAAiC+F,SAAUrP,KAAKiP,WAAYtB,UAAU,GACvK,4BAAQtK,MAAM,IAAd,sBACCiS,KAKb,yBAAK9H,MAAM,cACP,2BAAOA,MAAM,wCtD/J5B,qBsDgKe,yBAAKA,MAAM,sBACP,2BAAO9D,KAAK,OAAOH,GAAG,gCAAgCiE,MAAM,eAAelE,KAAK,gCAAgC+F,SAAUrP,KAAKiP,eAGvI,yBAAKzB,MAAM,cACP,2BAAOA,MAAM,wCtDtKxB,8BsDuKW,yBAAKA,MAAM,sBACP,2BAAO9D,KAAK,OAAOH,GAAG,8BAA8BiE,MAAM,eAAelE,KAAK,8BAA8B+F,SAAUrP,KAAKiP,gBAIvI,yBAAKzB,MAAM,gBACP,yBAAKA,MAAM,cACP,4BAAQ9D,KAAK,SAASL,UAAU,kBAAkBO,QAAS5J,KAAKiM,etD7LtF,UsD8LsB,4BAAQvC,KAAK,SAASL,UAAU,iBAAiBO,QAAS5J,KAAKkM,etD7LrF,UsD6LgI,6BAAS,wC,8CAYvIzJ,GACpB,IAAIqK,EAAUrK,EAAMyE,OAAO7D,MACrBub,EAAe5e,KAAKyI,MAAMgW,UAAUQ,QAAO,SAAAC,GAAC,OAAIA,EAAEtR,MAAMd,SAAWA,KACzE9M,KAAKwK,SAAS,CACVoU,aAAcA,M,sCAGL,IAAD,OACRrZ,UAAUC,OACNtB,EAAsBiI,qBAClB5N,IAAE,qBAAqBuL,SACvBoY,GAAoBC,gBAAgBniB,KAAKyI,MAAMuZ,cAC1ChY,MAAK,SAAAC,GAC2B,UAAzBA,EAAS5K,KAAKqJ,QACd,EAAKF,MAAM4B,QAAQC,KAAnB,4BAA6CJ,EAAS5K,KAAKqJ,UAE3D,EAAK8B,SAAS,CACV9B,QAASuB,EAAS5K,KAAKqJ,aAIlC4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAQzDR,MAAM,uEAGVA,MAAM,yB,sCAIVlI,KAAKwI,MAAM4B,QAAQC,KAAK,yC,GA3QsBW,aCJjCoX,G,YAEjB,WAAY5Z,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACT4Z,cAAe,GACf3Z,QAAS,IAEb,EAAK4Z,iBAAmB,EAAKA,iBAAiB7a,KAAtB,gBACxB,EAAK0a,gBAAkB,EAAKA,gBAAgB1a,KAArB,gBAPR,E,iFAUE,IAAD,OACXvD,EAAsBiI,uBACvBjE,MAAM,uEACNlI,KAAKwI,MAAM4B,QAAQC,KAAnB,MAEJnG,EAAsBiG,yBACtB+X,GAAoBK,sBACfvY,MAAK,SAAAC,GACFnG,QAAQC,IAAI,cAAekG,GACC,UAAxBA,EAAS5K,KAAKkL,OACd,EAAKC,SAAS,CACV6X,cAAepY,EAAS5K,KAAKA,OAGjC,EAAKmL,SAAS,CACV9B,QAASuB,EAAS5K,KAAKqJ,aAIhC4B,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBAKL,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,gB,+BAQjC,IAAD,OACL,OACI,yBAAKW,UAAU,oBACX,2BAAIrJ,KAAKwI,MAAMgB,MAAMC,OAAOf,SAC5B,4BAAK1I,KAAKyI,MAAMC,SAChB,6BvDlDuB,qBuDmDvB,4BAAQW,UAAU,cAAcK,KAAK,SAAS0E,MAAO,CAAEC,WAAY,UAAYzE,QAAS5J,KAAKmiB,iBvDpDvE,wBuDoDgI,6BAAM,6BAC5J,2BAAO7T,OAAO,IAAIC,MAAM,UACpB,+BACI,4BACI,iDACA,iDACA,qCAEA,wCAGR,+BAEQvO,KAAKyI,MAAM4Z,cAAczV,KAAI,SAAAoV,GAAY,OACrC,wBAAIhf,IAAKgf,EAAaJ,eAAgBhY,QAAS,kBAAM,EAAK0Y,iBAAiBN,KACvE,4BAAKA,EAAaC,kBAClB,4BAAKD,EAAajV,MAAME,UACxB,4BAAK+U,EAAapU,MAAMb,MAAME,UAM9B,4BAAwC,SAAnC+U,EAAapT,OAAOlK,WAAwB,SAAW,kBAKhF,gC,uCAIKsd,GACbhiB,KAAKwI,MAAM4B,QAAQC,KAAK,CACpBI,SAAU,oBACVhC,MAAO,CAAEuZ,aAAcA,O,wCAIvBzc,UAAUC,OACVxF,KAAKwI,MAAM4B,QAAQC,KAAnB,oBAEAnC,MAAM,2B,GAjGqC8C,aCIlCwX,G,YAEjB,WAAYha,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTgW,UAAW,GACX3S,OAAQ,GACRkW,aAAc,EAAKxZ,MAAMqG,SAASpG,MAAMuZ,aACxCtZ,QAAS,IAEb,EAAKsG,cAAgB,EAAKA,cAAcvH,KAAnB,gBACrB,EAAKyE,cAAgB,EAAKA,cAAczE,KAAnB,gBACrB,EAAKwH,WAAa,EAAKA,WAAWxH,KAAhB,gBAClB,EAAKoX,wBAA0B,EAAKA,wBAAwBpX,KAA7B,gBAXhB,E,wEAaRhF,GAAQ,IAAD,OACRuf,EAAiBhiB,KAAKyI,MAAtBuZ,aACNle,QAAQC,IAAItB,EAAMyE,OAAOoC,MACzBxF,QAAQC,IAAItB,EAAMyE,OAAO7D,OACC,gCAAtBZ,EAAMyE,OAAOoC,KACb0Y,EAAajV,MAAME,SAAWxK,EAAMyE,OAAO7D,MACd,kCAAtBZ,EAAMyE,OAAOoC,KACpB0Y,EAAaC,iBAAmBxf,EAAMyE,OAAO7D,MAChB,mCAAtBZ,EAAMyE,OAAOoC,KACpB0Y,EAAaX,kBAAoBnS,MAAMC,KAAK1M,EAAMyE,OAAOkI,iBAAiB,SAACvC,GAAD,OAAUA,EAAKxJ,SAC5D,+BAAtBZ,EAAMyE,OAAOoC,MACpBtJ,KAAK6e,wBAAwBpc,EAAMyE,OAAO7D,OAC1C2e,EAAapU,MAAMd,QAAUrK,EAAMyE,OAAO7D,OACb,wBAAtBZ,EAAMyE,OAAOoC,OACpB0Y,EAAapT,OAA6B,yBAApBnM,EAAMyE,OAAOqC,IAEvCvJ,KAAKwK,SAAS,CACVwX,iBACD,WAECle,QAAQC,IAAI,wBAAyB,EAAK0E,MAAMuZ,mB,0CAKnC,IAAD,OAChBle,QAAQC,IAAI,WAAY/D,KAAKyI,MAAMuZ,cAC9B9d,EAAsBiI,uBACvBjE,MAAM,uEACNlI,KAAKwI,MAAM4B,QAAQC,KAAnB,MAEJnG,EAAsBiG,yBACtB,IAAI2C,EAAU6N,SAAS3a,KAAKyI,MAAMuZ,aAAapU,MAAMd,SACrD9M,KAAK6e,wBAAwB/R,GAC7B5B,EAAYkB,eACPpC,MAAK,SAAAC,GACFnG,QAAQC,IAAI,gBAAiBkG,EAAS5K,MACtC,EAAKmL,SAAS,CACVsB,OAAQ7B,EAAS5K,UAEtBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAOrDnK,IAAE,qBAAqBsK,SAAS,CAC5BC,OAAQ,GACRC,MAAO,CACH,8BAA+B,CAC3BE,UAAU,GAEd,gCAAiC,CAC7BA,UAAU,GAEd,iCAAkC,CAC9BA,UAAU,GAEd,6BAA8B,CAC1BA,UAAU,IAGlBC,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,+BAMpB,IAAD,OACGmb,EAAcze,KAAKyI,MAAnBgW,UACA3S,EAAW9L,KAAKyI,MAAhBqD,OAEJa,EAAYb,EAAOpN,OAAS,GACzBoN,EAAOc,KAAI,SAACC,EAAMzI,GACjB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKC,SACtB,WACE,OAAQ,EAAKrE,MAAMpD,YACf,KAAK,EAAG,OAAgC,OAAxBwH,EAAKE,MAAMC,UAA6C,KAAxBH,EAAKE,MAAMC,SAAkBH,EAAKE,MAAMC,SAAWH,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMG,UAA6C,KAAxBL,EAAKE,MAAMG,SAAkBL,EAAKE,MAAMG,SAAWL,EAAKE,MAAME,SAC9G,KAAK,EAAG,OAAgC,OAAxBJ,EAAKE,MAAMI,UAA6C,KAAxBN,EAAKE,MAAMI,SAAkBN,EAAKE,MAAMI,SAAWN,EAAKE,MAAME,SAC9G,QAAS,OAAOJ,EAAKE,MAAME,UALjC,MAUXjN,MAEHsV,EAAcmJ,EAAU/f,OAAS,GAC9B+f,EAAU7R,KAAI,SAACC,EAAMzI,GACpB,OACI,4BAAQpB,IAAKoB,EAAGf,MAAOwJ,EAAKiS,gBACvBjS,EAAK6I,QAAQ3I,MAAME,YAG7BjN,MACP,OACI,yBAAKwN,MAAM,8DACP,yBAAKA,MAAM,gBACP,wBAAIA,MAAM,cACN,4BAAI,uBAAG7D,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,KAAR,iBACJ,4BAAI,uBAAGA,KAAK,KAAR,yBAER,yBAAK6D,MAAM,qBACP,6BAAK,4BAAKxN,KAAKyI,MAAMC,UACrB,yBAAK8E,MAAM,OACP,yBAAKA,MAAM,aAEP,0BAAMlE,KAAK,mBAAmBC,GAAG,mBAAmBiE,MAAM,mBACtD,yBAAKA,MAAM,uBACP,yBAAKA,MAAM,iBACP,wBAAIA,MAAM,exD3If,wBwD6IC,yBAAKA,MAAM,cACP,yBAAKA,MAAM,cACP,2BAAOA,MAAM,wCAAwCwR,GACrD,yBAAKxR,MAAM,sBACP,4BAAQjE,GAAG,6BAA6BiE,MAAM,sBAAsBoD,mBAAiB,OAAOtH,KAAK,6BAA6B+F,SAAUrP,KAAKiP,WAAY5L,MAAOrD,KAAKyI,MAAMuZ,aAAapU,MAAMd,QAASgV,UAAU,GAC7M,4BAAQze,MAAM,IAAd,sBACCsJ,KAKb,yBAAKa,MAAM,cACP,2BAAOA,MAAM,wCxDhJtC,WwDiJyB,yBAAKA,MAAM,sBACP,4BAAQjE,GAAG,iCAAiCiE,MAAM,sBAAsBoD,mBAAiB,OAAOtH,KAAK,iCAAiC+F,SAAUrP,KAAKiP,WAAYtB,UAAU,EAAMtK,MAAOrD,KAAKyI,MAAMuZ,aAAaX,mBAC5M,4BAAQhe,MAAM,IAAd,sBACCiS,KAKb,yBAAK9H,MAAM,cACP,2BAAOA,MAAM,wCxDjI5B,qBwDkIe,yBAAKA,MAAM,sBACP,2BAAO9D,KAAK,OAAOH,GAAG,gCAAgCiE,MAAM,eAAelE,KAAK,gCAAgC+F,SAAUrP,KAAKiP,WAAY5L,MAAOrD,KAAKyI,MAAMuZ,aAAaC,iBAAkBxU,UAAU,QAG9M,yBAAKD,MAAM,cACP,2BAAOA,MAAM,wCxDxIxB,8BwDyIW,yBAAKA,MAAM,sBACP,2BAAO9D,KAAK,OAAOH,GAAG,8BAA8BiE,MAAM,eAAelE,KAAK,8BAA8B+F,SAAUrP,KAAKiP,WAAY5L,MAAOrD,KAAKyI,MAAMuZ,aAAajV,MAAME,SAAU8D,UAAU,MAGxM,yBAAK1H,UAAU,cACX,2BAAOmE,MAAM,wCAAwCwR,GACrD,yBAAKxR,MAAM,sBACP,2BAAO9D,KAAK,QAAQH,GAAG,uBAAuBD,KAAK,sBAAsBjG,OAAO,EAAMiM,SAA4C,IAAnCtP,KAAKyI,MAAMuZ,aAAapT,OAAiBS,SAAUrP,KAAKiP,aAD3J,UAEI,2BAAOvF,KAAK,QAAQH,GAAG,uBAAuBD,KAAK,sBAAsBjG,OAAO,EAAOiM,SAA4C,IAAnCtP,KAAKyI,MAAMuZ,aAAapT,OAAkBS,SAAUrP,KAAKiP,aAF7J,eAMR,yBAAKzB,MAAM,gBACP,yBAAKA,MAAM,cACP,4BAAQ9D,KAAK,SAASL,UAAU,kBAAkBO,QAAS5J,KAAKgP,exDpKtF,UwDqKsB,4BAAQtF,KAAK,SAASL,UAAU,iBAAiBO,QAAS5J,KAAKkM,exDtKrF,UwDsKgI,6BAAS,wC,8CAYvIY,GAAU,IAAD,OAC7BhJ,QAAQC,IAAI,aAAe+I,GAC3BkI,GAAeuK,6BAAyC,KAAZzS,EAAiBA,EAAU,GAClE9C,MAAK,SAAAC,GACFnG,QAAQC,IAAI,cAAekG,EAAS5K,MACpC,EAAKmL,SAAS,CACViU,UAAWxU,EAAS5K,UAEzBiL,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,gB,sCAQxC,IAAD,OACRnD,UAAUC,OACNtB,EAAsBiI,qBAClB5N,IAAE,qBAAqBuL,SACvBoY,GAAoBI,iBAAiBtiB,KAAKyI,MAAMuZ,cAC3ChY,MAAK,SAAAC,GACFnG,QAAQC,IAAI,mBAAoBkG,GACH,UAAzBA,EAAS5K,KAAKqJ,QACd,EAAKF,MAAM4B,QAAQC,KAAnB,4BAA6CJ,EAAS5K,KAAKqJ,UAE3D,EAAK8B,SAAS,CACV9B,QAASuB,EAAS5K,KAAKqJ,aAIlC4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAQzDR,MAAM,uEAGVA,MAAM,yB,sCAIVlI,KAAKwI,MAAM4B,QAAQC,KAAK,yC,GAxQuBW,aC2WxCyX,G,YAvTX,WAAYja,GAAO,IAAD,8BACd,4CAAMA,KAEDC,MAAQ,CACTtI,QAAS+D,EAAsBwe,sBAC/BC,WAAW,EACXC,cAAc,EACdC,YAAY,GAGhB,EAAKC,UAAY,KACjB,EAAKC,SAAW,EAAKC,UAAUvb,KAAf,gBAChB,EAAKwb,SAAW,EAAKC,UAAUzb,KAAf,gBAChB,EAAK0b,OAAS,EAAKC,QAAQ3b,KAAb,gBACd,EAAK4b,YAAc,EAAKA,YAAY5b,KAAjB,gBACnB,EAAK6b,aAAe,EAAKA,aAAa7b,KAAlB,gBAfN,E,uEAkBRlH,GACRuD,QAAQC,IAAI,qBAAsBxD,GAClCP,KAAKwK,SAAS,CAACqY,YAAY,M,gCAGnBtiB,GACRuD,QAAQC,IAAI,iBAAkBxD,GAC9BP,KAAKwK,SAAS,CAACqY,YAAY,M,8BAGrBtiB,GACNuD,QAAQC,IAAI,eAAgBxD,GACTP,KAAKyI,MAAMoa,WAE1B7iB,KAAKwI,MAAM4B,QAAQC,KAAK,MAE1BrK,KAAKwK,SAAS,CAACmY,WAAW,IAC1B3iB,KAAK8iB,UAAUS,QACfvjB,KAAKwK,SAAS,CAACqY,YAAY,O,oCAM7B7iB,KAAKwK,SAAS,CAACmY,WAAW,M,qCAI1B3iB,KAAKwK,SAAS,CAACmY,WAAW,IAC1B3iB,KAAKwI,MAAM4B,QAAQC,KAAK,O,+BAGjB,IAAD,OACEb,EAAUxJ,KAAKwI,MAAfgB,MACR,OACE,oCACE,kBAAC,IAAD,CACEga,IAAK,SAAAA,GAAS,EAAKV,UAAYU,GAC/BlgB,QAASxE,SACTmkB,SAAUjjB,KAAKijB,SACfE,OAAQnjB,KAAKmjB,OACbJ,SAAU/iB,KAAK+iB,SACfU,SAAU,IACVtjB,QAASH,KAAKyI,MAAMtI,UAEpB,yBAAKkJ,UAAU,IAGX,kBAAC,IAAD,KAGA,kBAAC,IAAD,CAAOqa,KAAK,kBAAkBC,OAAK,EAACC,UAAWrb,IAC3C,kBAAC,IAAD,CACIob,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,WACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,EAAqBA,MANjD,KAQI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,oBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,EAAqBA,MAVjD,KAYI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,WACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,EAAqBA,MAdjD,KAgBI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,YACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,EAAsBA,MAlBlD,KAqBI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,qBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,EAAsBA,MAvBlD,KA0BI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,YACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,EAAsBA,MA5BlD,KA+BI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,kBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA4BA,MAjCxD,KAoCI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,WACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAqBA,MAtCjD,KAyCI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,YACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAsBA,MA3ClD,KA8CI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,qBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAsBA,MAhDlD,KAkDI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,YACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAsBA,MApDlD,KAsDI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,eACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAyBA,MAxDrD,KA0DI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,gBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA0BA,MA5DtD,KA8DI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,yBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA0BA,MAhEtD,KAmEI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,qBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA+BA,MArE3D,KAuEI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,sBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAkCA,MAzE9D,KA2EI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,+BACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAgCA,MA7E5D,KAiFI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,iBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAkBA,MAnF9C,KAqFI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,kBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA8BA,MAvF1D,KAyFI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,2BACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA4BA,MA3FxD,KA+FI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,eACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAyBA,MAjGrD,KAmGI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,gBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA4BA,MArGxD,KAuGI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,yBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA0BA,MAzGtD,KA2GI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,wBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAiCA,MA7G7D,KA+GI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,sBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA+BA,MAjH3D,KAmHI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,sBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA+BA,MArH3D,KAwHI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,mBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA4BA,MA1HxD,KA6HI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,cACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAwBA,MA/HpD,KAiII,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,wBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAyBA,MAnIrD,KAqII,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,eACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA2BA,MAvIvD,KAyII,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,qBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA+BA,MA3I3D,KA6II,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,kCACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAgCA,MA/I5D,KAiJI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,sBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAkCA,MAnJ9D,KAqJI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,aACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAuBA,MAvJnD,KA0JI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,cACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAwBA,MA5JpD,KA+JI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,uBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAwBA,MAjKpD,KAmKI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,cACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAwBA,MArKpD,KAuKI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,iBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA2BA,MAzKvD,KA4KI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,kBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA4BA,MA9KxD,KAiLI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,2BACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA4BA,MAnLxD,KAqLI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,kBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA4BA,MAvLxD,KA0LI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,mBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA6BA,MA5LzD,KA+LI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,oBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA8BA,MAjM1D,KAoMI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,6BACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA8BA,MAtM1D,KAwMI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,oBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA8BA,MA1M1D,KA6MI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,cACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA0BA,MA/MtD,KAiNI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,sBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAuBA,MAnNnD,KAqNI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,eACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAyBA,MAvNrD,KA0NI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,yBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA0BA,MA5NtD,KA8NI,kBAAC,IAAD,CACImb,OAAK,EAACD,KAAI,UAAKla,EAAMka,KAAX,gBACVG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAA4BA,MAhOxD,Y,GApEKsb,IAAM9Y,WCjDN+Y,G,YAEjB,WAAYvb,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,QAAS,GACT9E,SAAU,EAAK4E,MAAMqG,SAASpG,MAAM7E,UAExC,EAAKqI,cAAgB,EAAKA,cAAcxE,KAAnB,gBACrB,EAAKuc,cAAgB,EAAKA,cAAcvc,KAAnB,gBAPN,E,iFAYf,IAAI7D,EAAW5D,KAAKyI,MAAM7E,SAC1BrF,IAAE4E,UAAUC,UAAU,iBAAiB,WACnC,OAAI7E,IAAE,gBAAgBsL,QAAUtL,IAAE,uBAAuBsL,QAK1D,mCAEHtL,IAAE4E,UAAUC,UAAU,oBAAoB,WACtC,OAAI7E,IAAE,gBAAgBsL,OAAStL,IAAE,gBAAgBsL,OAC7C/F,QAAQC,IAAI,SACL,IAEPD,QAAQC,IAAI,cACL,KAEZ,mDAEHxF,IAAE4E,UAAUC,UAAU,kBAAkB,SAAUC,GAC9C,OAAIO,GAAYP,GACL,gEAAgEG,KAAKH,KAIjF,iDAEH9E,IAAE,UAAUsK,SAAS,CACjBC,OAAQ,GACRC,MAAO,CACHsC,YAAa,CACTpC,UAAU,GAEdqC,YAAa,CACTrC,UAAU,EACVuG,kBAAkB,EAClBC,gBAAgB,GAEpBC,mBAAoB,CAChBzG,UAAU,EACVwG,gBAAgB,EAChBE,eAAe,IAGvBzG,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,+BAO1B,OACI,yBAAK+F,UAAU,SACX,0BAAMC,KAAK,QAAQC,GAAG,SAClB,+CADJ,kBAEmB,2BAAOG,KAAK,WAAWH,GAAG,cAAcD,KAAK,gBAAgB,6BAAS,6BAFzF,kBAGmB,2BAAOI,KAAK,WAAWH,GAAG,cAAcD,KAAK,gBAAgB,6BAAS,6BAHzF,0BAI2B,2BAAOI,KAAK,WAAWH,GAAG,qBAAqBD,KAAK,uBAAuB,6BAAS,6BAC3G,kBAAC,SAAD,KAAQ,4BAAQI,KAAK,SAASE,QAAS5J,KAAKiM,eAApC,WACR,kBAAC,SAAD,KAAQ,4BAAQvC,KAAK,SAASE,QAAS5J,KAAKgkB,eAApC,UAAkE,6BAAS,8BACnF,6BAAK,4BAAKhkB,KAAKyI,MAAMC,c,sCAMpB,IAAD,OACRnK,IAAE,UAAUuL,UACRvE,UAAUC,OACV0F,EAAY+Y,sBAAsBjkB,KAAKyI,MAAM7E,SAAUrF,IAAE,gBAAgBsL,MAAOtL,IAAE,gBAAgBsL,OAC7FG,MAAK,SAAAC,GACF,IAAIpE,EAAUZ,IAAWgF,EAAS5K,KAAKoH,OACvCpC,aAAaS,QAAQ,SAAWe,EAAQe,OAAQrC,IAASC,IAAI0F,QAASD,EAAS5K,KAAKoH,MAAO/B,WAA3C,UAA0DhB,KAC1GW,aAAaS,QAAQ,YAAce,EAAQe,OAAQrC,IAASC,IAAI0F,QAASrE,EAAQV,KAAKvB,SAAUc,WAA7C,UAA4DhB,KAC/GW,aAAaS,QAAQ,YAAce,EAAQe,OAAQrC,IAASC,IAAI0F,QAASrE,EAAQV,KAAKtB,SAAUa,WAA7C,UAA4DhB,KAC/GW,aAAaS,QAAQ,gBAAiB,UACtCT,aAAaS,QAAQ,UAAWP,IAASC,IAAI0F,QAASrE,EAAQe,OAAQlC,WAAtC,UAAqDhB,KACrF,EAAK8E,MAAM4B,QAAQC,KAAnB,8CAEHC,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAOrDR,MAAM,iD,sCAMdlI,KAAKwI,MAAM4B,QAAQC,KAAnB,kC,GArHoDW,aCLvCkZ,G,YAEjB,WAAY1b,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,QAAS,IAEb,EAAKuD,cAAgB,EAAKA,cAAcxE,KAAnB,gBACrB,EAAKyE,cAAgB,EAAKA,cAAczE,KAAnB,gBANN,E,iFAUflJ,IAAE,UAAUsK,SAAS,CACjBC,OAAQ,GACRC,MAAO,CACHnF,SAAU,CACNqF,UAAU,IAGlBC,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,+BAO1B,OAEI,yBAAK+F,UAAU,qBAEvB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,IACX,wBAAImE,MAAM,gBAKd,yBAAKnE,UAAU,4BACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,iBACX,wBAAIA,UAAU,eAAd,oBAEJ,yBAAKA,UAAU,cACX,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,eAEX,0BAAMA,UAAU,kBAAiBC,KAAK,QAAQC,GAAG,SAC7C,yBAAKF,UAAU,cACX,2BAAOA,UAAU,0BAAjB,gBACA,yBAAKA,UAAU,YACX,2BAAOK,KAAK,OAAOH,GAAG,WAAWD,KAAK,WAAWD,UAAU,mBAInE,6BACI,4BAAKrJ,KAAKyI,MAAMC,cAMpC,yBAAKW,UAAU,gBAEX,kBAAC,SAAD,KACI,4BAAQO,QAAS5J,KAAKkM,cAAexC,KAAK,SAASL,UAAU,mCAA7D,WAEJ,kBAAC,SAAD,KACI,4BAAQO,QAAS5J,KAAKiM,cAAevC,KAAK,SAASL,UAAU,8BAA7D,mB,sCAeP,IAAD,OACR9K,IAAE,UAAUuL,UACRvE,UAAUC,OACV0F,EAAYtC,eAAerK,IAAE,aAAasL,OACrCG,MAAK,SAAAC,GAEF,EAAKzB,MAAM4B,QAAQC,KAAnB,iBAAkCJ,EAAS5K,KAAKqJ,aAEnD4B,OACG,SAAAnB,GAGI,OAFArF,QAAQC,IAAIoF,EAAMT,SAClB5E,QAAQC,IAAIoF,EAAMsR,MACVtR,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAOrDR,MAAM,iD,sCAMdlI,KAAKwI,MAAM4B,QAAQC,KAAnB,+B,GArH6CW,aCKhCmZ,G,YAEjB,WAAY3b,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,QAAS,GACT9E,SAAU,EAAK4E,MAAMgB,MAAMC,OAAO7F,SAClC6C,MAAO,EAAK+B,MAAMgB,MAAMC,OAAOhD,OAEnC,EAAKwF,cAAgB,EAAKA,cAAcxE,KAAnB,gBACrB,EAAKyE,cAAgB,EAAKA,cAAczE,KAAnB,gBARN,E,iFAWE,IAAD,OAChB3D,QAAQC,IAAI,cAAgB/D,KAAKyI,MAAM7E,UACvCE,QAAQC,IAAI,WAAa/D,KAAKyI,MAAMhC,OACpCvC,EAAsBiG,yBACtBe,EAAYkZ,2BAA2BpkB,KAAKyI,MAAM7E,SAAU5D,KAAKyI,MAAMhC,OAClEuD,MAAK,SAAAC,GACFnG,QAAQC,IAAI,cAAekG,GAC3B,EAAKO,SAAS,CACV9B,QAASuB,EAAS5K,KAAKqJ,aAE5B4B,OACC,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAMrDnK,IAAE4E,UAAUC,UAAU,iBAAiB,WACnC,OAAI7E,IAAE,gBAAgBsL,QAAUtL,IAAE,uBAAuBsL,QAK1D,oCACHtL,IAAE4E,UAAUC,UAAU,kBAAkB,SAAUC,GAC9C,MAAO,gEAAgEG,KAAKH,KAC7E,iDACH9E,IAAE,UAAUsK,SAAS,CACjBC,OAAQ,GACRC,MAAO,CACHuC,YAAa,CACTrC,UAAU,EACVwG,gBAAgB,EAChBG,UAAW,IAEfF,mBAAoB,CAChBzG,UAAU,EACV0G,eAAe,EACfF,gBAAgB,EAChBG,UAAW,KAGnB1G,eAAgB,SAAUC,EAAO7F,GAC7B6F,EAAMC,YAAY9F,Q,+BAO1B,OACI,yBAAK+F,UAAU,qBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,IAAG,wBAAImE,MAAM,gBAE5B,yBAAKnE,UAAU,4BACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,kCACX,yBAAKA,UAAU,iBACX,wBAAIA,UAAU,eAAd,oBAEJ,yBAAKA,UAAU,cACX,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,SAEX,0BAAMA,UAAU,kBAAkBC,KAAK,QAAQC,GAAG,SAC9C,yBAAKF,UAAU,cACX,2BAAOA,UAAU,0BAAjB,kBACA,yBAAKA,UAAU,YACX,2BAAOK,KAAK,WAAWH,GAAG,cAAcD,KAAK,cAAcD,UAAU,mBAG7E,yBAAKA,UAAU,cACX,2BAAOA,UAAU,0BAAjB,sBACA,yBAAKA,UAAU,YACX,2BAAOK,KAAK,WAAWH,GAAG,qBAAqBD,KAAK,qBAAqBD,UAAU,mBAK3F,6BAAK,4BAAKrJ,KAAKyI,MAAMC,cAQrC,yBAAKW,UAAU,gBAEX,kBAAC,SAAD,KAAQ,4BAAQK,KAAK,SAASE,QAAS5J,KAAKkM,cAAe7C,UAAU,mCAA7D,WACR,kBAAC,SAAD,UAAU,4BAAQK,KAAK,SAASE,QAAS5J,KAAKiM,cAAe5C,UAAU,8BAA7D,mB,sCAWzB,IAAD,OACR9K,IAAE,UAAUuL,UACRvE,UAAUC,OACV0F,EAAYmZ,eAAerkB,KAAKyI,MAAM7E,SAAU5D,KAAKyI,MAAMhC,MAAOlI,IAAE,gBAAgBsL,OAC/EG,MAAK,SAAAC,GAC0B,UAAxBA,EAAS5K,KAAKkL,OACd,EAAK/B,MAAM4B,QAAQC,KAAnB,WAA4BJ,EAAS5K,KAAKqJ,UAE1C,EAAK8B,SAAS,CACV9B,QAASuB,EAAS5K,KAAKqJ,aAIlC4B,OACG,SAAAnB,GACI,OAAQA,EAAMT,SACV,IAAK,gBACD,EAAK8B,SAAS,CACV9B,QAASS,EAAMT,UAEnB,MACJ,QACI,EAAK8B,SAAS,CACV9B,QAASS,EAAMc,SAAS5K,KAAKqJ,cAOrDR,MAAM,iD,sCAMdlI,KAAKwI,MAAM4B,QAAQC,KAAnB,+B,GAhK4CW,aCgarCsZ,G,iLAxZP,OACI,yBAAKjb,UAAU,WAIX,yBAAKA,UAAU,8BAA8Bkb,aAAW,QAAQhb,GAAG,cAC/D,yBAAKF,UAAU,gBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,YAAW,0BAAMA,UAAU,mBAA1C,QAAuE,uCAAvE,MACA,yBAAKA,UAAU,cACX,gEACA,uGAEJ,yBAAKA,UAAU,aACX,yBAAKA,UAAU,cACX,uBAAGM,KAAK,IAAIN,UAAU,0BAAtB,OACA,4BAAQA,UAAU,2CAAlB,WAMpB,kBAAC,IAAD,CAAQmb,SAAS,kBAKb,oCACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOd,KAAK,yBAAyBC,OAAK,EAACC,UAAWG,KACtD,kBAAC,IAAD,CAAOL,KAAK,kBAAkBC,OAAK,EAACC,UAAWM,KAC/C,kBAAC,IAAD,CAAOR,KAAK,IAAIC,OAAK,EAACC,UAAWrb,IACjC,kBAAC,IAAD,CAAOmb,KAAK,kBAAkBE,UAAWrb,IACzC,kBAAC,IAAD,CAAOmb,KAAK,kCAAkCC,OAAK,EAACC,UAAWO,KAE/D,yBAAK9a,UAAU,8DAGX,yBAAKA,UAAU,gBAEX,wBAAIA,UAAU,uCACV,wBAAIA,UAAU,WACV,uBAAGM,KAAK,cAAR,QACA,uBAAGA,KAAK,IAAIN,UAAU,0BAK1B,4BAAI,uBAAGM,KAAK,KAAI,0BAAMN,UAAU,KAA5B,MAGJ,wBAAIA,UAAU,UACT,uBAAGM,KAAK,WAAU,0BAAMN,UAAU,mBAAlC,IAA2D,0BAAMA,UAAU,WAAhB,UA6BhE,wBAAIA,UAAU,eACV,uBAAGM,KAAK,IAAG,0BAAMN,UAAU,gBAA3B,IAAiD,0BAAMA,UAAU,WAAhB,iBACjD,4BAEI,wBAAIA,UAAU,IACV,uBAAGM,KAAK,0BAAyB,0BAAMN,UAAU,KAAjD,cAIJ,4BAAI,uBAAGM,KAAK,wBAAuB,0BAAMN,UAAU,KAA/C,YACJ,4BAAI,uBAAGM,KAAK,qBAAoB,0BAAMN,UAAU,KAA5C,sBACJ,4BAAI,uBAAGM,KAAK,wBAAuB,0BAAMN,UAAU,KAA/C,cAKZ,wBAAIA,UAAU,eACV,uBAAGM,KAAK,KAAI,0BAAMN,UAAU,eAA5B,IAAiD,0BAAMA,UAAU,WAAhB,UACjD,wBAAIA,UAAU,aAEV,wBAAIA,UAAU,eACV,uBAAGM,KAAK,KAAI,0BAAMN,UAAU,kBAA5B,SACA,4BACI,4BAAI,uBAAGM,KAAK,cAAa,0BAAMN,UAAU,KAArC,cACJ,4BAAI,uBAAGM,KAAK,eAAc,0BAAMN,UAAU,KAAtC,gBAIZ,wBAAIA,UAAU,eACV,uBAAGM,KAAK,KAAI,0BAAMN,UAAU,kBAA5B,SACA,4BACI,4BAAI,uBAAGM,KAAK,cAAa,0BAAMN,UAAU,KAArC,cACJ,4BAAI,uBAAGM,KAAK,eAAc,0BAAMN,UAAU,KAAtC,gBAIZ,wBAAIA,UAAU,eACV,uBAAGM,KAAK,KAAI,0BAAMN,UAAU,kBAA5B,aACA,4BACI,4BAAI,uBAAGM,KAAK,kBAAiB,0BAAMN,UAAU,KAAzC,kBACJ,4BAAI,uBAAGM,KAAK,2BAA0B,0BAAMN,UAAU,KAAlD,oBAGZ,wBAAIA,UAAU,eACV,uBAAGM,KAAK,KAAI,0BAAMN,UAAU,kBAA5B,YACA,4BACI,4BAAI,uBAAGM,KAAK,iBAAgB,0BAAMN,UAAU,KAAxC,iBACJ,4BAAI,uBAAGM,KAAK,0BAAyB,0BAAMN,UAAU,KAAjD,mBAGZ,wBAAIA,UAAU,eACV,uBAAGM,KAAK,KAAI,0BAAMN,UAAU,kBAA5B,aACA,4BACI,4BAAI,uBAAGM,KAAK,kBAAiB,0BAAMN,UAAU,KAAzC,kBACJ,4BAAI,uBAAGM,KAAK,2BAA0B,0BAAMN,UAAU,KAAlD,oBAGZ,wBAAIA,UAAU,eACV,uBAAGM,KAAK,KAAI,0BAAMN,UAAU,kBAA5B,eACA,4BACI,4BAAI,uBAAGM,KAAK,oBAAmB,0BAAMN,UAAU,KAA3C,oBACJ,4BAAI,uBAAGM,KAAK,6BAA4B,0BAAMN,UAAU,KAApD,sBAGZ,wBAAIA,UAAU,eACV,uBAAGM,KAAK,KAAI,0BAAMN,UAAU,kBAA5B,oBACA,4BACI,4BAAI,uBAAGM,KAAK,wBAAuB,0BAAMN,UAAU,KAA/C,yBACJ,4BAAI,uBAAGM,KAAK,iCAAgC,0BAAMN,UAAU,KAAxD,2BAGZ,wBAAIA,UAAU,eACV,uBAAGM,KAAK,KAAI,0BAAMN,UAAU,kBAA5B,oBACA,4BACI,4BAAI,uBAAGM,KAAK,wBAAuB,0BAAMN,UAAU,KAA/C,yBACJ,4BAAI,uBAAGM,KAAK,oCAAmC,0BAAMN,UAAU,KAA3D,2BAIZ,wBAAIA,UAAU,eACV,uBAAGM,KAAK,KAAI,0BAAMN,UAAU,kBAA5B,WACA,4BACI,4BAAI,uBAAGM,KAAK,gBAAe,0BAAMN,UAAU,KAAvC,gBACJ,4BAAI,uBAAGM,KAAK,kBAAiB,0BAAMN,UAAU,KAAzC,kBAIZ,wBAAIA,UAAU,eACV,uBAAGM,KAAK,KAAI,0BAAMN,UAAU,kBAA5B,gBACA,4BACI,4BAAI,uBAAGM,KAAK,oBAAmB,0BAAMN,UAAU,KAA3C,qBACJ,4BAAI,uBAAGM,KAAK,sBAAqB,0BAAMN,UAAU,KAA7C,uBAGZ,wBAAIA,UAAU,eACV,uBAAGM,KAAK,KAAI,0BAAMN,UAAU,kBAA5B,iBACA,4BACI,4BAAI,uBAAGM,KAAK,sBAAqB,0BAAMN,UAAU,KAA7C,sBACJ,4BAAI,uBAAGM,KAAK,wBAAuB,0BAAMN,UAAU,KAA/C,wBAIZ,wBAAIA,UAAU,eACV,uBAAGM,KAAK,KAAI,0BAAMN,UAAU,kBAA5B,WACA,4BACI,4BAAI,uBAAGM,KAAK,wBAAuB,0BAAMN,UAAU,KAA/C,kBAIZ,wBAAIA,UAAU,eACV,uBAAGM,KAAK,KAAI,0BAAMN,UAAU,kBAA5B,cACA,4BAEI,4BAAI,uBAAGM,KAAK,kBAAiB,0BAAMN,UAAU,KAAzC,mBACJ,4BAAI,uBAAGM,KAAK,2BAA0B,0BAAMN,UAAU,KAAlD,yBA4E5B,yBAAKA,UAAU,gBAEX,wBAAIA,UAAU,2DAEV,wBAAIA,UAAU,kBACV,uBAAGM,KAAK,IAAIN,UAAU,yBAAwB,0BAAMA,UAAU,mBAWlE,wBAAIA,UAAU,6BACV,uBAAGM,KAAK,GAAGN,UAAU,aAAaob,WAAS,eAAc,0BAAMpb,UAAU,qBAI7E,wBAAIA,UAAU,6BACV,uBAAGM,KAAK,KAAI,0BAAMN,UAAU,gBAI5B,yBAAKA,UAAU,iFACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,cAAcqb,IAAI,kBAAkBC,IAAI,cAE3D,yBAAKtb,UAAU,gBACX,yBAAKA,UAAU,qBAAf,OACA,yBAAKA,UAAU,sBAAf,cACA,yBAAKA,UAAU,sBAAqB,yCACpC,yBAAKA,UAAU,sBAAqB,mCAAQ,0BAAMA,UAAU,kBAahF,wBAAImE,MAAM,6BACN,uBAAG7D,KAAK,oBAAoB0N,MAAM,mBAAkB,0BAAM7J,MAAM,cAAhE,IAAoF,0BAAMA,MAAM,cAEpG,wBAAInE,UAAU,oCACV,uBAAGM,KAAK,IAAIN,UAAU,cAAc,0BAAMA,UAAU,IAAhB,cAApC,IAAyE,0BAAMA,UAAU,iCAGzF,yBAAKA,UAAU,iFAOX,yBAAKA,UAAU,yCACX,uBAAGA,UAAU,kBAAkBM,KAAK,KAChC,sDAMJ,uBAAGN,UAAU,kBAAkBM,KAAK,KAChC,uDAMJ,uBAAGN,UAAU,kBAAkBM,KAAK,KAChC,qDAGJ,uBAAGN,UAAU,kBAAkBM,KAAK,KAChC,oEAoBpB,kBAAC,IAAD,CAAO+Z,KAAK,IAAIG,OAAQ,SAACrb,GAAD,OAAW,kBAAC,GAAWA,gB,GA1X7DwC,aCAP4Z,OATf,WAEE,OACE,yBAAKvb,UAAU,OACb,kBAAC,GAAD,QCCAwb,GAAcC,QACW,cAA7B/lB,OAAO8P,SAASkW,UAEe,UAA7BhmB,OAAO8P,SAASkW,UAEhBhmB,OAAO8P,SAASkW,SAASvb,MACvB,2DAsCN,SAASwb,GAAgBC,EAAO3e,GAC9Bf,UAAU2f,cACPC,SAASF,GACTjb,MAAK,SAAAob,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7c,QACflD,UAAU2f,cAAcO,YAI1B3hB,QAAQC,IACN,iHAKEuC,GAAUA,EAAOof,UACnBpf,EAAOof,SAASN,KAMlBthB,QAAQC,IAAI,sCAGRuC,GAAUA,EAAOqf,WACnBrf,EAAOqf,UAAUP,WAO5B9a,OAAM,SAAAnB,GACLrF,QAAQqF,MAAM,4CAA6CA,MCzFjEyc,IAAS/B,OAAO,kBAAC,GAAD,MAAS/kB,SAAS+mB,eAAe,SDe1C,SAAkBvf,GACvB,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIugB,IAAIC,iBAAwBhnB,OAAO8P,SAASlF,MACpDqc,SAAWjnB,OAAO8P,SAASmX,OAIvC,OAGFjnB,OAAOknB,iBAAiB,QAAQ,WAC9B,IAAMhB,EAAK,UAAMc,iBAAN,sBAEPlB,KAgEV,SAAiCI,EAAO3e,GAEtC4f,MAAMjB,EAAO,CACX1e,QAAS,CAAE,iBAAkB,YAE5ByD,MAAK,SAAAC,GAEJ,IAAMkc,EAAclc,EAAS1D,QAAQ+B,IAAI,gBAEnB,MAApB2B,EAASM,QACO,MAAf4b,IAA8D,IAAvCA,EAAYC,QAAQ,cAG5C7gB,UAAU2f,cAAc7kB,MAAM2J,MAAK,SAAAob,GACjCA,EAAaiB,aAAarc,MAAK,WAC7BjL,OAAO8P,SAASC,eAKpBkW,GAAgBC,EAAO3e,MAG1BgE,OAAM,WACLxG,QAAQC,IACN,oEAvFAuiB,CAAwBrB,EAAO3e,GAI/Bf,UAAU2f,cAAc7kB,MAAM2J,MAAK,WACjClG,QAAQC,IACN,iHAMJihB,GAAgBC,EAAO3e,OCrC/B4e,I","file":"static/js/main.ffc6011d.chunk.js","sourcesContent":["import $ from 'jquery';\r\n//const $ = window.$;\r\n$(document).ready(function(){        \r\n    \r\n    /* PROGGRESS START */\r\n    // $.mpb(\"show\",{value: [0,50],speed: 5});        \r\n    /* END PROGGRESS START */\r\n    \r\n    var html_click_avail = true;\r\n    \r\n    $(\"html\").on(\"click\", function(){\r\n        if(html_click_avail)\r\n            $(\".x-navigation-horizontal li,.x-navigation-minimized li\").removeClass('active');        \r\n    });        \r\n    \r\n    $(\".x-navigation-horizontal .panel\").on(\"click\",function(e){\r\n        e.stopPropagation();\r\n    });    \r\n    \r\n    /* WIDGETS (DEMO)*/\r\n    $(\".widget-remove\").on(\"click\",function(){\r\n        $(this).parents(\".widget\").fadeOut(400,function(){\r\n            $(this).remove();\r\n            $(\"body > .tooltip\").remove();\r\n        });\r\n        return false;\r\n    });\r\n    /* END WIDGETS */\r\n    \r\n    /* Gallery Items */\r\n    $(\".gallery-item .iCheck-helper\").on(\"click\",function(){\r\n        var wr = $(this).parent(\"div\");\r\n        if(wr.hasClass(\"checked\")){\r\n            $(this).parents(\".gallery-item\").addClass(\"active\");\r\n        }else{            \r\n            $(this).parents(\".gallery-item\").removeClass(\"active\");\r\n        }\r\n    });\r\n    $(\".gallery-item-remove\").on(\"click\",function(){\r\n        $(this).parents(\".gallery-item\").fadeOut(400,function(){\r\n            $(this).remove();\r\n        });\r\n        return false;\r\n    });\r\n    $(\"#gallery-toggle-items\").on(\"click\",function(){\r\n        \r\n        $(\".gallery-item\").each(function(){\r\n            \r\n            var wr = $(this).find(\".iCheck-helper\").parent(\"div\");\r\n            \r\n            if(wr.hasClass(\"checked\")){\r\n                $(this).removeClass(\"active\");\r\n                wr.removeClass(\"checked\");\r\n                wr.find(\"input\").prop(\"checked\",false);\r\n            }else{            \r\n                $(this).addClass(\"active\");\r\n                wr.addClass(\"checked\");\r\n                wr.find(\"input\").prop(\"checked\",true);\r\n            }\r\n            \r\n        });\r\n        \r\n    });\r\n    /* END Gallery Items */\r\n\r\n    // XN PANEL DRAGGING\r\n    // $( \".xn-panel-dragging\" ).draggable({\r\n    //     containment: \".page-content\", handle: \".panel-heading\", scroll: false,\r\n    //     start: function(event,ui){\r\n    //         html_click_avail = false;\r\n    //         $(this).addClass(\"dragged\");\r\n    //     },\r\n    //     stop: function( event, ui ) {\r\n    //         $(this).resizable({\r\n    //             maxHeight: 400,\r\n    //             maxWidth: 600,\r\n    //             minHeight: 200,\r\n    //             minWidth: 200,\r\n    //             helper: \"resizable-helper\",\r\n    //             start: function( event, ui ) {\r\n    //                 html_click_avail = false;\r\n    //             },\r\n    //             stop: function( event, ui ) {\r\n    //                 $(this).find(\".panel-body\").height(ui.size.height - 82);\r\n    //                 $(this).find(\".scroll\").mCustomScrollbar(\"update\");\r\n                                            \r\n    //                 setTimeout(function(){\r\n    //                     html_click_avail = true; \r\n    //                 },1000);\r\n                                            \r\n    //             }\r\n    //         })\r\n            \r\n    //         setTimeout(function(){\r\n    //             html_click_avail = true; \r\n    //         },1000);            \r\n    //     }\r\n    // });\r\n    // END XN PANEL DRAGGING\r\n    \r\n    /* DROPDOWN TOGGLE */\r\n    $(\".dropdown-toggle\").on(\"click\",function(){\r\n        onresize();\r\n    });\r\n    /* DROPDOWN TOGGLE */\r\n    \r\n    /* MESSAGE BOX */\r\n    $(\".mb-control\").on(\"click\",function(){\r\n        var box = $($(this).data(\"box\"));\r\n        if(box.length > 0){\r\n            box.toggleClass(\"open\");\r\n            \r\n            var sound = box.data(\"sound\");\r\n            \r\n            if(sound === 'alert')\r\n                playAudio('alert');\r\n            \r\n            if(sound === 'fail')\r\n                playAudio('fail');\r\n            \r\n        }        \r\n        return false;\r\n    });\r\n    $(\".mb-control-close\").on(\"click\",function(){\r\n       $(this).parents(\".message-box\").removeClass(\"open\");\r\n       return false;\r\n    });    \r\n    /* END MESSAGE BOX */\r\n    \r\n    /* CONTENT FRAME */\r\n    $(\".content-frame-left-toggle\").on(\"click\",function(){\r\n        $(\".content-frame-left\").is(\":visible\") \r\n        ? $(\".content-frame-left\").hide() \r\n        : $(\".content-frame-left\").show();\r\n        page_content_onresize();\r\n    });\r\n    $(\".content-frame-right-toggle\").on(\"click\",function(){\r\n        $(\".content-frame-right\").is(\":visible\") \r\n        ? $(\".content-frame-right\").hide() \r\n        : $(\".content-frame-right\").show();\r\n        page_content_onresize();\r\n    });    \r\n    /* END CONTENT FRAME */\r\n    \r\n    /* MAILBOX */\r\n    $(\".mail .mail-star\").on(\"click\",function(){\r\n        $(this).toggleClass(\"starred\");\r\n    });\r\n    \r\n    $(\".mail-checkall .iCheck-helper\").on(\"click\",function(){\r\n        \r\n        var prop = $(this).prev(\"input\").prop(\"checked\");\r\n                    \r\n        $(\".mail .mail-item\").each(function(){            \r\n            var cl = $(this).find(\".mail-checkbox > div\");            \r\n            cl.toggleClass(\"checked\",prop).find(\"input\").prop(\"checked\",prop);                        \r\n        }); \r\n        \r\n    });\r\n    /* END MAILBOX */\r\n    \r\n    /* PANELS */\r\n    \r\n    $(\".panel-fullscreen\").on(\"click\",function(){\r\n        panel_fullscreen($(this).parents(\".panel\"));\r\n        return false;\r\n    });\r\n    \r\n    $(\".panel-collapse\").on(\"click\",function(){\r\n        panel_collapse($(this).parents(\".panel\"));\r\n        $(this).parents(\".dropdown\").removeClass(\"open\");\r\n        return false;\r\n    });    \r\n    $(\".panel-remove\").on(\"click\",function(){\r\n        panel_remove($(this).parents(\".panel\"));\r\n        $(this).parents(\".dropdown\").removeClass(\"open\");\r\n        return false;\r\n    });\r\n    $(\".panel-refresh\").on(\"click\",function(){\r\n        var panel = $(this).parents(\".panel\");\r\n        panel_refresh(panel);\r\n\r\n        setTimeout(function(){\r\n            panel_refresh(panel);\r\n        },3000);\r\n        \r\n        $(this).parents(\".dropdown\").removeClass(\"open\");\r\n        return false;\r\n    });\r\n    /* EOF PANELS */\r\n    \r\n    /* ACCORDION */\r\n    $(\".accordion .panel-title a\").on(\"click\",function(){\r\n        \r\n        var blockOpen = $(this).attr(\"href\");\r\n        var accordion = $(this).parents(\".accordion\");        \r\n        var noCollapse = accordion.hasClass(\"accordion-dc\");\r\n        \r\n        \r\n        if($(blockOpen).length > 0){            \r\n            \r\n            if($(blockOpen).hasClass(\"panel-body-open\")){\r\n                $(blockOpen).slideUp(200,function(){\r\n                    $(this).removeClass(\"panel-body-open\");\r\n                });\r\n            }else{\r\n                $(blockOpen).slideDown(200,function(){\r\n                    $(this).addClass(\"panel-body-open\");\r\n                });\r\n            }\r\n            \r\n            if(!noCollapse){\r\n                accordion.find(\".panel-body-open\").not(blockOpen).slideUp(200,function(){\r\n                    $(this).removeClass(\"panel-body-open\");\r\n                });                                           \r\n            }\r\n            \r\n            return false;\r\n        }\r\n        \r\n    });\r\n    /* EOF ACCORDION */\r\n    \r\n    /* DATATABLES/CONTENT HEIGHT FIX */\r\n    $(\".dataTables_length select\").on(\"change\",function(){\r\n        onresize();\r\n    });\r\n    /* END DATATABLES/CONTENT HEIGHT FIX */\r\n    \r\n    /* TOGGLE FUNCTION */\r\n    $(\".toggle\").on(\"click\",function(){\r\n        var elm = $(\"#\"+$(this).data(\"toggle\"));\r\n        if(elm.is(\":visible\"))\r\n            elm.addClass(\"hidden\").removeClass(\"show\");\r\n        else\r\n            elm.addClass(\"show\").removeClass(\"hidden\");\r\n        \r\n        return false;\r\n    });\r\n    /* END TOGGLE FUNCTION */\r\n    \r\n    /* MESSAGES LOADING */\r\n    $(\".messages .item\").each(function(index){\r\n        var elm = $(this);\r\n        setInterval(function(){\r\n            elm.addClass(\"item-visible\");\r\n        },index*300);              \r\n    });\r\n    /* END MESSAGES LOADING */\r\n    \r\n    x_navigation();\r\n});\r\n\r\n$(function(){            \r\n    onload();\r\n\r\n    /* PROGGRESS COMPLETE */\r\n    // $.mpb(\"update\",{value: 100, speed: 5, complete: function(){            \r\n    //     $(\".mpb\").fadeOut(200,function(){\r\n    //         $(this).remove();\r\n    //     });\r\n    // }});\r\n    /* END PROGGRESS COMPLETE */\r\n});\r\n\r\n$(window).resize(function(){\r\n    x_navigation_onresize();\r\n    page_content_onresize();\r\n});\r\n\r\nfunction onload(){\r\n    x_navigation_onresize();    \r\n    page_content_onresize();\r\n}\r\n\r\nfunction page_content_onresize(){\r\n    $(\".page-content,.content-frame-body,.content-frame-right,.content-frame-left\").css(\"width\",\"\").css(\"height\",\"\");\r\n    \r\n    var content_minus = 0;\r\n    content_minus = ($(\".page-container-boxed\").length > 0) ? 40 : content_minus;\r\n    content_minus += ($(\".page-navigation-top-fixed\").length > 0) ? 50 : 0;\r\n    \r\n    var content = $(\".page-content\");\r\n    var sidebar = $(\".page-sidebar\");\r\n    \r\n    if(content.height() < $(document).height() - content_minus){        \r\n        content.height($(document).height() - content_minus);\r\n    }        \r\n    \r\n    if(sidebar.height() > content.height()){        \r\n        content.height(sidebar.height());\r\n    }\r\n    \r\n    if($(window).width() > 1024){\r\n        \r\n        if($(\".page-sidebar\").hasClass(\"scroll\")){\r\n            if($(\"body\").hasClass(\"page-container-boxed\")){\r\n                var doc_height = $(document).height() - 40;\r\n            }else{\r\n                var doc_height = $(window).height();\r\n            }\r\n           $(\".page-sidebar\").height(doc_height);\r\n           \r\n       }\r\n       \r\n        if($(\".content-frame-body\").height() < $(document).height()-162){\r\n            $(\".content-frame-body,.content-frame-right,.content-frame-left\").height($(document).height()-162);            \r\n        }else{\r\n            $(\".content-frame-right,.content-frame-left\").height($(\".content-frame-body\").height());\r\n        }\r\n        \r\n        $(\".content-frame-left\").show();\r\n        $(\".content-frame-right\").show();\r\n    }else{\r\n        $(\".content-frame-body\").height($(\".content-frame\").height()-80);\r\n        \r\n        if($(\".page-sidebar\").hasClass(\"scroll\"))\r\n           $(\".page-sidebar\").css(\"height\",\"\");\r\n    }\r\n    \r\n    if($(window).width() < 1200){\r\n        if($(\"body\").hasClass(\"page-container-boxed\")){\r\n            $(\"body\").removeClass(\"page-container-boxed\").data(\"boxed\",\"1\");\r\n        }\r\n    }else{\r\n        if($(\"body\").data(\"boxed\") === \"1\"){\r\n            $(\"body\").addClass(\"page-container-boxed\").data(\"boxed\",\"\");\r\n        }\r\n    }\r\n}\r\n\r\n/* PANEL FUNCTIONS */\r\nfunction panel_fullscreen(panel){    \r\n    \r\n    if(panel.hasClass(\"panel-fullscreened\")){\r\n        panel.removeClass(\"panel-fullscreened\").unwrap();\r\n        panel.find(\".panel-body,.chart-holder\").css(\"height\",\"\");\r\n        panel.find(\".panel-fullscreen .fa\").removeClass(\"fa-compress\").addClass(\"fa-expand\");        \r\n        \r\n        $(window).resize();\r\n    }else{\r\n        var head    = panel.find(\".panel-heading\");\r\n        var body    = panel.find(\".panel-body\");\r\n        var footer  = panel.find(\".panel-footer\");\r\n        var hplus   = 30;\r\n        \r\n        if(body.hasClass(\"panel-body-table\") || body.hasClass(\"padding-0\")){\r\n            hplus = 0;\r\n        }\r\n        if(head.length > 0){\r\n            hplus += head.height()+21;\r\n        } \r\n        if(footer.length > 0){\r\n            hplus += footer.height()+21;\r\n        } \r\n\r\n        panel.find(\".panel-body,.chart-holder\").height($(window).height() - hplus);\r\n        \r\n        \r\n        panel.addClass(\"panel-fullscreened\").wrap('<div class=\"panel-fullscreen-wrap\"></div>');        \r\n        panel.find(\".panel-fullscreen .fa\").removeClass(\"fa-expand\").addClass(\"fa-compress\");\r\n        \r\n        $(window).resize();\r\n    }\r\n}\r\n\r\nfunction panel_collapse(panel,action,callback){\r\n\r\n    if(panel.hasClass(\"panel-toggled\")){        \r\n        panel.removeClass(\"panel-toggled\");\r\n        \r\n        panel.find(\".panel-collapse .fa-angle-up\").removeClass(\"fa-angle-up\").addClass(\"fa-angle-down\");\r\n\r\n        if(action && action === \"shown\" && typeof callback === \"function\")\r\n            callback();            \r\n\r\n        onload();\r\n                \r\n    }else{\r\n        panel.addClass(\"panel-toggled\");\r\n                \r\n        panel.find(\".panel-collapse .fa-angle-down\").removeClass(\"fa-angle-down\").addClass(\"fa-angle-up\");\r\n\r\n        if(action && action === \"hidden\" && typeof callback === \"function\")\r\n            callback();\r\n\r\n        onload();        \r\n        \r\n    }\r\n}\r\nfunction panel_refresh(panel,action,callback){        \r\n    if(!panel.hasClass(\"panel-refreshing\")){\r\n        panel.append('<div class=\"panel-refresh-layer\"><img src=\"img/loaders/default.gif\"/></div>');\r\n        panel.find(\".panel-refresh-layer\").width(panel.width()).height(panel.height());\r\n        panel.addClass(\"panel-refreshing\");\r\n        \r\n        if(action && action === \"shown\" && typeof callback === \"function\") \r\n            callback();\r\n    }else{\r\n        panel.find(\".panel-refresh-layer\").remove();\r\n        panel.removeClass(\"panel-refreshing\");\r\n        \r\n        if(action && action === \"hidden\" && typeof callback === \"function\") \r\n            callback();        \r\n    }       \r\n    onload();\r\n}\r\nfunction panel_remove(panel,action,callback){    \r\n    if(action && action === \"before\" && typeof callback === \"function\") \r\n        callback();\r\n    \r\n    panel.animate({'opacity':0},200,function(){\r\n        panel.parent(\".panel-fullscreen-wrap\").remove();\r\n        $(this).remove();        \r\n        if(action && action === \"after\" && typeof callback === \"function\") \r\n            callback();\r\n        \r\n        \r\n        onload();\r\n    });    \r\n}\r\n/* EOF PANEL FUNCTIONS */\r\n\r\n/* X-NAVIGATION CONTROL FUNCTIONS */\r\nfunction x_navigation_onresize(){    \r\n    \r\n    var inner_port = window.innerWidth || $(document).width();\r\n    \r\n    if(inner_port < 1025){               \r\n        $(\".page-sidebar .x-navigation\").removeClass(\"x-navigation-minimized\");\r\n        $(\".page-container\").removeClass(\"page-container-wide\");\r\n        $(\".page-sidebar .x-navigation li.active\").removeClass(\"active\");\r\n        \r\n                \r\n        $(\".x-navigation-horizontal\").each(function(){            \r\n            if(!$(this).hasClass(\"x-navigation-panel\")){                \r\n                $(\".x-navigation-horizontal\").addClass(\"x-navigation-h-holder\").removeClass(\"x-navigation-horizontal\");\r\n            }\r\n        });\r\n        \r\n        \r\n    }else{        \r\n        if($(\".page-navigation-toggled\").length > 0){\r\n            x_navigation_minimize(\"close\");\r\n        }       \r\n        \r\n        $(\".x-navigation-h-holder\").addClass(\"x-navigation-horizontal\").removeClass(\"x-navigation-h-holder\");                \r\n    }\r\n    \r\n}\r\n\r\nfunction x_navigation_minimize(action){\r\n    \r\n    if(action == 'open'){\r\n        $(\".page-container\").removeClass(\"page-container-wide\");\r\n        $(\".page-sidebar .x-navigation\").removeClass(\"x-navigation-minimized\");\r\n        $(\".x-navigation-minimize\").find(\".fa\").removeClass(\"fa-indent\").addClass(\"fa-dedent\");\r\n     //   $(\".page-sidebar.scroll\").mCustomScrollbar(\"update\");\r\n    }\r\n    \r\n    if(action == 'close'){\r\n        $(\".page-container\").addClass(\"page-container-wide\");\r\n        $(\".page-sidebar .x-navigation\").addClass(\"x-navigation-minimized\");\r\n        $(\".x-navigation-minimize\").find(\".fa\").removeClass(\"fa-dedent\").addClass(\"fa-indent\");\r\n        // $(\".page-sidebar.scroll\").mCustomScrollbar(\"disable\",true);\r\n    }\r\n    \r\n    $(\".x-navigation li.active\").removeClass(\"active\");\r\n    \r\n}\r\n\r\nfunction x_navigation(){\r\n    \r\n    $(\".x-navigation-control\").click(function(){\r\n        $(this).parents(\".x-navigation\").toggleClass(\"x-navigation-open\");\r\n        \r\n        onresize();\r\n        \r\n        return false;\r\n    });\r\n\r\n    if($(\".page-navigation-toggled\").length > 0){\r\n        x_navigation_minimize(\"close\");\r\n    }    \r\n    \r\n    $(\".x-navigation-minimize\").click(function(){\r\n                \r\n        if($(\".page-sidebar .x-navigation\").hasClass(\"x-navigation-minimized\")){\r\n            $(\".page-container\").removeClass(\"page-navigation-toggled\");\r\n            x_navigation_minimize(\"open\");\r\n        }else{            \r\n            $(\".page-container\").addClass(\"page-navigation-toggled\");\r\n            x_navigation_minimize(\"close\");            \r\n        }\r\n        \r\n        onresize();\r\n        \r\n        return false;        \r\n    });\r\n       \r\n    $(\".x-navigation  li > a\").click(function(){\r\n        \r\n        var li = $(this).parent('li');        \r\n        var ul = li.parent(\"ul\");\r\n        \r\n        ul.find(\" > li\").not(li).removeClass(\"active\");    \r\n        \r\n    });\r\n    \r\n    $(\".x-navigation li\").click(function(event){\r\n        event.stopPropagation();\r\n        \r\n        var li = $(this);\r\n                \r\n            if(li.children(\"ul\").length > 0 || li.children(\".panel\").length > 0 || $(this).hasClass(\"xn-profile\") > 0){\r\n                if(li.hasClass(\"active\")){\r\n                    li.removeClass(\"active\");\r\n                    li.find(\"li.active\").removeClass(\"active\");\r\n                }else\r\n                    li.addClass(\"active\");\r\n                    \r\n                onresize();\r\n                \r\n                if($(this).hasClass(\"xn-profile\") > 0)\r\n                    return true;\r\n                else\r\n                    return false;\r\n            }                                     \r\n    });\r\n    \r\n    /* XN-SEARCH */\r\n    $(\".xn-search\").on(\"click\",function(){\r\n        $(this).find(\"input\").focus();\r\n    })\r\n    /* END XN-SEARCH */\r\n    \r\n}\r\n/* EOF X-NAVIGATION CONTROL FUNCTIONS */\r\n\r\n/* PAGE ON RESIZE WITH TIMEOUT */\r\nfunction onresize(timeout){    \r\n    timeout = timeout ? timeout : 200;\r\n\r\n    setTimeout(function(){\r\n        page_content_onresize();\r\n    },timeout);\r\n}\r\n/* EOF PAGE ON RESIZE WITH TIMEOUT */\r\n\r\n/* PLAY SOUND FUNCTION */\r\nfunction playAudio(file){\r\n    /*if(file === 'alert')\r\n        document.getElementById('audio-alert').play();\r\n\r\n    if(file === 'fail')\r\n        document.getElementById('audio-fail').play(); */   \r\n}\r\n/* END PLAY SOUND FUNCTION */\r\n\r\n/* NEW OBJECT(GET SIZE OF ARRAY) */\r\nObject.size = function(obj) {\r\n    var size = 0, key;\r\n    for (key in obj) {\r\n        if (obj.hasOwnProperty(key)) size++;\r\n    }\r\n    return size;\r\n};\r\n/* EOF NEW OBJECT(GET SIZE OF ARRAY) */","import React from \"react\";\n\nfunction ErrorComponent() {\n    return (\n        <div></div>\n    )\n}\n\nexport default ErrorComponent","import $ from 'jquery';\nimport 'jquery-validation';\n\n\n\n$.validator.addMethod('emailId', function (value, element) {\n\n    return this.optional(element) || /^[\\w][\\w.-]{0,127}$/.test(value)\n  \n  }, \"Please enter a valid Docker image tag, like 'latest' or '1.10.0'\");\n\n  $.validator.addMethod( \"lettersonly\", function( value, element ) {\n    return this.optional( element ) || /^[a-z]+$/i.test( value );\n  }, \"Letters only please\" );\n\n  $.validator.addMethod( \"integer\", function( value, element ) {\n    return this.optional( element ) || /^-?\\d+$/.test( value );\n  }, \"A positive or negative non-decimal number please\" );\n\n  $.validator.addMethod( \"lettersonlywhitespace\", function( value, element ) {\n    return this.optional( element ) || /^[a-zA-Z\\s]*$/.test( value );\n  }, \"Letters or whitespace only please\" );\n\n  $.validator.addMethod( \"lettersonlyspecialchar\", function( value, element ) {\n    return this.optional( element ) || /^\\D+$/.test( value );\n  }, \"Letters or special character  only please\" );\n  \n  $.validator.addMethod( \"positiveintegerdecimal\", function( value, element ) {\n    return this.optional( element ) || /^[+]?([0-9]+(?:[\\.][0-9]*)?|\\.[0-9]+)$/.test( value );\n  }, \"Positive integer or decimal number please\" );","//export const API_URL = 'http://localhost:8081'\nexport const API_URL = 'http://fasp.altius.cc/FASP'\n\n// export const API_URL='http://localhost:8080/FASP'\n// export const API_URL='http://192.168.43.70:8080/FASP'\nexport const SECRET_KEY = 'afhghggrehreqiuhrjhjdbfjehgfuoerhfjhfyguayaegrf'\n","import axios from \"axios\"\nimport {API_URL} from '../Constants.js'\n\nclass LoginService {\n\n\n\n    authenticate(username, password) {\n        console.log(\"username---\"+username);\n        console.log(\"password---\"+password);\n        return axios.post(`${API_URL}/authenticate`,{username, password},{});\n    }\n\n    \n}\n\nexport default new LoginService()","import axios from 'axios'\nimport { Online } from \"react-detect-offline\";\nimport jwt_decode from 'jwt-decode'\nimport { API_URL } from '../../Constants.js'\nimport CryptoJS from 'crypto-js'\nimport { SECRET_KEY } from '../../Constants.js'\nimport bcrypt from 'bcryptjs';\n\nlet myDt;\nclass AuthenticationService {\n\n    isUserLoggedIn(username, password) {\n        var decryptedPassword = \"\";\n        for (var i = 0; i < localStorage.length; i++) {\n            var value = localStorage.getItem(localStorage.key(i));\n            let decryptedUsername = CryptoJS.AES.decrypt(value.toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8);\n            if (decryptedUsername == username) {\n                var key = localStorage.key(i).substring(9, 10);\n                localStorage.setItem(\"tempUser\",key);\n                decryptedPassword = CryptoJS.AES.decrypt(localStorage.getItem(\"password-\" + key).toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8);\n            }\n        }\n        return decryptedPassword;\n    }\n\n    getLoggedInUsername() {\n        let decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8);\n        let decryptedToken = CryptoJS.AES.decrypt(localStorage.getItem('token-' + decryptedCurUser).toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8)\n        var decoded = jwt_decode(decryptedToken);\n        return decoded.sub;\n    }\n\n    getLoggedInUserId() {\n        let decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8);\n        return decryptedCurUser;\n    }\n\n    getLanguageId() {\n        let decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8);\n        console.log(\"decryptedCurUser---\" + decryptedCurUser);\n        let decryptedToken = CryptoJS.AES.decrypt(localStorage.getItem('token-' + decryptedCurUser).toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8)\n        var decoded = jwt_decode(decryptedToken);\n        return decoded.user.language.languageId;\n    }\n\n    checkTypeOfSession() {\n        let typeOfSession = localStorage.getItem('typeOfSession');\n        console.log(\"typeofsession---\" + typeOfSession);\n        console.log(\"network----\" + navigator.onLine);\n        if ((typeOfSession === 'Online' && navigator.onLine) || (typeOfSession === 'Offline' && !navigator.onLine)) {\n            console.log(\"true\");\n            return true;\n        } else {\n            console.log(\"false\");\n            return false;\n\n\n\n        }\n    }\n\n    checkIfDifferentUserIsLoggedIn(newUsername) {\n        console.log(\"token username---\" + newUsername);\n        let usernameStored = localStorage.getItem('username');\n        console.log(\"usernameStored---\" + usernameStored);\n        if (usernameStored !== null && usernameStored !== \"\") {\n            var usernameDecrypted = CryptoJS.AES.decrypt(usernameStored, `${SECRET_KEY}`)\n            var originalText = usernameDecrypted.toString(CryptoJS.enc.Utf8);\n            console.log(\"usernameDecrypted---\" + originalText);\n            if (originalText !== newUsername) {\n                if (window.confirm(\"Are you sure you want to overrride already logged in user's details?\")) {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    checkIfTokenExpired() {\n        let decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8);\n        let decryptedToken = CryptoJS.AES.decrypt(localStorage.getItem('token-' + decryptedCurUser).toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8)\n        var decoded = jwt_decode(decryptedToken);\n        console.log(decoded);\n        let tokenExpiryTime = new Date(decoded.exp * 1000);\n        var curDate = new Date();\n        console.log(new Date(decoded.exp * 1000));\n        console.log(\"cur date---\" + curDate);\n\n        if (new Date(decoded.exp * 1000) > new Date()) {\n            console.log(\"Token not expired\");\n            return true;\n        } else {\n            console.log(\"Token expired\");\n            return false;\n        }\n    }\n\n    checkSessionTimeOut() {\n        let decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8);\n        let decryptedToken = CryptoJS.AES.decrypt(localStorage.getItem('token-' + decryptedCurUser).toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8)\n        var decoded = jwt_decode(decryptedToken);\n        console.log(\"decoded---\", decoded);\n        console.log(\"Session expires on---\" + decoded.user.sessionExpiresOn);\n        return decoded.user.sessionExpiresOn;\n    }\n\n    // refreshToken() {\n    //     let token = localStorage.getItem('token');\n    //     console.log(\"token---\" + token);\n    //     this.setupAxiosInterceptors();\n    //     return axios.get(`${API_URL}/refresh`, {}).then(response => {\n    //         console.log(\"response----------------\", response)\n    //     }).catch(\n    //         error => {\n    //             console.log(\"error----------\", error);\n    //         })\n    // }\n\n    setupAxiosInterceptors() {\n        console.log(localStorage.getItem('curUser'));\n        let decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8);\n        let decryptedToken = CryptoJS.AES.decrypt(localStorage.getItem('token-' + decryptedCurUser).toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8)\n        let basicAuthHeader = 'Bearer ' + decryptedToken\n        console.log(\"headers=\" + basicAuthHeader);\n        axios.interceptors.request.use(\n            // if (this.isUserLoggedIn) {\n            (config) => {\n                config.headers.authorization = basicAuthHeader\n                return config;\n            }\n            // }\n        )\n\n    }\n    storeTokenInIndexedDb(token, decodedObj) {\n        let userObj = {\n            token: token,\n            typeOfSession: \"Online\",\n            userId: decodedObj.userId\n        }\n        let userId = {\n            userId: decodedObj.userId\n        }\n        if (!('indexedDB' in window)) {\n            alert('This browser does not support IndexedDB');\n        } else {\n            var db;\n            var customerObjectStore;\n            var openRequest = indexedDB.open('fasp', 1);\n\n            openRequest.onupgradeneeded = function (e) {\n                var db = e.target.result;\n                if (!db.objectStoreNames.contains('programData')) {\n                    customerObjectStore = db.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('lastSyncDate')) {\n                    customerObjectStore = db.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('language')) {\n                    customerObjectStore = db.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('country')) {\n                    customerObjectStore = db.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('currency')) {\n                    customerObjectStore = db.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('unit')) {\n                    customerObjectStore = db.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('unitType')) {\n                    customerObjectStore = db.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('organisation')) {\n                    customerObjectStore = db.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('healthArea')) {\n                    customerObjectStore = db.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('region')) {\n                    customerObjectStore = db.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('fundingSource')) {\n                    customerObjectStore = db.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('subFundingSource')) {\n                    customerObjectStore = db.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('product')) {\n                    customerObjectStore = db.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('productCategory')) {\n                    customerObjectStore = db.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('dataSource')) {\n                    customerObjectStore = db.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('dataSourceType')) {\n                    customerObjectStore = db.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('shipmentStatus')) {\n                    customerObjectStore = db.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('shipmentStatusAllowed')) {\n                    customerObjectStore = db.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('manufacturer')) {\n                    customerObjectStore = db.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('logisticsUnit')) {\n                    customerObjectStore = db.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('planningUnit')) {\n                    customerObjectStore = db.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n                }\n            }.bind(this);\n\n            openRequest.onsuccess = function (e) {\n                db = e.target.result;\n                var transaction = db.transaction(['user'], 'readwrite');\n                var user = transaction.objectStore('user');\n                var result;\n                result = user.delete(decodedObj.userId);\n\n                result.onsuccess = function (event) {\n                    result = user.add(userObj);\n                    result.onerror = function (event) {\n                    };\n\n                    result.onsuccess = function (event) {\n                    };\n                };\n                result.onerror = function (event) {\n                };\n\n\n                var transaction1 = db.transaction(['curuser'], 'readwrite');\n                var curuser = transaction1.objectStore('curuser');\n                result = curuser.clear();\n                result.onsuccess = function (event) {\n                    result = curuser.add(userId);\n                    result.onerror = function (event) {\n                    };\n\n                    result.onsuccess = function (event) {\n                    };\n                };\n                result.onerror = function (event) {\n                };\n\n            }.bind(this);\n\n        }\n    }\n    getLoggedInUserDetails() {\n        if (!('indexedDB' in window)) {\n            alert('This browser does not support IndexedDB');\n        } else {\n            var db;\n            var customerObjectStore;\n            var userObj = 0;\n            var openRequest = indexedDB.open('fasp', 1);\n\n            openRequest.onupgradeneeded = function (e) {\n                db = e.target.result;\n                if (!db.objectStoreNames.contains('user')) {\n                    customerObjectStore = db.createObjectStore('user', { keyPath: 'userId', autoIncrement: true });\n                    customerObjectStore.createIndex(\"userId\", \"userId\", { unique: true });\n                }\n                if (!db.objectStoreNames.contains('curuser')) {\n                    customerObjectStore = db.createObjectStore('curuser', { keyPath: 'userId' });\n                    customerObjectStore.createIndex(\"userId\", \"userId\", { unique: true });\n                }\n            }.bind(this);\n\n            openRequest.onsuccess = function (e) {\n                db = e.target.result;\n                var result;\n                var transaction1 = db.transaction(['curuser'], 'readwrite');\n                var curuser = transaction1.objectStore('curuser');\n                result = curuser.getAll();\n                result.onsuccess = function (event) {\n                    var user = db.transaction(['user'], 'readwrite').objectStore('user');\n                    result = user.get(result.result[0].userId);\n                    result.onerror = function (event) {\n                    };\n\n                    result.onsuccess = function (event) {\n                        userObj = result.result;\n                        console.log(\"userObj---\", userObj);\n                        return userObj;\n                    };\n                };\n                result.onerror = function (event) {\n                };\n\n            }.bind(this);\n\n        }\n        return userObj;\n    }\n\n}\n\n\nexport default new AuthenticationService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport LoginService from '../../api/LoginService'\nimport CryptoJS from 'crypto-js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\nimport bcrypt from 'bcryptjs';\nimport jwt_decode from 'jwt-decode'\nimport { SECRET_KEY } from '../../Constants.js'\nimport '../../Customui.css';\n\n\nexport default class LoginComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.loginClicked = this.loginClicked.bind(this);\n        this.forgotPassword = this.forgotPassword.bind(this);\n    }\n\n    componentDidMount() {\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                emailId: {\n                    required: true\n                },\n                password: {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n\n\n\n            <div className=\"login-section\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div className=\"login-main\">\n\n                            <div className=\"row\">\n                                <div className=\"col-md-6 col-md-offset-2\">\n                                    <div className=\"inp-Section\">\n\n                                        <form name=\"form1\" id=\"form1\">\n\n\n                                            <div className=\"form-group\">\n\n                                                <div className=\"col-md-8 text-center\">\n\n                                                    <p>{this.props.match.params.message}</p>\n\n                                                </div>\n                                            </div>\n                                            <div className=\"form-group\">\n\n                                                <div className=\"col-md-8\">\n\n                                                    <div className=\"input-group\">\n                                                        <span className=\"input-group-addon Inp-icon\"><span className=\"fa fa-envelope\"></span></span>\n                                                        <input type=\"text\" id=\"emailId\" name=\"emailId\" className=\"form-control Inp-login\"></input>\n                                                    </div>\n                                                    <span className=\"help-block\"></span>\n\n                                                </div>\n                                            </div>\n\n                                            <div className=\"form-group\">\n\n                                                <div className=\"col-md-8\">\n\n                                                    <div className=\"input-group Inp-pass\">\n                                                        <span className=\"input-group-addon Inp-icon\"><span className=\"fa fa-lock\"></span></span>\n                                                        <input type=\"password\" id=\"password\" name=\"password\" className=\"form-control Inp-login\"></input>\n                                                    </div>\n                                                    <span className=\"help-block\"></span>\n                                                </div>\n                                            </div>\n\n                                            {/* <div className=\"form-group\">\n\n                                                <div className=\"col-md-8\">\n                                                    <div className=\"Login-remember text-left\">\n                                                        <label className=\"check\">\n                                                            <input type=\"checkbox\" className=\"icheckbox\" checked=\"checked\" />Remember Me</label>\n                                                        <span className=\"help-block\"></span></div>\n                                                </div>\n                                            </div> */}\n\n                                            <div className=\"form-group\">\n\n                                                <div className=\"col-md-8\">\n                                                    <div className=\"Login-forgot text-left\">\n                                                        <Online><a href=\"\" onClick={this.forgotPassword}>Forgot Password?</a></Online>\n                                                        <div><h5>{this.state.message}</h5></div>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            <div className=\"form-group\">\n\n                                                <div className=\"col-md-8\">\n                                                    <div className=\"text-center Login-btnDiv\">\n                                                        <button type=\"button\" className=\" Login-btn\" onClick={this.loginClicked}><span>Login</span></button>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </form>\n\n                                    </div>\n\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n        )\n    }\n\n    loginClicked() {\n        var username = $(\"#emailId\").val();\n        var password = $(\"#password\").val();\n        if ($(\"#form1\").valid()) {\n            if (navigator.onLine) {\n                LoginService.authenticate(username, password)\n                    .then(response => {\n                        var decoded = jwt_decode(response.data.token);\n                        localStorage.setItem('token-' + decoded.userId, CryptoJS.AES.encrypt((response.data.token).toString(), `${SECRET_KEY}`));\n                        localStorage.setItem('username-' + decoded.userId, CryptoJS.AES.encrypt((decoded.user.username).toString(), `${SECRET_KEY}`));\n                        localStorage.setItem('password-' + decoded.userId, CryptoJS.AES.encrypt((decoded.user.password).toString(), `${SECRET_KEY}`));\n                        localStorage.setItem('typeOfSession', \"Online\");\n                        localStorage.setItem('curUser', CryptoJS.AES.encrypt((decoded.userId).toString(), `${SECRET_KEY}`));\n                        console.log(\"local storage length---\" + localStorage.length);\n\n                        AuthenticationService.setupAxiosInterceptors();\n                        this.props.history.push(`/welcome`)\n                    })\n                    .catch(\n                        error => {\n                            if (error.response != null && error.response.status === 401) {\n                                switch (error.response.data) {\n                                    case \"Password expired\":\n                                        this.setState({\n                                            message: error.response.data\n                                        })\n                                        this.props.history.push({\n                                            pathname: \"/updateExpiredPassword\",\n                                            state: {\n                                                username: username\n                                            }\n                                        });\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data\n                                        })\n                                        break\n                                }\n                            } else {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                }\n                            }\n                        }\n                    );\n            }\n            else {\n                var decryptedPassword = AuthenticationService.isUserLoggedIn(username, password);\n                if (decryptedPassword != \"\") {\n                    bcrypt.compare(password, decryptedPassword, function (err, res) {\n                        if (err) {\n                            this.setState({ message: 'Error occured' });\n                        }\n                        if (res) {\n                            localStorage.setItem('typeOfSession', \"Offline\");\n                            localStorage.setItem('curUser', CryptoJS.AES.encrypt(localStorage.getItem(\"tempUser\").toString(), `${SECRET_KEY}`));\n                            localStorage.removeItem(\"tempUser\");\n                            this.props.history.push(`/welcome`)\n                        } else {\n                            this.setState({ message: 'Bad credentials.' });\n                        }\n                    }.bind(this));\n                }\n                else {\n                    this.setState({ message: 'User not found.' });\n                }\n            }\n        }\n    }\n\n    forgotPassword() {\n        this.props.history.push(`/forgotPassword`)\n    }\n}\n\n","import React, { Component } from \"react\";\n\nclass WelcomeComponent extends Component {\n\n    constructor(props) {\n        super(props);\n       {/* this.listUserApproval=this.listUserApproval.bind(this);*/}\n    }\n\n    render() {\n        return (\n           /* <div className=\"page-content-wrap\">\n                <div className=\"col-md-12\">\n                <h1>Welcome!!</h1>\n                <p>{this.props.match.params.message}</p>\n                </div>\n               \n            </div>*/\n            <div className=\"page-content-wrap\">\n                <ul className=\"breadcrumb\">\n                   \n                </ul>\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"panel panel-default Box-shadow\">\n                        <div className=\"panel-heading\">\n                            <h3 className=\"panel-title\">Welcome</h3>\n                        </div>\n                        <div className=\"panel-body\">\n                            <p>{this.props.match.params.message}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n           \n        </div>\n        );\n    }\n\n   /*{ listUserApproval() {\n        this.props.history.push(`/listUserApproval`)\n    }*/\n}\n\nexport default WelcomeComponent","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\n\nclass UserService {\n    getLanguageList() {\n        return axios.get(`${API_URL}/api/getLanguageList`, {\n        });\n    }\n    getRoleList() {\n        return axios.get(`${API_URL}/api/getRoleList`, {\n        });\n    }\n    getBusinessFunctionList() {\n        return axios.get(`${API_URL}/api/getBusinessFunctionList`, {\n        });\n    }\n    getRealmList() {\n        return axios.get(`${API_URL}/api/getRealmList`, {\n        });\n    }\n    addNewUser(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`${API_URL}/api/addNewUser/`, json, {\n        });\n    }\n    addNewRole(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`${API_URL}/api/addNewRole/`, json, {\n        });\n    }\n\n    getUserList() {\n        return axios.get(`${API_URL}/api/getUserList`, {\n        });\n    }\n    getUserByUserId(userId) {\n        return axios.get(`${API_URL}/api/getUserByUserId/${userId}`, {\n        });\n    }\n    editUser(json) {\n        return axios.put(`${API_URL}/api/editUser/`, json, {\n        });\n    }\n\n    editRole(json) {\n        console.log(json);\n        // var jsonString=JSON.stringify(json);\n\n        return axios.put(`${API_URL}/api/editRole/`, json, {\n        });\n    }\n    unlockAccount(userId, emailId) {\n        return axios.put(`${API_URL}/api/unlockAccount/${userId}/${emailId}`, {\n        });\n    }\n    updateExpiredPassword(username, oldPassword, newPassword) {\n        console.log(\"api username---\" + username);\n        return axios.post(`${API_URL}/api/updateExpiredPassword/`, { username, oldPassword, newPassword }, {});\n    }\n\n    changePassword(userId, oldPassword, newPassword) {\n        console.log(\"api username---\" + userId);\n        return axios.post(`${API_URL}/api/changePassword/`, { userId, oldPassword, newPassword }, {});\n    }\n    forgotPassword(username) {\n        return axios.get(`${API_URL}/api/forgotPassword/${username}`, {});\n    }\n    confirmForgotPasswordToken(username, token) {\n        return axios.post(`${API_URL}/api/confirmForgotPasswordToken/`, { username, token }, {});\n    }\n    updatePassword(username, token, password) {\n        return axios.post(`${API_URL}/api/updatePassword/`, { username, token, password }, {});\n    }\n}\n\nexport default new UserService()","export const TITLE_ADD_USER = 'Create new user'\nexport const TITLE_USER_LIST = 'User List'\nexport const TITLE_EDIT_USER = 'Update user - '\nexport const TITLE_ADD_ROLE = 'ADD NEW ROLE'\nexport const TITLE_ROLE_LIST = 'ROLE LIST'\nexport const TITLE_EDIT_ROLE = 'UPDATE ROLE'\nexport const TITLE_ADD_REGION = 'ADD NEW REGION'\nexport const TITLE_REGION_LIST = 'REGION LIST'\nexport const TITLE_EDIT_REGION = 'UPDATE REGION'\nexport const TITLE_MASTER_DATA_SYNC='Master data sync'\nexport const TITLE_ADD_ORGANISATION = 'ADD NEW ORGANISATION'\nexport const TITLE_ORGANISATION_LIST = 'ORGANISATION LIST'\nexport const TITLE_EDIT_ORGANISATION = 'UPDATE ORGANISATION'\nexport const TITLE_ADD_HEALTH_AREA = 'ADD NEW HEALTH AREA'\nexport const TITLE_HEALTH_AREA_LIST = 'HEALTH AREA LIST'\nexport const TITLE_EDIT_HEALTH_AREA = 'UPDATE HEALTH AREA'\n\nexport const USERNAME = 'Username'\nexport const EMAIL_ID = 'Email Id'\nexport const PHONE_NO = 'Phone No'\nexport const ADDRESS = 'Address'\nexport const COUNTRY = 'Country'\nexport const REALM = 'Realm'\nexport const STATE = 'State/Province'\nexport const CITY = 'City'\nexport const ROLE = 'Role'\nexport const ACTIVE = 'Status'\nexport const LAST_LOGIN_DATE = 'Last Login Date'\nexport const FAILED_ATTEMPTS = 'Failed Attempts'\nexport const PREFERRED_LANGUAGE = 'Preferred Language'\nexport const BTN_SUBMIT = 'Submit'\nexport const BTN_CANCEL = 'Cancel'\nexport const BTN_UPDATE = 'Update'\nexport const BTN_EDIT = 'Update'\nexport const BTN_FAILED_ATTEMPTS = 'Unlock account'\nexport const LANGUAGE_NAME = 'Language name'\nexport const HEALTH_AREA = 'Health Area'\nexport const ORGANISATION = 'Organisation'\nexport const REGION = 'Region'\nexport const ROLE_NAME = 'Role Name'\nexport const ROLE_NAME_ENG = 'Role Name[English]'\nexport const ROLE_NAME_SPA = 'Role Name[Spanish]'\nexport const ROLE_NAME_FRE = 'Role Name[French]'\nexport const ROLE_NAME_POR = 'Role Name[Portuguese]'\nexport const REGION_NAME_ENG = 'Region Name[English]'\nexport const ORGANISATION_NAME_ENG = 'Organisation Name[English]'\nexport const ORGANISATION_CODE = 'Organisation Code'\nexport const HEALTH_AREA_NAME_ENG = 'Health Area Name[English]'\nexport const ROLE_ID = 'Role Id'\nexport const BUSINESS_FUNCTION = 'Business Function'\nexport const CAN_CREATE_ROLE = 'Can Create Role'\nexport const BTN_DOWNLOAD='DOWNLOAD'\nexport const BTN_EXPORT='EXPORT'\nexport const EXPORT_TITLE='Export Program Data'\nexport const PROGRAM='Program'\nexport const NOTHING_SELECTED='-Nothing Selected-'\nexport const DOWNLOAD_TITLE='Download Program Data'\nexport const IMPORT_TITLE='Import Program Data'\nexport const BTN_IMPORT='Import'\nexport const DATA_DOWNLOAD_SUCCESS='Data downloaded successfully.'\nexport const DATA_EXPORT_SUCCESS='Data exported successfully.'\nexport const DATA_IMPORT_SUCCESS='DATA imported successfully'\nexport const IMPORT_PROGRAM='Select programs to import'\nexport const IS_ACTIVE = 'Active'\nexport const ADD_LANGUAGE = 'Add Language'\nexport const UPDATE_LANGUAGE = 'Update Language'\nexport const SUBMIT_BUTTON = 'Submit'\nexport const UPDATE_BUTTON = 'Update'\nexport const ADD_NEW_LANGUAGE_TITLE = 'Add New Language'\nexport const ADD_DATASOURCE_TYPE = 'Add Data Source Type'\nexport const DATASOURCE_TYPE_NAME_EN = 'Data source type name (English)'\nexport const DATASOURCE_TYPE_NAME_FR = 'Data source  type name (French)'\nexport const DATASOURCE_TYPE_NAME_SP = 'Data source type  name (Spanish)'\nexport const DATASOURCE_TYPE_NAME_PO = 'Data source type name (portuguese)'\nexport const DATA_SOURCE_TYPE_LIST = 'Data Source Type List'\nexport const DATA_SOURCE_TYPE_ACTIVE = 'Active'\nexport const UPDATE_DATA_SOURCE_TYPE = \"Update Data Source Type\"\nexport const ADD_NEW_DATA_SOURCE_TYPE = \"Add New Data Source Type\"\nexport const ADD_DATASOURCE = 'Add Data Source'\nexport const UPDATE_DATASOURCE = 'Update Data Source'\nexport const DATASOURCE_NAME_EN = 'Data source name (English)'\nexport const DATASOURCE_NAME_FR = 'Data source name (French)'\nexport const DATASOURCE_NAME_SP = 'Data source name (Spanish)'\nexport const DATASOURCE_NAME_PO = 'Data source name (portuguese)'\nexport const DATASOURCE_ACTIVE = 'Active'\nexport const DATA_SOURCE_LIST = 'Data Source  List'\nexport const SELECT_DATA_SOURCE_TYPE='Select Data Source Type'\nexport const ADD_NEW_DATA_SOURCE = \"Add New Data Source\"\n\nexport const ADD_CURRENCY = 'Add Currency'\nexport const UPDATE_CURRENCY = 'Update Currency'\nexport const CURRENCY_NAME_EN = 'Currency name (English)'\nexport const CURRENCY_NAME_FR = 'Currency name (French)'\nexport const CURRENCY_NAME_SP = 'Currency name (Spanish)'\nexport const CURRENCY_NAME_PO = 'Currency name (portuguese)'\nexport const CURRENCY_CODE = 'Currency code'\nexport const CURRENCY_SYMBOL = 'Currency symbol'\nexport const CONVERSIONRATE_TO_USD = 'Conversion rate to usd'\nexport const CURRENCY_LIST=\"Currency List\"\nexport const ADD_NEW_CURRENCY=\"Add New Currency\"\n\nexport const COUNTRY_NAME_EN = 'Country name (English)'\nexport const COUNTRY_NAME_FR = 'Country name (French)'\nexport const COUNTRY_NAME_SP = 'Country name (Spanish)'\nexport const COUNTRY_NAME_PO = 'Country name (portuguese)'\nexport const SELECT_LANGUAGE='Select language'\nexport const SELECT_CURRENCY='Select currency'\nexport const ADD_COUNTRY='Add Country'\nexport const ADD_NEW_COUNTRY='Add New Country'\nexport const COUNTRY_LIST='Country List'\nexport const COUNTRY_ACTIVE=\"Active\"\nexport const UPDATE_COUNTRY=\"Update Country\"\n\nexport const ADD_SHIPMENT_STATUS=\"Add Shipment Status\"\nexport const UPDATE_SHIPMENT_STATUS=\"Update Shipment Status\"\nexport const SHIPMENTSTATUS_NAME_EN = 'Shipment status name (English)'\nexport const SHIPMENTSTATUS_NAME_FR = 'Shipment status name (French)'\nexport const SHIPMENTSTATUS_NAME_SP = 'Shipment status name (Spanish)'\nexport const SHIPMENTSTATUS_NAME_PO = 'Shipment status name (portuguese)'\nexport const SHIPMENT_STATUS_LIST='Shipment Status List'\nexport const ADD_NEW_SHIPMENT_STATUS='Add New Shipment Status'\nexport const SELECT_NEXT_SHIPMENT_STATUS='Select next shipment status'\n\nexport const UNIT_TYPE_NAME_EN = 'Unit type name (English)'\nexport const UNIT_TYPE_NAME_FR = 'Unit type name (French)'\nexport const UNIT_TYPE_NAME_SP = 'Unit type name (Spanish)'\nexport const UNIT_TYPE_NAME_PO = 'Unit type name (portuguese)'\nexport const UNIT_TYPE_LIST = 'Unit Type List'\nexport const ADD_NEW_UNIT_TYPE = 'Add new unit type'\nexport const CREATED_DATE=\"Created date\"\nexport const LAST_MODIFIED_DATE=\"Last modified date\"\n\nexport const UPDATE_UNIT_TYPE = 'Update unit type'\nexport const SYNCED='Synced'\nexport const OF='of'\nexport const MASTERS='masters'\nexport const BTN_RETRY='Retry'\nexport const MASTER_SYNC_SUCCESS='Master data synced successfully.'\nexport const SYNC_FAILED='Sync failed please retry.'\nexport const OFFLINE_MSG='To perform this action you must be online.'\nexport const SELECT_FILE='Please select a file'\nexport const SELECT_ZIP_FILE='Please select zip file.'\nexport const ACTION_CANCEL='Action cancelled by user.'\nexport const SAME_PROGRAM_OVERWRITE_MESSAGE='If program with same version already exists in the local machine then it will overwirte with the new data.'\n\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, BTN_SUBMIT, BTN_CANCEL, TITLE_ADD_USER, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class AddUserComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            languageId: AuthenticationService.getLanguageId(),\n            realms: [],\n            languages: [],\n            roles: []\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        console.log(\"check---\" + AuthenticationService.checkTypeOfSession());\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getRealmList()\n            .then(response => {\n                console.log(\"realm list---\", response.data);\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getLanguageList()\n            .then(response => {\n                this.setState({\n                    languages: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $.validator.addMethod('strongUsername', function (value) {\n            return /^(?=.*[a-zA-Z])[a-zA-Z.-_@]{6,30}$/.test(value);\n        }, 'Username does not match with username policy.');\n        $(\"#userForm\").validate({\n            ignore: [],\n            rules: {\n                emailId: {\n                    required: true,\n                    email: true\n                },\n                phoneNumber: {\n                    required: true,\n                    number: true\n                },\n                languageId: {\n                    required: true\n                },\n                roles: {\n                    required: true\n                },\n                username: {\n                    required: true,\n                    strongUsername: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { realms } = this.state;\n        const { languages } = this.state;\n        const { roles } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.label_pr !== null && item.label.label_pr !== \"\" ? item.label.label_pr : item.label.label_en);\n                                case 3: return (item.label.label_fr !== null && item.label.label_fr !== \"\" ? item.label.label_fr : item.label.label_en);\n                                case 4: return (item.label.label_sp !== null && item.label.label_sp !== \"\" ? item.label.label_sp : item.label.label_en);\n                                default: return item.label.label_en;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n        let languagesList = languages.length > 0\n            && languages.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>\n                        {item.languageName}\n                    </option>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.label_pr !== null && item.label.label_pr !== \"\" ? item.label.label_pr : item.label.label_en);\n                                case 3: return (item.label.label_fr !== null && item.label.label_fr !== \"\" ? item.label.label_fr : item.label.label_en);\n                                case 4: return (item.label.label_sp !== null && item.label.label_sp !== \"\" ? item.label.label_sp : item.label.label_en);\n                                default: return item.label.label_en;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n        return (\n            <div className=\"addUser\">\n                <div className=\"page-content-wrap\">\n\n                    <div className=\"row\">\n                        <div className=\"\">\n                            <ul class=\"breadcrumb\"></ul>\n                        </div>\n\n                        <div className=\"col-md-8 col-md-offset-2\">\n                            <div className=\"login mt-2 block\">\n                                <div className=\"panel panel-default\">\n                                    <div className=\"panel-heading\">\n                                        <h3 className=\"panel-title\">Create new user</h3>\n                                    </div>\n                                    <div className=\"panel-body\">\n                                        <div className=\"col-md-8 col-md-offset-2\">\n                                            <div className=\"block\">\n\n                                                <form className=\"form-horizontal\" name=\"userForm\" id=\"userForm\">\n\n                                                    <div className=\"form-group\">\n                                                        <label className=\"req col-md-4  control-label\"> {REALM}</label>\n                                                        <div className=\"col-md-8\">\n                                                            <select className=\"form-control select\" id=\"realmId\" name=\"realmId\">\n                                                                <option value=\"\">-Nothing Selected-</option>\n                                                                {realmList}\n                                                            </select>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\">{USERNAME} :</label>\n                                                        <div className=\"col-md-8\">\n                                                            <input type=\"text\" id=\"username\" name=\"username\" className=\"form-control\"></input>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\">{EMAIL_ID} </label>\n                                                        <div className=\"col-md-8\">\n                                                            <input type=\"text\" id=\"emailId\" name=\"emailId\" className=\"form-control\"></input>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\">Phone no :</label>\n                                                        <div className=\"col-md-8\">\n                                                            <input type=\"text\" id=\"phoneNumber\" name=\"phoneNumber\" maxLength=\"15\" minLength=\"4\" className=\"form-control\"></input>\n                                                        </div>\n                                                    </div>\n\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\"> {ROLE}</label>\n                                                        <div className=\"col-md-8\">\n                                                            <select className=\"form-control select\" id=\"roles\" name=\"roles\" multiple={true}>\n                                                                <option value=\"\">-Nothing Selected-</option>\n                                                                {roleList}\n                                                            </select>\n                                                        </div>\n                                                    </div>\n\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\">{PREFERRED_LANGUAGE}</label>\n                                                        <div className=\"col-md-8\">\n                                                            <select className=\"form-control select\" id=\"languageId\" name=\"languageId\">\n                                                                <option value=\"\">-Nothing Selected-</option>\n                                                                {languagesList}\n                                                            </select>\n                                                        </div>\n                                                    </div>\n\n                                                </form>\n                                            </div>\n                                        </div>\n\n                                    </div>\n                                    <div className=\"panel-footer\">\n\n                                        <button className=\"btn btn-primary pull-right ml-1\" type=\"button\" onClick={this.cancelClicked}>{BTN_CANCEL}</button>\n                                        <button className=\"btn btn-success pull-right\" type=\"button\" onClick={this.submitClicked}>{BTN_SUBMIT}</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>\n                </div></div>\n        )\n    }\n    submitClicked() {\n        console.log($(\"#countryIds\").val())\n        if (navigator.onLine) {\n            console.log(\"check---\" + AuthenticationService.checkTypeOfSession());\n            if (AuthenticationService.checkTypeOfSession()) {\n                var json = {\n                    username: $(\"#username\").val(),\n                    emailId: $(\"#emailId\").val(),\n                    phoneNumber: $(\"#phoneNumber\").val(),\n                    realm: {\n                        realmId: $(\"#realmId\").val()\n                    },\n                    roleList: $(\"#roles\").val(),\n                    language: {\n                        languageId: $(\"#languageId\").val()\n                    },\n                    countryIds: $(\"#countryIds\").val()\n                }\n                if ($(\"#userForm\").valid()) {\n                    UserService.addNewUser(json)\n                        .then(response => {\n                            this.props.history.push(`/userList/${response.data.message}`)\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline or vice versa.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/userList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, TITLE_USER_LIST, TITLE_ADD_USER, ACTIVE, LAST_LOGIN_DATE, FAILED_ATTEMPTS, BTN_EDIT, BTN_FAILED_ATTEMPTS, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport moment from 'moment'\n\nexport default class UserListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userList: []\n        }\n        this.editUser = this.editUser.bind(this);\n        this.unlockAccount = this.unlockAccount.bind(this);\n        this.addNewUser = this.addNewUser.bind(this);\n    }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getUserList()\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    userList: response.data\n                })\n            })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n    render() {\n        return (\n            <div className=\"userList\">\n                <p>{this.props.match.params.message}</p>\n                <h1>{TITLE_USER_LIST}</h1>\n                <div className=\"container\">\n                    <button className=\"btn btn-add\" type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewUser}>{TITLE_ADD_USER}</button><br /><br />\n                    <div className=\"row\">\n                        <div className=\"col-md-12 scrollable\"></div>\n                        <table className=\"table table-responsive\" border=\"1\" align=\"center\">\n                            <thead>\n                                <tr>\n                                    <th>{REALM}</th>\n                                    <th>{USERNAME}</th>\n                                    <th>{EMAIL_ID}</th>\n                                    <th>{PHONE_NO}</th>\n                                    <th>{PREFERRED_LANGUAGE}</th>\n                                    <th>{LAST_LOGIN_DATE}</th>\n                                    <th>{FAILED_ATTEMPTS}</th>\n                                    <th>{ACTIVE}</th>\n                                    <th>{BTN_EDIT}</th>\n                                    <th>{BTN_FAILED_ATTEMPTS}</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    this.state.userList.map(\n                                        user =>\n                                            // <tr key={user.userId} onClick={() => this.editUser(user.userId)}>\n                                            <tr key={user.userId} onClick={() => this.editUser(user)}>\n                                                <td>\n                                                    {user.realm.label.label_en}\n                                                </td>\n                                                <td>{user.username}</td>\n                                                <td>{user.emailId}</td>\n                                                <td>{user.phoneNumber}</td>\n                                                <td>{user.language.languageName}</td>\n                                                <td>{user.lastLoginDate !== null && user.lastLoginDate !== \"\" ? moment(user.lastLoginDate).format('MM-DD-YYYY hh:mm A'):\"\"}</td>\n                                                <td>{user.faildAttempts}</td>\n                                                <td>{user.active.toString() === \"true\" ? \"Active\" : \"Disabled\"}\n                                                </td>\n                                                <td><button type=\"button\" onClick={() => this.editUser(user)}>{BTN_EDIT}</button></td>\n                                                <td><button type=\"button\" onClick={(e) => { e.stopPropagation(); this.unlockAccount(user.userId, user.emailId) }}>{BTN_FAILED_ATTEMPTS}</button></td>\n                                            </tr>\n                                    )\n                                }\n                            </tbody>\n                        </table></div>\n                </div>\n\n            </div>\n        )\n    }\n    editUser(user) {\n        console.log(\"edit user---\", user);\n        this.props.history.push({\n            pathname: \"/editUser\",\n            state: { user: user }\n        });\n    }\n    unlockAccount(userId, emailId) {\n        if (navigator.onLine) {\n            UserService.unlockAccount(userId, emailId)\n                .then(response => {\n                    this.props.history.push(`/userList/${response.data.message}`)\n                    window.location.reload();\n                })\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.response.data.message\n                                })\n                                break\n                        }\n                    }\n                );\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    addNewUser() {\n        if (navigator.onLine) {\n            this.props.history.push(`/addUser`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport { EMAIL_ID, PHONE_NO, REALM, ROLE, PREFERRED_LANGUAGE, ACTIVE, BTN_UPDATE, BTN_CANCEL, TITLE_EDIT_USER, USERNAME } from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class EditUserComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            languageId: AuthenticationService.getLanguageId(),\n            realms: [],\n            languages: [],\n            roles: [],\n            user: this.props.location.state.user,\n            'user.active': true\n        }\n        this.updateClicked = this.updateClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n    }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        // this.setState({\n        //     user: this.props.location.state.user\n        // });\n        UserService.getRealmList()\n            .then(response => {\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getLanguageList()\n            .then(response => {\n                this.setState({\n                    languages: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $.validator.addMethod('strongUsername', function (value) {\n            return /^(?=.*[a-zA-Z])[a-zA-Z.-_@]{6,30}$/.test(value);\n        }, 'Username does not match with username policy.');\n\n        $(\"#userForm\").validate({\n            ignore: [],\n            rules: {\n                'user.emailId': {\n                    required: true,\n                    email: true\n                },\n                'user.phoneNumber': {\n                    required: true,\n                    number: true\n                },\n                'user.username': {\n                    required: true,\n                    strongUsername: true\n                },\n                'user.language.languageId': {\n                    required: true\n                },\n                'user.roleList': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    dataChange(event) {\n        let { user } = this.state\n        if (event.target.name === \"user.realm.realmId\") {\n            user.realm.realmId = event.target.value\n        }\n        else if (event.target.name === \"user.realm.realmId\") {\n            user.realm.realmId = event.target.value\n        }\n        else if (event.target.name === \"user.roleList\") {\n            user.roleList = Array.from(event.target.selectedOptions, (item) => item.value)\n        }\n        else if (event.target.name === \"user.language.languageId\") {\n            user.language.languageId = event.target.value\n        }\n        else if (event.target.name === \"user.emailId\") {\n            user.emailId = event.target.value\n        }\n        else if (event.target.name === \"user.username\") {\n            user.username = event.target.value\n        }\n        else if (event.target.name === \"user.phoneNumber\") {\n            user.phoneNumber = event.target.value\n        }\n        else if (event.target.name === \"user.active\") {\n            user.active = event.target.id === \"user.active2\" ? false : true\n        }\n\n        this.setState({\n            user\n        }, (\n        ) => {\n            // console.log(\"state after update---\",this.state.user)\n        })\n    }\n\n    render() {\n        const { realms } = this.state;\n        const { languages } = this.state;\n        const { roles } = this.state;\n        const { user } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.label_pr !== null && item.label.label_pr !== \"\" ? item.label.label_pr : item.label.label_en);\n                                case 3: return (item.label.label_fr !== null && item.label.label_fr !== \"\" ? item.label.label_fr : item.label.label_en);\n                                case 4: return (item.label.label_sp !== null && item.label.label_sp !== \"\" ? item.label.label_sp : item.label.label_en);\n                                default: return item.label.label_en;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n        let languagesList = languages.length > 0\n            && languages.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>\n                        {item.languageName}\n                    </option>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.label_pr !== null && item.label.label_pr !== \"\" ? item.label.label_pr : item.label.label_en);\n                                case 3: return (item.label.label_fr !== null && item.label.label_fr !== \"\" ? item.label.label_fr : item.label.label_en);\n                                case 4: return (item.label.label_sp !== null && item.label.label_sp !== \"\" ? item.label.label_sp : item.label.label_en);\n                                default: return item.label.label_en;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n        return (\n            <>\n                <div className=\"page-content-wrap\">\n\n                    <div className=\"row\">\n                        <div className=\"\">\n                            <ul class=\"breadcrumb\"></ul>\n                        </div>\n\n                        <div className=\"col-md-8 col-md-offset-2\">\n                            <div className=\"login mt-2 block\">\n                                <div className=\"panel panel-default\">\n                                    <div className=\"panel-heading\">\n                                        <h3 className=\"panel-title\">{TITLE_EDIT_USER}{this.state.user.userId}</h3>\n                                    </div>\n                                    <div className=\"panel-body\">\n                                        <div className=\"col-md-8 col-md-offset-2\">\n                                            <div className=\"block\">\n\n                                                <form className=\"form-horizontal\" name=\"userForm\" id=\"userForm\">\n\n                                                    <div className=\"form-group\">\n                                                        <label className=\"req col-md-4  control-label\"> {REALM}</label>\n                                                        <div className=\"col-md-8\">\n                                                            <select id=\"user.realm.realmId\" name=\"user.realm.realmId\" value={this.state.user.realm ? this.state.user.realm.realmId : ''} onChange={this.dataChange} className=\"form-control\">\n                                                                <option value=\"\">-Nothing Selected-</option>\n                                                                {realmList}\n                                                            </select>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\">{USERNAME} :</label>\n                                                        <div className=\"col-md-8\">\n                                                            <input type=\"text\" id=\"user.username\" name=\"user.username\" value={this.state.user.username} onChange={this.dataChange} className=\"form-control\" />\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\">{EMAIL_ID} </label>\n                                                        <div className=\"col-md-8\">\n                                                            <input type=\"text\" id=\"user.emailId\" name=\"user.emailId\" value={this.state.user.emailId} onChange={this.dataChange} className=\"form-control\" />\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\">{PHONE_NO}</label>\n                                                        <div className=\"col-md-8\">\n                                                            <input type=\"text\" id=\"user.phoneNumber\" name=\"user.phoneNumber\" value={this.state.user.phoneNumber} onChange={this.dataChange} maxLength=\"15\" minLength=\"4\" className=\"form-control\" />\n                                                        </div>\n                                                    </div>\n\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\"> {ROLE}</label>\n                                                        <div className=\"col-md-8\">\n                                                            <select id=\"user.roleList\" name=\"user.roleList\" value={this.state.user.roleList} onChange={this.dataChange} className=\"form-control\" multiple={true}>\n                                                                <option value=\"\">-Nothing Selected-</option>\n                                                                {roleList}\n                                                            </select>\n                                                        </div>\n                                                    </div>\n\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\">{PREFERRED_LANGUAGE}</label>\n                                                        <div className=\"col-md-8\">\n                                                            <select id=\"user.language.languageId\" name=\"user.language.languageId\" value={this.state.user.language ? this.state.user.language.languageId : ''} onChange={this.dataChange} className=\"form-control\">\n                                                                <option value=\"\">-Nothing Selected-</option>\n                                                                {languagesList}\n                                                            </select>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-4 control-label\">{ACTIVE}</label>\n                                                        <div className=\"col-md-8\">\n                                                            <input type=\"radio\" id=\"user.active1\" name=\"user.active\" value={true} checked={this.state.user.active === true} onChange={this.dataChange} /> Active\n                                                            <input type=\"radio\" id=\"user.active2\" name=\"user.active\" value={false} checked={this.state.user.active === false} onChange={this.dataChange} /> Disabled\n                                                        </div>\n                                                    </div>\n\n                                                </form>\n                                            </div>\n                                        </div>\n\n                                    </div>\n                                    <div className=\"panel-footer\">\n\n                                        <button className=\"btn btn-primary pull-right ml-1\" type=\"button\" onClick={this.cancelClicked}>{BTN_CANCEL}</button>\n                                        <button className=\"btn btn-success pull-right\" type=\"button\" onClick={this.updateClicked}>{BTN_UPDATE}</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n            </>\n        )\n    }\n    updateClicked() {\n        if (navigator.onLine) {\n            if (AuthenticationService.checkTypeOfSession()) {\n                var json = this.state.user;\n                if ($(\"#userForm\").valid()) {\n                    UserService.editUser(json)\n                        .then(response => {\n                            this.props.history.push(`/userList/${response.data.message}`)\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline or vice versa.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/userList/` + \"Action Canceled\")\n    }\n}\n\n","import React, { Component } from 'react';\n\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from '../../api/UserService'\nimport CryptoJS from 'crypto-js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\nimport { SECRET_KEY } from '../../Constants.js'\n\n\nexport default class ChangePasswordComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        $.validator.addMethod('checkPassword', function () {\n            if ($('#newPassword').val() === $('#confirmNewPassword').val()) {\n                return true;\n            } else {\n                return false;\n            }\n        }, 'The new password does not match.');\n\n        $.validator.addMethod('checkOldPassword', function () {\n            if ($('#newPassword').val() == $('#oldPassword').val()) {\n                console.log(\"same\");\n                return false;\n            } else {\n                console.log(\"different\");\n                return true;\n            }\n        }, \"The new password can't be same as old password.\");\n        $.validator.addMethod('strongPassword', function (value) {\n            return /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*]).{6,15}$/.test(value);\n        }, 'Password does not match with password policy.');\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                oldPassword: {\n                    required: true\n                },\n                newPassword: {\n                    required: true,\n                    checkOldPassword: true,\n                    strongPassword: true\n                },\n                confirmNewPassword: {\n                    required: true,\n                    checkPassword: true,\n                    strongPassword: true,\n                    maxlength: 15\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n\n\n            <div className=\"page-content-wrap\">\n\n                <div className=\"row\">\n                    <div className=\"\"><ul class=\"breadcrumb\">\n\n                    </ul></div>\n\n                    <div className=\"col-md-8 col-md-offset-2\">\n                        <div className=\"login mt-2\">\n                            <div className=\"panel panel-default Box-shadow\">\n                                <div className=\"panel-heading\">\n                                    <h3 className=\"panel-title\">Update Password</h3>\n                                </div>\n                                <div className=\"panel-body\">\n                                    <div className=\"col-md-8 col-md-offset-2\">\n                                        <div className=\"block\">\n\n                                            <form className=\"form-horizontal\" name=\"form1\" id=\"form1\">\n                                                <div className=\"form-group\">\n                                                    <label className=\"col-md-4 control-label\">Old Password :</label>\n                                                    <div className=\"col-md-8\">\n                                                        <input type=\"password\" id=\"oldPassword\" name=\"oldPassword\" className=\"form-control\" />\n                                                    </div>\n                                                </div>\n                                                <div className=\"form-group\">\n                                                    <label className=\"col-md-4 control-label\">New Password :</label>\n                                                    <div className=\"col-md-8\">\n                                                        <input type=\"password\" id=\"newPassword\" name=\"newPassword\" className=\"form-control\" />\n                                                    </div>\n                                                </div>\n                                                <div className=\"form-group\">\n                                                    <label className=\"col-md-4 control-label\">Confirm Password :</label>\n                                                    <div className=\"col-md-8\">\n                                                        <input type=\"password\" id=\"confirmNewPassword\" name=\"confirmNewPassword\" className=\"form-control\" />\n                                                    </div>\n                                                </div>\n\n\n                                                <div><h5>{this.state.message}</h5></div>\n                                            </form>\n                                        </div>\n                                    </div>\n\n\n\n                                </div>\n                                <div className=\"panel-footer\">\n\n                                    <Online><button type=\"button\" onClick={this.cancelClicked} className=\"btn btn-primary pull-right ml-1\">cancel</button></Online>\n                                    <Online>  <button type=\"button\" onClick={this.submitClicked} className=\"btn btn-success pull-right\">Submit</button></Online>\n\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    submitClicked() {\n        if ($(\"#form1\").valid()) {\n            if (navigator.onLine) {\n                console.log(\"userid -----------\"+AuthenticationService.getLoggedInUserId())\n                UserService.changePassword(AuthenticationService.getLoggedInUserId(), $('#oldPassword').val(), $('#newPassword').val())\n                    .then(response => {\n                        localStorage.setItem('password', CryptoJS.AES.encrypt((response.data.data).toString(), `${SECRET_KEY}`));\n                        this.props.history.push(`/welcome/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            } else {\n                alert(\"You must be online to update the password.\")\n            }\n        }\n    }\n\n    cancelClicked() {\n        this.props.history.push(`/welcome/Action canceled.`)\n    }\n}\n\n","import React, { Component } from 'react';\nimport UserService from \"../../api/UserService.js\";\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as labels from '../../Labels.js'\n\n\nexport default class RoleListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            roles: [],\n            message: \"\"\n        }\n        this.editRole = this.editRole.bind(this);\n        this.addNewRole = this.addNewRole.bind(this);\n    }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getRoleList()\n            .then(response => {\n                console.log(\"rol list---\" + response.data);\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    render() {\n        return (\n            <div className=\"roleList\">\n                <p>{this.props.match.params.message}</p>\n                <h3>{this.state.message}</h3>\n                <div>{labels.TITLE_ROLE_LIST}</div>\n                <button className=\"btn btn-add\" type=\"button\" style={{ marginLeft: '-736px' }} onClick={this.addNewRole}>{labels.TITLE_ADD_ROLE}</button><br /><br />\n                <table border=\"1\" align=\"center\">\n                    <thead>\n                        <tr>\n                            <th>{labels.ROLE_ID}</th>\n                            <th>{labels.ROLE_NAME_ENG}</th>\n                            <th>{labels.ROLE_NAME_POR}</th>\n                            <th>{labels.ROLE_NAME_FRE}</th>\n                            <th>{labels.ROLE_NAME_SPA}</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.roles.map(role =>\n                                <tr key={role.roleId} onClick={() => this.editRole(role)}>\n                                    <td>{role.roleId}</td>\n                                    <td>{role.label.engLabel}</td>\n                                    <td>{role.label.porLabel}</td>\n                                    <td>{role.label.freLabel}</td>\n                                    <td>{role.label.spaLabel}</td>\n                                </tr>)\n                        }\n                    </tbody>\n                </table>\n                <br />\n            </div>\n        );\n    }\n    editRole(role) {\n        this.props.history.push({\n            pathname: \"/editRole\",\n            state: { role: role }\n        });\n    }\n    addNewRole() {\n        if (navigator.onLine) {\n            this.props.history.push(`/addRole`);\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n\n}","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport * as labels from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport '../../css/bootstrap/bootstrap.min.css';\nimport '../../App.css'\n\n\nexport default class AddRoleComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            businessFunctions: [],\n            roles: [],\n            message: '',\n            languageId: AuthenticationService.getLanguageId(),\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        // this.dataChange = this.dataChange.bind(this);\n        // this.handleChange = this.handleChange.bind(this);\n    }\n\n    // dataChange(event) {\n    //     let { role } = this.state\n    //     // console.log(\"business function---\", event.target.value);\n    //     console.log(\"name---------------\" + event.target.name);\n    //     switch (event.target.name) {\n    //         case \"role.label.label_en\": role.label.label_en = event.target.value;\n    //         case \"role.label.label_pr\": role.label.label_pr = event.target.value;\n    //         case \"role.label.label_fr\": role.label.label_fr = event.target.value;\n    //         case \"role.label.label_sp\": role.label.label_sp = event.target.value;\n    //         case \"role.businessFunctions\": role.businessFunctions = Array.from(event.target.selectedOptions, (item) => item.value);\n    //         case \"role.canCreateRole\": role.canCreateRole = event.target.value;\n    //         default: [event.target.name] = event.target.value;\n    //     }\n\n    //     this.setState({\n    //         role\n    //     }, (\n    //     ) => {\n    //         console.log(\"state after update---\", this.state.role)\n    //     })\n    // }\n\n    // handleChange(event) {\n    //     this.setState({\n    //         role: {\n    //             label: {\n    //                 label_en: ''\n    //             },\n    //             businessFunctions: Array.from(event.target.selectedOptions, (item) => item.value)\n    //         }\n    //     }, (\n    //     ) => {\n    //         console.log(\"state after update---\", this.state.role)\n    //     });\n    // }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.getBusinessFunctionList()\n            .then(response => {\n                console.log(\"business functions---\", response.data);\n                this.setState({\n                    businessFunctions: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                console.log(\"role list---\", response.data);\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n\n\n        $(\"#roleForm\").validate({\n            ignore: [],\n            rules: {\n                'role.label.label_en': {\n                    required: true,\n                    // lettersonly: true,\n                    maxlength: 255\n\n                },\n                'role.label.label_pr': {\n                    // lettersonly: true,\n                    maxlength: 255\n                },\n                'role.label.label_fr': {\n                    // lettersonly: true,\n                    maxlength: 255\n                },\n                'role.label.label_sp': {\n                    // lettersonly: true,\n                    maxlength: 255\n                },\n                'role.businessFunctions': {\n                    required: true\n                },\n                'role.canCreateRole': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { businessFunctions } = this.state;\n        const { roles } = this.state;\n\n        let businessFunctionsList = businessFunctions.length > 0\n            && businessFunctions.map((item, i) => {\n                return (\n                    <>\n                        <option key={i} value={item.businessFunctionId}>\n                            {(() => {\n                                switch (this.state.languageId) {\n                                    case 2: return (item.label.label_pr != null && item.label.label_pr != \"\" ? item.label.label_pr : item.label.label_en);\n                                    case 3: return (item.label.label_fr != null && item.label.label_fr != \"\" ? item.label.label_fr : item.label.label_en);\n                                    case 4: return (item.label.label_sp != null && item.label.label_sp != \"\" ? item.label.label_sp : item.label.label_en);\n                                    default: return item.label.label_en;\n                                }\n                            })()}\n                        </option>\n                    </>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.label_pr != null && item.label.label_pr != \"\" ? item.label.label_pr : item.label.label_en);\n                                case 3: return (item.label.label_fr != null && item.label.label_fr != \"\" ? item.label.label_fr : item.label.label_en);\n                                case 4: return (item.label.label_sp != null && item.label.label_sp != \"\" ? item.label.label_sp : item.label.label_en);\n                                default: return item.label.label_en;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n        return (\n            <div class=\"page-container page-navigation-toggled page-container-wide\">\n                <div class=\"page-content\">\n                    <ul class=\"breadcrumb\">\n                        <li><a href=\"#\">Home</a></li>\n                        <li><a href=\"#\">Admin</a></li>\n                        <li><a href=\"#\">Role</a></li>\n                        <li><a href=\"#\">Add Role</a></li>\n                    </ul>\n                    <div class=\"page-content-wrap\">\n                        <div><h5>{this.state.message}</h5></div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n\n                                <form name=\"roleForm\" id=\"roleForm\" class=\"form-horizontal\">\n                                    <div class=\"panel panel-default\">\n                                        <div class=\"panel-heading\">\n                                            <h3 class=\"panel-title\">{labels.TITLE_ADD_ROLE}</h3>\n                                        </div>\n                                        <div class=\"panel-body\">\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_ENG}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.label_en\" class=\"form-control\" name=\"role.label.label_en\" />\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_POR}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.label_pr\" name=\"role.label.label_pr\" class=\"form-control\" />\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_FRE}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.label_fr\" name=\"role.label.label_fr\" class=\"form-control\" />\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_SPA}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.label_sp\" name=\"role.label.label_sp\" class=\"form-control\" />\n\n                                                </div>\n                                            </div>\n\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.BUSINESS_FUNCTION}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"role.businessFunctions\" class=\"form-control select\" data-live-search=\"true\" data-actions-box=\"true\" name=\"role.businessFunctions\" multiple={true}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {businessFunctionsList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.CAN_CREATE_ROLE}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"role.canCreateRole\" className=\"form-control select\" data-live-search=\"true\" data-actions-box=\"true\" name=\"role.canCreateRole\" multiple={true} onChange={this.dataChange}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {roleList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n                                            <button type=\"button\" className=\"btn btn-success\" onClick={this.submitClicked}>{labels.BTN_SUBMIT}</button>\n                                            <button type=\"button\" className=\"btn btn-danger\" onClick={this.cancelClicked}>{labels.BTN_CANCEL}</button><br></br><br></br>\n\n                                        </div>\n                                        <div class=\"panel-footer\">\n                                            <div class=\"pull-right\">\n\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    submitClicked() {\n        console.log($(\"#role\\\\.businessFunctions\").val())\n        if (navigator.onLine) {\n            if (AuthenticationService.checkTypeOfSession()) {\n                if ($(\"#roleForm\").valid()) {\n                    var json = {\n                        label: {\n                            label_en: $(\"#role\\\\.label\\\\.label_en\").val(),\n                            label_pr: $(\"#role\\\\.label\\\\.label_pr\").val(),\n                            label_fr: $(\"#role\\\\.label\\\\.label_fr\").val(),\n                            label_sp: $(\"#role\\\\.label\\\\.label_sp\").val()\n                        },\n                        businessFunctions: $(\"#role\\\\.businessFunctions\").val(),\n                        canCreateRole: $(\"#role\\\\.canCreateRole\").val()\n                    }\n                    UserService.addNewRole(json)\n                        .then(response => {\n                            this.props.history.push(`/roleList/${response.data.message}`)\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline or vice versa.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/roleList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from \"../../api/UserService\";\nimport * as labels from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport '../../css/bootstrap/bootstrap.min.css';\nimport '../../App.css'\n\n\nexport default class AddRoleComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            businessFunctions: [],\n            roles: [],\n            message: '',\n            languageId: AuthenticationService.getLanguageId(),\n            role: this.props.location.state.role\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n        // this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        // this.setState({\n        //     role: this.props.location.state.role\n        // });\n        UserService.getBusinessFunctionList()\n            .then(response => {\n                console.log(\"business functions---\", response.data);\n                this.setState({\n                    businessFunctions: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRoleList()\n            .then(response => {\n                console.log(\"role list---\", response.data);\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n\n\n        $(\"#roleForm\").validate({\n            ignore: [],\n            rules: {\n                'role.label.engLabel': {\n                    required: true,\n                    // lettersonly: true,\n                    maxlength: 255\n\n                },\n                'role.label.porLabel': {\n                    // lettersonly: true,\n                    maxlength: 255\n                },\n                'role.label.freLabel': {\n                    // lettersonly: true,\n                    maxlength: 255\n                },\n                'role.label.spaLabel': {\n                    // lettersonly: true,\n                    maxlength: 255\n                },\n                'role.businessFunctions': {\n                    required: true\n                },\n                'role.canCreateRole': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    dataChange(event) {\n        let { role } = this.state\n        console.log(\"name---------------\" + event.target.name);\n        if (event.target.name === \"role.label.engLabel\") {\n            role.label.engLabel = event.target.value\n        } else if (event.target.name === \"role.label.porLabel\") {\n            role.label.porLabel = event.target.value\n        }\n        else if (event.target.name === \"role.label.freLabel\") {\n            role.label.freLabel = event.target.value\n        }\n        else if (event.target.name === \"role.label.spaLabel\") {\n            role.label.spaLabel = event.target.value\n        }\n        else if (event.target.name === \"role.businessFunctions\") {\n            role.businessFunctions = Array.from(event.target.selectedOptions, (item) => item.value)\n        }\n\n        else if (event.target.name === \"role.canCreateRole\") {\n            role.canCreateRole = Array.from(event.target.selectedOptions, (item) => item.value)\n        }\n        // switch (event.target.name) {\n        //     case \"role.label.engLabel\": role.label.engLabel = event.target.value;\n        //     case \"role.label.porLabel\": role.label.porLabel = event.target.value;\n        //     case \"role.label.freLabel\": role.label.freLabel = event.target.value;\n        //     case \"role.label.spaLabel\": role.label.spaLabel = event.target.value;\n        //     // case \"role.businessFunctions\": role.businessFunctions = Array.from(event.target.selectedOptions, (item) => item.value);\n        //     // case \"role.canCreateRole\": role.canCreateRole = event.target.value;\n        //     // default: [event.target.name] = event.target.value;\n        // }\n\n        this.setState({\n            role\n        }, (\n        ) => {\n            console.log(\"state after update---\", this.state.role)\n        })\n    }\n\n\n    render() {\n        const { businessFunctions } = this.state;\n        const { roles } = this.state;\n\n        let businessFunctionsList = businessFunctions.length > 0\n            && businessFunctions.map((item, i) => {\n                return (\n                    <>\n                        <option key={i} value={item.businessFunctionId}>\n                            {(() => {\n                                switch (this.state.languageId) {\n                                    case 2: return (item.label.porLabel != null && item.label.porLabel != \"\" ? item.label.porLabel : item.label.engLabel);\n                                    case 3: return (item.label.freLabel != null && item.label.freLabel != \"\" ? item.label.freLabel : item.label.engLabel);\n                                    case 4: return (item.label.spaLabel != null && item.label.spaLabel != \"\" ? item.label.spaLabel : item.label.engLabel);\n                                    default: return item.label.engLabel;\n                                }\n                            })()}\n                        </option>\n                    </>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.porLabel != null && item.label.porLabel != \"\" ? item.label.porLabel : item.label.engLabel);\n                                case 3: return (item.label.freLabel != null && item.label.freLabel != \"\" ? item.label.freLabel : item.label.engLabel);\n                                case 4: return (item.label.spaLabel != null && item.label.spaLabel != \"\" ? item.label.spaLabel : item.label.engLabel);\n                                default: return item.label.engLabel;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n        return (\n            <div class=\"page-container page-navigation-toggled page-container-wide\">\n                <div class=\"page-content\">\n                    <ul class=\"breadcrumb\">\n                        <li><a href=\"#\">Home</a></li>\n                        <li><a href=\"#\">Admin</a></li>\n                        <li><a href=\"#\">Role</a></li>\n                        <li><a href=\"#\">Edit Role</a></li>\n                    </ul>\n                    <div class=\"page-content-wrap\">\n                        <div><h5>{this.state.message}</h5></div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n\n                                <form name=\"roleForm\" id=\"roleForm\" class=\"form-horizontal\">\n                                    <div class=\"panel panel-default\">\n                                        <div class=\"panel-heading\">\n                                            <h3 class=\"panel-title\">{labels.TITLE_EDIT_ROLE}</h3>\n                                        </div>\n                                        <div class=\"panel-body\">\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_ENG}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.engLabel\" class=\"form-control\" name=\"role.label.engLabel\" value={this.state.role.label.engLabel} onChange={this.dataChange} readOnly={true} />\n                                                    \n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_POR}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.porLabel\" name=\"role.label.porLabel\" class=\"form-control\" value={this.state.role.label.porLabel} onChange={this.dataChange} readOnly={true} />\n                                                    \n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_FRE}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.freLabel\" name=\"role.label.freLabel\" class=\"form-control\" value={this.state.role.label.freLabel} onChange={this.dataChange} readOnly={true} />\n                                                    \n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ROLE_NAME_SPA}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"role.label.spaLabel\" name=\"role.label.spaLabel\" class=\"form-control\" value={this.state.role.label.spaLabel} onChange={this.dataChange} readOnly={true} />\n                                                    \n                                                </div>\n                                            </div>\n\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.BUSINESS_FUNCTION}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"role.businessFunctions\" class=\"form-control select\" data-live-search=\"true\" data-actions-box=\"true\" name=\"role.businessFunctions\" multiple={true} value={this.state.role.businessFunctions} onChange={this.dataChange} placeholder=\"Please select business function\">\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {businessFunctionsList}\n                                                    </select>\n                                                    \n                                                </div>\n                                            </div>\n\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.CAN_CREATE_ROLE}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"role.canCreateRole\" className=\"form-control select\" data-live-search=\"true\" data-actions-box=\"true\" name=\"role.canCreateRole\" multiple={true} value={this.state.role.canCreateRole} onChange={this.dataChange}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {roleList}\n                                                    </select>\n                                                    \n                                                </div>\n                                            </div>\n                                            <button type=\"button\" className=\"btn btn-success\" onClick={this.submitClicked}>{labels.BTN_UPDATE}</button>\n                                            <button type=\"button\" className=\"btn btn-danger\" onClick={this.cancelClicked}>{labels.BTN_CANCEL}</button><br></br><br></br>\n\n                                        </div>\n                                        <div class=\"panel-footer\">\n                                            <div class=\"pull-right\">\n\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    submitClicked() {\n        console.log($(\"#role\\\\.businessFunctions\").val())\n        if (navigator.onLine) {\n            if (AuthenticationService.checkTypeOfSession()) {\n                if ($(\"#roleForm\").valid()) {\n\n                    UserService.editRole(this.state.role)\n                        .then(response => {\n                            this.props.history.push(`/roleList/${response.data.message}`)\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline or vice versa.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/roleList/` + \"Action Canceled\")\n    }\n\n}\n\n","import axios from \"axios\";\nimport {API_URL} from '../Constants.js'\nclass LanguageService{\n\naddLanguage(json){\n    return axios.put(`${API_URL}/api/addLanguage/`, json, {\n    });\n}\n\ngetLanguageList() {\n    return axios.get(`${API_URL}/api/getLanguageListAll/`, {\n    });\n}\ngetLanguageListActive() {\n    return axios.get(`${API_URL}/api/getLanguageList/`, {\n    });\n}\neditLanguage(json) {\n    return axios.put(`${API_URL}/api/editLanguage/`, json, {\n    });\n}\n\n}\n\nexport default new LanguageService()","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport * as myConst from '../../Labels.js';\nimport LanguageService from '../../api/LanguageService.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nclass AddLanguageComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            languageName: '',\n            message: ''\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n    }\n    updateFieldData(event) {\n        this.setState(\n            {\n                [event.target.name]: event.target.value\n            }\n        )\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        $(\"#languageForm\").validate({\n            ignore: [],\n            rules: {\n                languageName: {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 100\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    submitForm(event) {\n        if (navigator.onLine) {\n            if ($(\"#languageForm\").valid()) {\n                LanguageService.addLanguage(this.state).then(response => {\n                    this.props.history.push(`/languageList/${response.data.message}`)\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n        } else {\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\n    render() {\n        return (\n<>\n            \n                {/* <h3>{myConst.ADD_LANGUAGE}</h3>\n                <div><h5>{this.state.message}</h5></div>\n                <form name=\"languageForm\" id=\"languageForm\">\n                    <div>\n                        <label>{myConst.LANGUAGE_NAME}:-</label>\n                        <input type=\"text\" name=\"languageName\" value={this.Capitalize(this.state.languageName)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button> */}\n\n            <div className=\"page-content-wrap\">\n                <div className=\"row\">\n\n                <div className=\"\">\n                    <ul class=\"breadcrumb\">\n\n                    </ul>\n                </div>\n                <div className=\"col-md-6 col-md-offset-3\">\n\n            <div className=\"login mt-2\">\n                <div className=\"panel panel-default Box-shadow\">\n                    <div className=\"panel-heading\">\n                        <h3 className=\"panel-title\">Add Language</h3>\n\n                    </div>\n                     <div className=\"panel-body\">\n                    <div className=\"col-md-8 col-md-offset-2\">\n                            <div className=\"block\">\n                                  <form className=\"form-horizontal\"name=\"languageForm\" id=\"languageForm\">\n                                    <div className=\"form-group\">\n                                        <label className=\"col-md-4 control-label\">{myConst.LANGUAGE_NAME}:-</label>\n                                        <div className=\"col-md-8\">\n                                            <input type=\"text\" name=\"languageName\" value={this.state.languageName} onChange={this.updateFieldData} className=\"form-control\"></input>\n                                        </div>\n                                    </div>\n                               </form>     \n\n                 {/* <h3>{myConst.ADD_LANGUAGE}</h3> */}\n              \n            </div>\n            </div>\n            </div>\n            \n            <div className=\"panel-footer\">\n                     <button onClick={this.submitForm} type=\"button\" className=\"btn btn-success pull-right\">{myConst.SUBMIT_BUTTON}n</button></div>\n                </div>\n                </div>\n               \n                </div>\n            </div>\n        </div>\n        </>\n        );\n    }\n}\nexport default AddLanguageComponent;","import React, { Component } from 'react';\nimport LanguageService from '../../api/LanguageService.js'\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\n\nexport default class LanguageListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            langaugeList: []\n        }\n        this.editLanguage = this.editLanguage.bind(this);\n        this.addNewLanguage = this.addNewLanguage.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        LanguageService.getLanguageList()\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    langaugeList: response.data\n                })\n            })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n    }\n\n    editLanguage(language) {\n        this.props.history.push({\n            pathname: \"/editLanguage\",\n            state: { language: language }\n        });\n    }\n\n    addNewLanguage(){\n        if (navigator.onLine) {\n            this.props.history.push(`/addLanguage`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n    }\n\n    render() {\n        return (\n            <>\n            <p>{this.props.match.params.message}</p>\n            <div>\n             <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewLanguage}>{myConst.ADD_NEW_LANGUAGE_TITLE}</button><br /><br />\n            </div>  \n              <div className=\"langaugeList\">\n\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.LANGUAGE_NAME}</th>\n                                <th>{myConst.IS_ACTIVE}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.langaugeList.map(language =>\n\n                                    <tr key={language.languageId} onClick={() => this.editLanguage(language)}>\n                                        <td>{language.languageName}</td>\n                                        <td>{language.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}</td>\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </>\n        );\n    }\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport LanguageService from '../../api/LanguageService.js'\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\n\nexport default class EditLanguageComponent extends Component {\n\n    constructor(props) {\n\n        super(props);\n        this.state = { language: {languageName:''}, message:'' }\n\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n       \n    }\n    componentDidMount() {\n       AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            language: this.props.location.state.language\n        });\n        console.log(this.state);\n        $(\"#updateLanguageForm\").validate({\n            ignore: [],\n            rules: {\n                'language.languageName': {\n                    required: true,\n                    lettersonly: true,\n                    maxlength: 100\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    updateFieldData(event) {\n\n        let { language } = this.state\n\n        if (event.target.name === \"language.languageName\") {\n            console.log(\"inside if\")\n            language.languageName = event.target.value\n        } else if (event.target.name === \"language.active\") {\n            language.active = event.target.id === \"language.active2\" ? false : true\n        }\n\n        this.setState(\n            {\n                language\n            }\n        );\n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    updateForm() {\n        if (navigator.onLine) {\n            if ($(\"#updateLanguageForm\").valid()) {\n\n                LanguageService.editLanguage(this.state.language).then(response => {\n                    this.props.history.push(`/languageList/${response.data.message}`)\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.response.data\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n\n            }\n        } else { alert(\"To perform this action you must be online.\"); }\n    }\n\n    render() {\n\n        return (\n            <>\n                <h3>{myConst.UPDATE_LANGUAGE}</h3>\n                <form name=\"updatyeLanguageForm\" id=\"updateLanguageForm\">\n                    <div>\n                        <label>{myConst.LANGUAGE_NAME}:-</label>\n                        <input type=\"text\" name=\"language.languageName\" value={this.Capitalize(this.state.language.languageName)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <div>\n                            {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"language.active1\" name=\"language.active\" value={true} checked={this.state.language.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"language.active2\" name=\"language.active\" value={false} checked={this.state.language.active === false} onChange={this.updateFieldData} /> Disabled\n        </div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n\n        );\n    }\n}","import axios from \"axios\";\nimport {API_URL} from '../Constants.js';\n\nclass DataSourceTypeService{\n\naddDataSourceType(json){\nreturn axios.put(`${API_URL}/api/addDataSourceType/`,json,{}\n);\n}\n\ngetDataSourceTypeList() {\n    return axios.get(`${API_URL}/api/getDataSourceTypeList/`, {\n    });\n}\n\ngetDataSourceTypeListActive() {\n    return axios.get(`${API_URL}/api/getDataSourceTypeListActive/`, {\n    });\n}\n\neditDataSourceType(json) {\n    return axios.put(`${API_URL}/api/editDataSourceType/`, json, {\n    });\n}\n}\nexport default new DataSourceTypeService();","import React,{Component} from 'react';\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport DataSourceTypeService from '../../api/DataSourceTypeService.js'\n\nexport default class AddDataSourceTypeComponent extends Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            label_en:''\n         }\n\n         this.updateFieldData=this.updateFieldData.bind(this);\n         this.submitForm=this.submitForm.bind(this);\n         this.Capitalize=this.Capitalize.bind(this);\n\n    }\n\n    componentDidMount(){\n        AuthenticationService.setupAxiosInterceptors();\n        $(\"#dataSourceTypeForm\").validate({\n            ignore: [],\n            rules: {\n                'label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n                // 'freLabel': {\n                   \n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'spaLabel': {\n                    \n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'porLabel': {\n                    \n                //     lettersonly: true,\n                //     maxlength: 255\n                // }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n\n    }\n\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    updateFieldData(event){\n       //console.log(event.target.name); \n        this.setState(\n           {\n                [event.target.name]: event.target.value      \n            }\n        )\n\n    }\n\n    submitForm(){\n        if (navigator.onLine) {\n            if ($(\"#dataSourceTypeForm\").valid()) {\n                console.log(this.state);\n                DataSourceTypeService.addDataSourceType(this.state).then(response => {\n                    this.props.history.push(`/dataSourceTypeList/${response.data.message}`)\n                    console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n               \n\n\n            }\n        }else{\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\nrender(){\n        return(\n         <>\n        <h3>{myConst.ADD_DATASOURCE_TYPE}</h3>\n                <form name=\"dataSourceTypeForm\" id=\"dataSourceTypeForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"label_en\" value={this.Capitalize(this.state.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    {/* <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"freLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"spaLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/>\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"porLabel\"  onChange={this.updateFieldData} />\n                    </div>\n                    <br/><br/> */}\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n        </>);\n    }\n}","import React, { Component } from 'react';\nimport DataSourceTypeService from '../../api/DataSourceTypeService'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\n\nexport default class DataSourceListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSourceList: []\n\n        }\n\n        this.editDataSourceType = this.editDataSourceType.bind(this);\n        this.addNewDataSourceType = this.addNewDataSourceType.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        DataSourceTypeService.getDataSourceTypeList().then(response => {\n            //console.log(response.data)\n            this.setState({\n                dataSourceList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    editDataSourceType(dataSourceType) {\n        this.props.history.push({\n            pathname: \"/editDataSourceType\",\n            state: { dataSourceType: dataSourceType }\n        });\n\n    }\n\n    addNewDataSourceType() {\n\n        if (navigator.onLine) {\n            this.props.history.push(`/addDataSourceType`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n\n    }\n    render() {\n        return (\n            <>\n\n                <p>{this.props.match.params.message}</p>\n                <div>\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewDataSourceType}>{myConst.ADD_NEW_DATA_SOURCE_TYPE}</button><br /><br />\n                </div>\n\n                <div className=\"dataSourceTypeList\">\n\n                    <h1>{myConst.DATA_SOURCE_TYPE_LIST}</h1>\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_EN}</th>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_FR}</th>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_SP}</th>\n                                <th>{myConst.DATASOURCE_TYPE_NAME_PO}</th>\n                                <th>{myConst.DATA_SOURCE_TYPE_ACTIVE}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.dataSourceList.map(dataSourceType =>\n\n                                    <tr key={dataSourceType.dataSourceTypeId} onClick={() => this.editDataSourceType(dataSourceType)}>\n                                        <td>{dataSourceType.label.label_en}</td>\n                                        <td>{dataSourceType.label.label_fr}</td>\n                                        <td>{dataSourceType.label.label_sp}</td>\n                                        <td>{dataSourceType.label.label_pr}</td>\n                                        <td>{dataSourceType.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}</td>\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n            </>\n        );\n    }\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport DataSourceTypeService from '../../api/DataSourceTypeService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class UpdateDataSourceTypeComponent extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSourceType:\n            {\n                active: '',\n                \n                label: {\n                    label_en: '',\n                    // spaLabel: '',\n                    // freLabel: '',\n                    // porLabel: '',\n                    labelId: '',\n                }\n            }\n        }\n\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n        this.cancelClicked=this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        console.log(this.props.location.state.dataSourceType);\n        this.setState({\n            dataSourceType: this.props.location.state.dataSourceType\n        });\n\n\n        $(\"#updatyeDataSourceTypeForm\").validate({\n            ignore: [],\n            rules: {\n                'dataSourceType.label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                }\n                // 'dataSourceType.label.freLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'dataSourceType.label.spaLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'dataSourceType.label.porLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n\n    updateFieldData(event) {\n        let { dataSourceType } = this.state\n\n        if (event.target.name === \"dataSourceType.label.label_en\") {\n            console.log(\"inside if\")\n            dataSourceType.label.label_en = event.target.value\n        } \n        // if (event.target.name === \"dataSourceType.label.freLabel\") {\n        //     console.log(\"inside if\")\n        //     dataSourceType.label.freLabel = event.target.value\n        // } if (event.target.name === \"dataSourceType.label.spaLabel\") {\n        //     console.log(\"inside if\")\n        //     dataSourceType.label.spaLabel = event.target.value\n        // } if (event.target.name === \"dataSourceType.label.porLabel\") {\n        //     console.log(\"inside if\")\n        //     dataSourceType.label.porLabel = event.target.value\n        // }\n         else if (event.target.name === \"dataSourceType.active\") {\n            dataSourceType.active = event.target.id === \"dataSourceType.active2\" ? false : true\n        }\n\n\n        this.setState(\n            {\n                dataSourceType\n            }\n        )\n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    cancelClicked() {\n        this.props.history.push(`/dataSourceTypeList/` + \"Action Canceled\") \n    }\n\n    updateForm() {\n\n        if (navigator.onLine) {\n\n            if ($(\"#updatyeDataSourceTypeForm\").valid()) {\n\n                DataSourceTypeService.editDataSourceType(this.state.dataSourceType).then(response => {\n                    //this.props.history.push(`/languageList/${response.data.message}`)\n                    this.props.history.push(`/dataSourceTypeList/${response.data.message}`)\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n\n            }\n        }else{\n\n            alert(\"To perform this action you must be online.\");\n        }\n\n    }\n\n    render() {\n\n        return (\n            <>\n\n                <h3>{myConst.UPDATE_DATA_SOURCE_TYPE}</h3>\n                <form name=\"updatyeDataSourceTypeForm\" id=\"updatyeDataSourceTypeForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.label_en\" value={this.Capitalize(this.state.dataSourceType.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/* <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.freLabel\" value={this.state.dataSourceType.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.spaLabel\" value={this.state.dataSourceType.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"dataSourceType.label.porLabel\" value={this.state.dataSourceType.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br /> */}\n                    <div>\n                        {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"dataSourceType.active1\" name=\"dataSourceType.active\" value={true} checked={this.state.dataSourceType.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"dataSourceType.active2\" name=\"dataSourceType.active\" value={false} checked={this.state.dataSourceType.active === false} onChange={this.updateFieldData} /> Disabled\n                     </div>\n                    {/* <input type=\"hidden\" name=\"dataSourceType.labelId\" value={this.state.dataSourceType.labelId} /> */}\n                    <div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                        <button type=\"button\" onClick={this.cancelClicked}>{myConst.BTN_CANCEL}</button><br></br><br></br>\n                    </div>\n                </form>\n\n\n\n            </>\n        );\n    }\n\n\n}\n\n","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass DataSourceService {\n\n    addDataSource(json) {\n        return axios.put(`${API_URL}/api/addDataSource/`, json, {}\n        );\n    }\n\n    getDataSourceList() {\n        return axios.get(`${API_URL}/api/getDataSourceList/`, {\n        });\n    }\n\n    editDataSource(json) {\n        return axios.put(`${API_URL}/api/editDataSource/`,json,{}\n            );\n        }\n    \n}\nexport default new DataSourceService();","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport DataSourceService from '../../api/DataSourceService';\nimport DataSourceTypeService from '../../api/DataSourceTypeService';\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class AddDataSource extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message:'',\n            label: {\n                label_en: ''\n                // freLabel: '',\n                // spaLabel: '',\n                // porLabel: ''\n            },\n            dataSourceType: {\n                dataSourceTypeId: ''\n            },\n            dataSourceTypeList: []\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        DataSourceTypeService.getDataSourceTypeListActive().then(response => {\n            //console.log(response.data)\n            this.setState({\n                dataSourceTypeList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n        $(\"#dataSourceForm\").validate({\n            ignore: [],\n            rules: {\n                'label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n                // 'label.freLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'label.spaLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'label.porLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                'dataSourceType.dataSourceTypeId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    updateFieldData(event) {\n        if (event.target.name === \"label.label_en\") {\n            //console.log(\"inside if\")\n            this.state.label.label_en = event.target.value\n        }\n        // if (event.target.name === \"label.freLabel\") {\n        //     //console.log(\"inside if\")\n        //     this.state.label.freLabel = event.target.value\n        // } if (event.target.name === \"label.spaLabel\") {\n        //     //console.log(\"inside if\")\n        //     this.state.label.spaLabel = event.target.value\n        // } if (event.target.name === \"label.porLabel\") {\n        //     //console.log(\"inside if\")\n        //     this.state.label.porLabel = event.target.value\n        // }\n        else if (event.target.name === \"dataSourceType.dataSourceTypeId\") {\n            this.state.dataSourceType.dataSourceTypeId = event.target.value\n        }\n\n        let { dataSource } = this.state\n        this.setState(\n            {\n                dataSource\n            }\n        )\n\n\n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    submitForm() {\n\n        if (navigator.onLine) {\n            if ($(\"#dataSourceForm\").valid()) {\n                console.log(this.state);\n                //delete this.state[\"dataSourceTypeList\"];\n                DataSourceService.addDataSource(this.state).then(response => {\n                    this.props.history.push(`/dataSourceList/${response.data.message}`)\n                    //console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n               \n\n            }\n        } else {\n            alert(\"To perform this action you must be online.\");\n\n        }\n\n    }\n\n\n    render() {\n        const { dataSourceTypeList } = this.state;\n        let dataSourceTypes = dataSourceTypeList.length > 0\n            && dataSourceTypeList.map((item, i) => {\n                return (\n                    <option key={i} value={item.dataSourceTypeId}>{item.label.label_en}</option>\n                )\n            }, this);\n        return (\n            <>\n                <div><h5>{this.state.message}</h5></div>\n                <h3>{myConst.ADD_DATASOURCE}</h3>\n                <form name=\"dataSourceForm\" id=\"dataSourceForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"label.label_en\" value={this.Capitalize(this.state.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/* <div>\n                        <label>{myConst.DATASOURCE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"label.freLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"label.spaLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"label.porLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br /> */}\n\n                    <div>\n                        {myConst.SELECT_DATA_SOURCE_TYPE} : <select id=\"dataSourceTypeId\" name=\"dataSourceType.dataSourceTypeId\" onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {dataSourceTypes}\n                        </select>\n                    </div>\n                    <br></br>\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n        );\n\n    }\n\n}","import React,{Compoent, Component} from 'react';\nimport DataSourceService from '../../api/DataSourceService';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\n\n\nexport default class DataSourceListComponent extends Component{\n\nconstructor(props){\nsuper(props);\nthis.state={\ndataSourceList:[]\n\n}\nthis.editDataSource=this.editDataSource.bind(this);\nthis.addNewDataSource=this.addNewDataSource.bind(this);\n}\n\ncomponentDidMount() {\n    AuthenticationService.setupAxiosInterceptors();\n    DataSourceService.getDataSourceList().then(response => {        \n        this.setState({\n            dataSourceList: response.data\n        })\n    })\n        .catch(\n            error => {\n                switch (error.message) {\n                    case \"Network Error\":\n                        this.setState({\n                            message: error.message\n                        })\n                        break\n                    default:\n                        this.setState({\n                            message: error.message\n                        })\n                        break\n                }\n            }\n        );\n}\n\neditDataSource(dataSource) {\n    this.props.history.push({\n        pathname: \"/editDataSource\",\n        state: { dataSource: dataSource }\n    });\n\n}\n\naddNewDataSource(){\n\n    if (navigator.onLine) {\n        this.props.history.push(`/addDataSource`)\n    } else {\n        alert(\"You must be Online.\")\n    }\n\n}\n\nrender() {\n    return (\n        <>\n\n            <p>{this.props.match.params.message}</p>\n            <div>\n                <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewDataSource}>{myConst.ADD_NEW_DATA_SOURCE}</button><br /><br />\n            </div>\n\n            <div className=\"dataSourceList\">\n\n                <h1>{myConst.DATA_SOURCE_LIST}</h1>\n                <table border=\"1\" align=\"center\">\n                    <thead>\n                        <tr>\n                            <th>{myConst.DATASOURCE_NAME_EN}</th>\n                            <th>{myConst.DATASOURCE_NAME_FR}</th>\n                            <th>{myConst.DATASOURCE_NAME_SP}</th>\n                            <th>{myConst.DATASOURCE_NAME_PO}</th>\n                            <th>{myConst.DATASOURCE_TYPE_NAME_EN}</th>\n                            <th>{myConst.DATASOURCE_ACTIVE}</th>\n                            \n\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.dataSourceList.map(dataSource =>\n\n                                <tr key={dataSource.dataSourceId} onClick={() => this.editDataSource(dataSource)}>\n                                    <td>{dataSource.label.label_en}</td>\n                                    <td>{dataSource.label.label_fr}</td>\n                                    <td>{dataSource.label.label_sp}</td>\n                                    <td>{dataSource.label.label_pr}</td>\n                                    <td>{dataSource.dataSourceType.label.engLabel}</td>\n                                    <td>{dataSource.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}</td>\n                                </tr>\n                            )\n\n                        }\n                    </tbody>\n                </table>\n            </div>\n\n        </>\n    );\n}\n\n}","import React, { Component } from 'react';\nimport DataSourceTypeService from '../../api/DataSourceTypeService';\nimport DataSourceService from '../../api/DataSourceService';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class UpdateDataSourceComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            dataSource: {\n                message:'',\n                active: '',\n                dataSourceId: '',\n                label: {\n                    label_en: '',\n                    // spaLabel: '',\n                    // freLabel: '',\n                    // porLabel: '',\n                    labelId: '',\n                },\n                dataSourceType: {\n                    dataSourceTypeId: ''\n                }\n            },\n            dataSourceTypeList: []\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n        this.cancelClicked=this.cancelClicked.bind(this);\n    }\n\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            dataSource: this.props.location.state.dataSource\n        });\n\n        DataSourceTypeService.getDataSourceTypeListActive().then(response => {\n            //console.log(response.data)\n            this.setState({\n                dataSourceTypeList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#updatyeDataSourceForm\").validate({\n            ignore: [],\n            rules: {\n                'dataSource.label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n                // 'dataSource.label.freLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'dataSource.label.spaLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'dataSource.label.porLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                'dataSource.dataSourceType.dataSourceTypeId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n\n    updateFieldData(event) {\n\n        let { dataSource } = this.state\n\n        if (event.target.name === \"dataSource.label.label_en\") {\n            // console.log(\"inside if\")\n            dataSource.label.label_en = event.target.value\n        } \n        // if (event.target.name === \"dataSource.label.freLabel\") {\n        //     //onsole.log(\"inside if\")\n        //     dataSource.label.freLabel = event.target.value\n        // } if (event.target.name === \"dataSource.label.spaLabel\") {\n        //     //console.log(\"inside if\")\n        //     dataSource.label.spaLabel = event.target.value\n        // } if (event.target.name === \"dataSource.label.porLabel\") {\n        //     //console.log(\"inside if\")\n        //     dataSource.label.porLabel = event.target.value\n        // } \n        if (event.target.name === \"dataSource.dataSourceType.dataSourceTypeId\") {\n            this.state.dataSource.dataSourceType.dataSourceTypeId = event.target.value\n        } else if (event.target.name === \"dataSource.active\") {\n            //console.log(\"hi----\");\n            dataSource.active = event.target.id === \"dataSource.active2\" ? false : true\n        }\n\n\n        this.setState(\n            {\n                dataSource\n            }\n        )\n\n\n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    cancelClicked() {\n        this.props.history.push(`/dataSourceList/` + \"Action Canceled\") \n    }\n    updateForm() {\n\n        if (navigator.onLine) {\n            if ($(\"#updatyeDataSourceForm\").valid()) {\n                //console.log(this.state);\n                DataSourceService.editDataSource(this.state.dataSource).then(response => {\n                    this.props.history.push(`/dataSourceList/${response.data.message}`)\n                    //console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n\n        } else {\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\n    render() {\n        const { dataSourceTypeList } = this.state;\n        let dataSourceTypes = dataSourceTypeList.length > 0\n            && dataSourceTypeList.map((item, i) => {\n                return (\n                    <option key={i} value={item.dataSourceTypeId}>{item.label.label_en}</option>\n                )\n            }, this);\n        return (\n\n            <>\n                <div><h5>{this.state.message}</h5></div>\n                <h3>{myConst.UPDATE_DATASOURCE}</h3>\n                <form name=\"updatyeDataSourceForm\" id=\"updatyeDataSourceForm\">\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.label_en\" value={this.Capitalize(this.state.dataSource.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/* <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.freLabel\" value={this.state.dataSource.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.spaLabel\" value={this.state.dataSource.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.DATASOURCE_TYPE_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"dataSource.label.porLabel\" value={this.state.dataSource.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br /> */}\n                    <div>\n                        {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"dataSource.active1\" name=\"dataSource.active\" value={true} checked={this.state.dataSource.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"dataSource.active2\" name=\"dataSource.active\" value={false} checked={this.state.dataSource.active === false} onChange={this.updateFieldData} /> Disabled\n                     </div>\n                    <br /><br />\n                    <div>\n                        {myConst.SELECT_DATA_SOURCE_TYPE} : <select id=\"dataSourceTypeId\" name=\"dataSource.dataSourceType.dataSourceTypeId\" value={this.state.dataSource.dataSourceType ? this.state.dataSource.dataSourceType.dataSourceTypeId : ''} onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {dataSourceTypes}\n                        </select>\n                    </div>\n                    <br /><br />\n                    <input type=\"hidden\" name=\"dataSource.dataSourceId\" value={this.state.dataSource.dataSourceId} />\n                    <input type=\"hidden\" name=\"dataSource.label.labelId\" value={this.state.dataSource.label.labelId} />\n                    <div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                        <button type=\"button\" onClick={this.cancelClicked}>{myConst.BTN_CANCEL}</button><br></br><br></br>\n                    </div>\n                </form>\n            </>\n\n        );\n\n\n    }\n\n}","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass CurrencyService {\n\n    addCurrency(json) {\n        return axios.put(`${API_URL}/api/addCurrency/`, json, {}\n        );\n    }\n\n    getCurrencyList() {\n        return axios.get(`${API_URL}/api/getCurrencyList/`, {\n        });\n    }\n    \n    getCurrencyListActive() {\n        return axios.get(`${API_URL}/api/getCurrencyListActive/`, {\n        });\n    }\n    editCurrency(json) {\n        return axios.put(`${API_URL}/api/editCurrency/`, json, {}\n        );\n    }\n}\nexport default new CurrencyService();","import React, { Component } from 'react';\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport CurrencyService from '../../api/CurrencyService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nexport default class AddCurrencyComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currencyCode: '',\n            currencySymbol: '',\n            label: {\n                label_en: ''\n                // freLabel: '',\n                // spaLabel: '',\n                // porLabel: ''\n            },\n            conversionRateToUsd: ''\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        // this.UpperCase=this.UpperCase.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        $(\"#currencyForm\").validate({\n            ignore: [],\n            rules: {\n                'label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n                // 'label.freLabel': {\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'label.spaLabel': {\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'label.porLabel': {\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                'currencyCode': {\n                    lettersonly: true,\n                    required: true,\n                    maxlength: 3\n                },\n                'currencySymbol': {\n                    lettersonlyspecialchar:true,\n                    required: true,\n                    maxlength: 3\n                },\n                'conversionRateToUsd': {\n                    positiveintegerdecimal:true,\n                    required: true\n                    //integer:true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    // UpperCase(str) {\n    //     return str.toUpperCase();\n    // }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    updateFieldData(event) {\n        // switch (event.target.name) {\n        //     case \"currencyCode\": this.state.currencyCode = event.target.value;\n        //     case \"currencySymbol\": this.state.currencySymbol = event.target.value;\n        //     case \"label.engLabel\": this.state.label.engLabel = event.target.value;\n        //     case \"label.freLabel\": this.state.label.freLabel = event.target.value;\n        //     case \"label.spaLabel\": this.state.label.spaLabel = event.target.value;\n        //     case \"label.porLabel\": this.state.label.porLabel = event.target.value;\n        //     case \"conversionRateToUsd\": this.state.conversionRateToUsd = event.target.value;\n        //     default: break;\n        // }\n        if(event.target.name === \"currencyCode\"){\n            this.state.currencyCode = event.target.value.toUpperCase();\n        }if(event.target.name === \"currencySymbol\"){\n            this.state.currencySymbol = event.target.value;\n        }if(event.target.name === \"label.label_en\"){\n            this.state.label.label_en = event.target.value;\n         }\n        // if(event.target.name === \"label.freLabel\"){\n        //     this.state.label.freLabel = event.target.value;\n        // }if(event.target.name === \"label.spaLabel\"){\n        //     this.state.label.spaLabel = event.target.value;\n        // }if(event.target.name === \"label.porLabel\"){\n        //     this.state.label.porLabel = event.target.value;\n        // }\n        else if(event.target.name === \"conversionRateToUsd\"){\n            this.state.conversionRateToUsd = event.target.value;\n        }\n        let { currency } = this.state\n        this.setState(\n            {\n                currency\n            }\n        )\n\n    }\n\n  \n    submitForm() {\n\n        if (navigator.onLine) {\n\n            if ($(\"#currencyForm\").valid()) {\n                console.log(this.state);\n                CurrencyService.addCurrency(this.state).then(response => {\n                    this.props.history.push(`/currencyList/${response.data.message}`)\n                    console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n        } else {\n\n            alert(\"To perform this action you must be online.\");\n        }\n\n    }\n\n    render() {\n        return (\n            <>\n                <h3>{myConst.ADD_CURRENCY}</h3>\n                <div><h5>{this.state.message}</h5></div>\n                <form name=\"currencyForm\" id=\"currencyForm\">\n                    <div>\n                        <label>{myConst.CURRENCY_CODE}:-</label>\n                        <input type=\"text\" name=\"currencyCode\" value={this.state.currencyCode} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_SYMBOL}:-</label>\n                        <input type=\"text\" name=\"currencySymbol\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"label.label_en\" value={this.Capitalize(this.state.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/* <div>\n                        <label>{myConst.CURRENCY_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"label.freLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"label.spaLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"label.porLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br /> */}\n                    <div>\n                        <label>{myConst.CONVERSIONRATE_TO_USD}:-</label>\n                        <input type=\"text\" name=\"conversionRateToUsd\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n\n            </>\n        );\n    }\n}","import React, { Compoent, Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport CurrencyService from '../../api/CurrencyService.js';\nimport * as myConst from '../../Labels.js';\n\n\nexport default class CurrencyListComponent extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currencyList: []\n        }\n        this.editCurrency = this.editCurrency.bind(this);\n        this.addNewCurrency=this.addNewCurrency.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        CurrencyService.getCurrencyList().then(response => {\n            this.setState({\n                currencyList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n\n    }\n\n    editCurrency(currency) {\n        this.props.history.push({\n            pathname: \"/editCurrency\",\n            state: { currency: currency }\n        });\n\n    }\n\n    addNewCurrency(){\n\n        if (navigator.onLine) {\n            this.props.history.push(`/addCurrency`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n    }\n    render() {\n\n        return (\n            <>\n                 <p>{this.props.match.params.message}</p>\n                <div>\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewCurrency}>{myConst.ADD_NEW_CURRENCY}</button><br /><br />\n                </div>\n\n                <div className=\"currencyList\">\n\n                    <h1>{myConst.CURRENCY_LIST}</h1>\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.CURRENCY_CODE}</th>\n                                <th>{myConst.CURRENCY_SYMBOL}</th>\n                                <th>{myConst.CURRENCY_NAME_EN}</th>\n                                <th>{myConst.CURRENCY_NAME_FR}</th>\n                                <th>{myConst.CURRENCY_NAME_SP}</th>\n                                <th>{myConst.CURRENCY_NAME_PO}</th>\n                                <th>{myConst.CONVERSIONRATE_TO_USD}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.currencyList.map(currency =>\n                                    <tr key={currency.currencyId} onClick={() => this.editCurrency(currency)}>\n                                        <td>{currency.currencyCode}</td>\n                                        <td>{currency.currencySymbol}</td>\n                                        <td>{currency.label.label_en}</td>\n                                        <td>{currency.label.label_fr}</td>\n                                        <td>{currency.label.label_sp}</td>\n                                        <td>{currency.label.label_pr}</td>\n                                        <td>{currency.conversionRateToUsd}</td>\n\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n            </>\n        );\n    }\n\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport CurrencyService from '../../api/CurrencyService.js';\n\nexport default class UpdateCurrencyComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currency: {\n                currencyCode: '',\n                currencySymbol: '',\n                label: {\n                    label_en: ''\n                    // freLabel: '',\n                    // spaLabel: '',\n                    // porLabel: ''\n                },\n                conversionRateToUsd: ''\n            }\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n        // this.UpperCase=this.UpperCase.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n        this.cancelClicked=this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            currency: this.props.location.state.currency\n        });\n        $(\"#updateCurrencyForm\").validate({\n            ignore: [],\n            rules: {\n                'currency.label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n                // 'currency.label.freLabel': {\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'currency.label.spaLabel': {\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'currency.label.porLabel': {\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                'currency.currencyCode': {\n                    lettersonly: true,\n                    required: true,\n                    maxlength: 3\n                },\n                'currency.currencySymbol': {\n                    required: true,\n                    lettersonlyspecialchar: true,\n                    maxlength: 3\n                },\n                'currency.conversionRateToUsd': {\n                    positiveintegerdecimal: true,\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n\n    updateFieldData(event) {\n        let { currency } = this.state\n\n        if (event.target.name === \"currency.currencyCode\") {\n            this.state.currency.currencyCode = event.target.value.toUpperCase();\n        }\n        if (event.target.name === \"currency.currencySymbol\") {\n            this.state.currency.currencySymbol = event.target.value;\n        }\n        if (event.target.name === \"currency.label.engLabel\") {\n            this.state.currency.label.engLabel = event.target.value\n        }\n        // if (event.target.name === \"currency.label.freLabel\") {\n        //     this.state.currency.label.freLabel = event.target.value\n        // }\n        // if (event.target.name === \"currency.label.spaLabel\") {\n        //     this.state.currency.label.spaLabel = event.target.value\n        // }\n        // if (event.target.name === \"currency.label.porLabel\") {\n        //     this.state.currency.label.porLabel = event.target.value\n        // }\n        else if (event.target.name === \"currency.conversionRateToUsd\") {\n            this.state.currency.conversionRateToUsd = event.target.value\n        }\n        // switch (event.target.name) {\n        //     case \"currency.currencyCode\": this.state.currency.currencyCode = event.target.value;\n        //     case \"currency.currencySymbol\": this.state.currency.currencySymbol = event.target.value;\n        //     case \"currency.label.engLabel\": this.state.currency.label.engLabel = event.target.value;\n        //     case \"currency.label.freLabel\": this.state.currency.label.freLabel = event.target.value;\n        //     case \"currency.label.spaLabel\": this.state.currency.label.spaLabel = event.target.value;\n        //     case \"currency.label.porLabel\": this.state.currency.label.porLabel = event.target.value;\n        //     case \"currency.conversionRateToUsd\": this.state.currency.conversionRateToUsd = event.target.value;\n        //     default: break;\n        // }\n        this.setState(\n            {\n                currency\n            }\n        )\n\n    }\n\n    // UpperCase(str) {\n    //     return str.toUpperCase();\n    // }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    cancelClicked() {\n        this.props.history.push(`/currencyList/` + \"Action Canceled\") \n    }\n    updateForm() {\n\n        if (navigator.onLine) {\n\n            if ($(\"#updateCurrencyForm\").valid()) {\n\n                CurrencyService.editCurrency(this.state.currency).then(response => {\n                    this.props.history.push(`/currencyList/${response.data.message}`)\n                    console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n\n\n        }\n\n        else {\n            alert(\"To perform this action you must be online.\");\n        }\n\n    }\n\n    render() {\n\n        return (\n            <>\n                <h3>{myConst.UPDATE_CURRENCY}</h3>\n                <form name=\"updateCurrencyForm\" id=\"updateCurrencyForm\">\n                    <div>\n                        <label>{myConst.CURRENCY_CODE}:-</label>\n                        <input type=\"text\" name=\"currency.currencyCode\" value={this.state.currency.currencyCode} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_SYMBOL}:-</label>\n                        <input type=\"text\" name=\"currency.currencySymbol\" value={this.state.currency.currencySymbol} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"currency.label.label_en\" value={this.Capitalize(this.state.currency.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/* <div>\n                        <label>{myConst.CURRENCY_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"currency.label.freLabel\" value={this.state.currency.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"currency.label.spaLabel\" value={this.state.currency.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.CURRENCY_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"currency.label.porLabel\" value={this.state.currency.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br /> */}\n                    <div>\n                        <label>{myConst.CONVERSIONRATE_TO_USD}:-</label>\n                        <input type=\"text\" name=\"currency.conversionRateToUsd\" value={this.state.currency.conversionRateToUsd} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                        <button type=\"button\" onClick={this.cancelClicked}>{myConst.BTN_CANCEL}</button><br></br><br></br>\n                    </div>\n                </form> \n            </>\n        );\n\n    }\n\n\n}","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass CountryService {\n\n    addCountry(json) {\n        return axios.put(`${API_URL}/api/addCountry/`, json, {}\n        );\n    }\n\n    getCountryListAll() {\n        return axios.get(`${API_URL}/api/getCountryListAll/`, {\n        });\n    }\n    getCountryListActive() {\n        return axios.get(`${API_URL}/api/getCountryListActive/`, {\n        });\n    }\n\n    editCountry(json) {\n        return axios.put(`${API_URL}/api/editCountry/`, json, {}\n        );\n    }\n\n    getRealmCountryList() {\n        return axios.get(`${API_URL}/api/getRealmCountryList/`, {\n        });\n    }\n    getRealmCountryListByRealmId(realmId) {\n        return axios.get(`${API_URL}/api/getRealmCountryListByRealmId/${realmId}`, {\n        });\n    }\n\n}\nexport default new CountryService();","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport LanguageService from '../../api/LanguageService.js';\nimport CurrencyService from '../../api/CurrencyService.js';\nimport CountryService from '../../api/CountryService.js'\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class AddCountryComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            label: {\n                label_en:''\n            },\n            currency: {\n                currencyId: ''\n            },\n            language: {\n                languageId: ''\n            },\n            languageList: [],\n            currencyList: [],\n\n        }\n\n        this.submitForm = this.submitForm.bind(this);\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        LanguageService.getLanguageListActive().then(response => {\n            this.setState({\n                languageList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                });\n\n        CurrencyService.getCurrencyListActive().then(response => {\n            this.setState({\n                currencyList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                });\n\n\n        $(\"#countryForm\").validate({\n            ignore: [],\n            rules: {\n                'label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255,\n                    \n                },\n                // 'label.freLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'label.spaLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'label.porLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                'currency.currencyId': {\n                    required: true\n                },\n                'language.languageId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    updateFieldData(event) {\n        if (event.target.name === \"label.label_en\") {\n            this.state.label.label_en = event.target.value\n        }\n        // if (event.target.name === \"label.freLabel\") {\n        //     this.state.label.freLabel = event.target.value\n        // } if (event.target.name === \"label.spaLabel\") {\n        //     this.state.label.spaLabel = event.target.value\n        // } if (event.target.name === \"label.porLabel\") {\n        //     this.state.label.porLabel = event.target.value\n        // }\n        if (event.target.name === \"currency.currencyId\") {\n            this.state.currency.currencyId = event.target.value\n        } else if (event.target.name === \"language.languageId\") {\n            this.state.language.languageId = event.target.value\n        }\n        let { currency } = this.state\n        this.setState(\n            {\n                currency\n            }\n        )\n    }\n    submitForm() {\n\n        if (navigator.onLine) {\n\n            if ($(\"#countryForm\").valid()) {\n                CountryService.addCountry(this.state).then(response => {\n                    this.props.history.push(`/countryList/${response.data.message}`)\n                    //console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n        } else {\n\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n   \n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    render() {\n        const { languageList } = this.state;\n        let languageItems = languageList.length > 0\n            && languageList.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>{item.languageName}</option>\n                )\n            }, this);\n\n        const { currencyList } = this.state;\n        let currencyItems = currencyList.length > 0\n            && currencyList.map((itemOne, i) => {\n                return (\n                    <option key={i} value={itemOne.currencyId}>{itemOne.label.label_en}</option>\n                )\n            }, this);\n        return (\n\n            <>\n                <h3>{myConst.ADD_COUNTRY}</h3>\n                <form name=\"countryForm\" id=\"countryForm\">\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"label.label_en\" value={this.Capitalize(this.state.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/* <div>\n                        <label>{myConst.COUNTRY_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"label.freLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"label.spaLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"label.porLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br /> */}\n\n                    <div>\n                        {myConst.SELECT_LANGUAGE} : <select id=\"langaugeId\" name=\"language.languageId\" onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {languageItems}\n                        </select>\n                    </div>\n                    <br></br>\n                    <div>\n                        {myConst.SELECT_CURRENCY} : <select id=\"currencyId\" name=\"currency.currencyId\" onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {currencyItems}\n                        </select>\n                    </div>\n                    <br></br>\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n\n            </>\n        );\n    }\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport CountryService from '../../api/CountryService.js';\nimport * as myConst from '../../Labels.js';\n\nexport default class CountryListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            countryList: []\n        }\n        this.addNewCountry = this.addNewCountry.bind(this);\n        this.editCountry = this.editCountry.bind(this);\n    }\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        CountryService.getCountryListAll().then(response => {\n            this.setState({\n                countryList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n    }\n\n    addNewCountry() {\n        if (navigator.onLine) {\n            this.props.history.push(`/addCountry`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n    }\n    editCountry(country) {\n        console.log(country);\n        this.props.history.push({\n            pathname: \"/editCountry\",\n            state: { country: country }\n        });\n\n    }\n\n    render() {\n\n        return (\n\n            <>\n                <p>{this.props.match.params.message}</p>\n\n                <div>\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewCountry}>{myConst.ADD_NEW_COUNTRY}</button><br /><br />\n                </div>\n\n                <div className=\"countryList\">\n\n                    <h1>{myConst.COUNTRY_LIST}</h1>\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.COUNTRY_NAME_EN}</th>\n                                <th>{myConst.COUNTRY_NAME_FR}</th>\n                                <th>{myConst.COUNTRY_NAME_SP}</th>\n                                <th>{myConst.COUNTRY_NAME_PO}</th>\n                                <th>{myConst.COUNTRY_ACTIVE}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.countryList.map(country =>\n\n                                    <tr key={country.countryId} onClick={() => this.editCountry(country)}>\n                                        <td>{country.label.label_en}</td>\n                                        <td>{country.label.label_fr}</td>\n                                        <td>{country.label.label_sp}</td>\n                                        <td>{country.label.label_pr}</td>\n                                        <td>\n                                        {country.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}\n                                        </td>\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n\n\n\n            </>);\n    }\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport CountryService from '../../api/CountryService.js';\nimport LanguageService from '../../api/LanguageService.js';\nimport CurrencyService from '../../api/CurrencyService.js';\nimport * as myConst from '../../Labels.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class UpdateCountryComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            country: {\n                countryId:'',\n                label: {\n                    label_en: '',\n                    // spaLabel: '',\n                    // freLabel: '',\n                    // porLabel: '', \n                    labelId:''\n                },\n                currency: {\n                    curencyId: ''\n                },\n                language: {\n                    languageId: ''\n                },\n                active: ''\n\n            },\n            languageList:[],\n            currencyList:[]\n        }\n\n        this.updateFieldData=this.updateFieldData.bind(this);\n        this.updateForm=this.updateForm.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n        this.cancelClicked=this.cancelClicked.bind(this);\n\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            country: this.props.location.state.country\n        });\n\n        LanguageService.getLanguageListActive().then(response => {\n            this.setState({\n                languageList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                });\n\n        CurrencyService.getCurrencyListActive().then(response => {\n            this.setState({\n                currencyList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                });\n\n                $(\"#updateCountryForm\").validate({\n                    ignore: [],\n                    rules: {\n                        'country.label.label_en': {\n                            required: true,\n                            lettersonlywhitespace: true,\n                            maxlength: 255\n                        },\n                        // 'country.label.freLabel': {\n        \n                        //     lettersonly: true,\n                        //     maxlength: 255\n                        // },\n                        // 'country.label.spaLabel': {\n        \n                        //     lettersonly: true,\n                        //     maxlength: 255\n                        // },\n                        // 'country.label.porLabel': {\n        \n                        //     lettersonly: true,\n                        //     maxlength: 255\n                        // },\n                        'country.currency.currencyId': {\n                            required: true\n                        }, \n                        'country.language.languageId': {\n                            required: true\n                        }\n                    },\n                    errorPlacement: function (error, element) {\n                        error.insertAfter(element);\n                    }\n                });\n\n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    updateFieldData(event){\n        let { country } = this.state\n        if (event.target.name === \"country.label.label_en\") {\n           this.state.country.label.label_en = event.target.value\n        }\n        // if (event.target.name === \"country.label.freLabel\") {\n        //     this.state.country.label.freLabel = event.target.value\n        // } if (event.target.name === \"country.label.spaLabel\") {\n        //     this.state.country.label.spaLabel = event.target.value\n        // } if (event.target.name === \"country.label.porLabel\") {\n        //     this.state.country.label.porLabel = event.target.value\n        // }\n        if (event.target.name === \"country.currency.currencyId\") {\n            this.state.country.currency.currencyId = event.target.value\n        }if (event.target.name === \"country.language.languageId\") {\n            this.state.country.language.languageId = event.target.value\n        }else if(event.target.name === \"country.active\") { \n            console.log(\"hi----\");\n            this.state.country.active = event.target.id = \"country.active2\" ? false : true\n        }\n        \n        this.setState(\n            {\n                country\n            }\n        )\n\n\n    }\n    cancelClicked() {\n        this.props.history.push(`/countryList/` + \"Action Canceled\") \n    }\n\n    updateForm(){\n        if(navigator.onLine){\n\n            if($(\"#updateCountryForm\").valid()){\n        CountryService.editCountry(this.state.country).then(response => {\n            this.props.history.push(`/countryList/${response.data.message}`)\n            //console.log(\"success\");\n        }\n        )\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            )\n        }\n        }else{\n\n            alert(\"To perform this action you must be online.\");\n        }\n    }\n\n    render() {\n        const { languageList } = this.state;\n        let languageItems = languageList.length > 0\n            && languageList.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>{item.languageName}</option>\n                )\n            }, this);\n\n        const { currencyList } = this.state;\n        let currencyItems = currencyList.length > 0\n            && currencyList.map((itemOne, i) => {\n                return (\n                    <option key={i} value={itemOne.currencyId}>{itemOne.label.label_en}</option>\n                )\n            }, this);\n\n        return (\n            <>\n\n                <h3>{myConst.UPDATE_COUNTRY}</h3>\n                <form name=\"updateCountryForm\" id=\"updateCountryForm\">\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"country.label.engLabel\" value={this.Capitalize(this.state.country.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/* <div>\n                        <label>{myConst.COUNTRY_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"country.label.freLabel\" value={this.state.country.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"country.label.spaLabel\" value={this.state.country.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.COUNTRY_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"country.label.porLabel\" value={this.state.country.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br /> */}\n                    <div>\n                        {myConst.ACTIVE}:\n        <input type=\"radio\" id=\"country.active1\" name=\"country.active\" value={true} checked={this.state.country.active === true} onChange={this.updateFieldData} /> Active\n        <input type=\"radio\" id=\"country.active2\" name=\"country.active\" value={false} checked={this.state.country.active === false} onChange={this.updateFieldData} /> Disabled\n         </div>\n                    <br /><br />\n                    <div>\n                        {myConst.SELECT_LANGUAGE} : <select id=\"langaugeId\" name=\"country.language.languageId\" value={this.state.country.language ? this.state.country.language.languageId : ''} onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {languageItems}\n                        </select>\n                    </div>\n                    <br></br>\n                    <div>\n                        {myConst.SELECT_CURRENCY} : <select id=\"currencyId\" name=\"country.currency.currencyId\" value={this.state.country.currency ? this.state.country.currency.currencyId : ''} onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {currencyItems}\n                        </select>\n                    </div>\n                    <br /><br />\n                    {/* <input type=\"hidden\" name=\"dataSource.dataSourceId\" value={this.state.dataSource.dataSourceId} /> */}\n                    {/* <input type=\"hidden\" name=\"dataSource.label.labelId\" value={this.state.dataSource.label.labelId} /> */}\n                    <div>\n\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                        <button type=\"button\" onClick={this.cancelClicked}>{myConst.BTN_CANCEL}</button><br></br><br></br>\n                    </div>\n                </form>\n\n            </>\n\n        );\n\n\n\n    }\n\n\n}","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass ShipmentStatusService{\n\n    addShipmentStatus(json) {\n        return axios.put(`${API_URL}/api/addShipmentStatus/`, json, {}\n        );\n    }\n\n    getShipmentStatusListAll(){\n        return axios.get(`${API_URL}/api/getShipmentStatusListAll/`, {\n        });\n    }\n    getShipmentStatusListActive(){\n        return axios.get(`${API_URL}/api/getShipmentStatusListActive/`, {\n        });\n    }\n    editShipmentStatus(json) {\n        return axios.put(`${API_URL}/api/editShipmentStatus/`, json, {\n        });\n    }\n\n}\nexport default new ShipmentStatusService();","import React, { Component } from 'react';\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport ShipmentStatusService from '../../api/ShipmentStatusService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class AddShipmentStatusComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            shipmentStatus: {\n                label: {\n                    label_en: '' \n                    // freLabel: '',\n                    // spaLabel: '',\n                    // porLabel: ''\n                },\n                nextShipmentStatusAllowed: []\n            },\n            shipmentStatusList: []\n        }\n\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n    }\n\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        ShipmentStatusService.getShipmentStatusListActive().then(response => {\n            //console.log(response.data)\n            this.setState({\n                shipmentStatusList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n        $(\"#shipmentStatusForm\").validate({\n            ignore: [],\n            rules: {\n                'shipmentStatus.label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                }\n                // 'shipmentStatus.label.freLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'shipmentStatus.label.spaLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'shipmentStatus.label.porLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n    updateFieldData(event) {\n        if (event.target.name === \"shipmentStatus.label.label_en\") {\n            //console.log(\"inside if\")\n            this.state.shipmentStatus.label.label_en = event.target.value\n        }\n        // if (event.target.name === \"shipmentStatus.label.freLabel\") {\n        //     //console.log(\"inside if\")\n        //     this.state.shipmentStatus.label.freLabel = event.target.value\n        // } if (event.target.name === \"shipmentStatus.label.spaLabel\") {\n        //     //console.log(\"inside if\")\n        //     this.state.shipmentStatus.label.spaLabel = event.target.value\n        // }if (event.target.name === \"shipmentStatus.label.porLabel\") {\n        //     //console.log(\"inside if\")\n        //     this.state.shipmentStatus.label.porLabel = event.target.value\n        // }\n        else if (event.target.name === \"shipmentStatus.nextShipmentStatusAllowed\") {\n            this.state.shipmentStatus.nextShipmentStatusAllowed = Array.from(event.target.selectedOptions, (item) => item.value)\n        }\n\n\n        let { shipmentStatus } = this.state\n        this.setState(\n            {\n                shipmentStatus\n            }\n        )\n    }\n\n    submitForm() {\n        if (navigator.onLine) {\n            if ($(\"#shipmentStatusForm\").valid()) {\n                console.log(this.state);\n                ShipmentStatusService.addShipmentStatus(this.state.shipmentStatus).then(response => {\n                    this.props.history.push(`/shipmentStatusListAll/${response.data.message}`)\n                    //console.log(\"success\");\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n\n            }\n\n        } else {\n            alert(\"To perform this action you must be online.\");\n        }\n\n    } \n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    render() {\n\n        const { shipmentStatusList } = this.state;\n        let shipmentStatusItems = shipmentStatusList.length > 0\n            && shipmentStatusList.map((item, i) => {\n                return (\n                    <option key={i} value={item.shipmentStatusId}>{item.label.label_en}</option>\n                )\n            }, this);\n        return (\n            <>\n                <h3>{myConst.ADD_SHIPMENT_STATUS}</h3>\n                <form name=\"shipmentStatusForm\" id=\"shipmentStatusForm\">\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.label_en\" value={this.Capitalize(this.state.shipmentStatus.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/* <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.freLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.spaLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.porLabel\" onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br /> */}\n                 \n                    <div>\n                       \n                        <label>  {myConst.SELECT_NEXT_SHIPMENT_STATUS} :- </label><select id=\"shipmentStatusId\" name=\"shipmentStatus.nextShipmentStatusAllowed\" multiple=\"true\" onChange={this.updateFieldData}>\n                            <option value=\"\">-Nothing Selected-</option>\n                            {shipmentStatusItems}\n                        </select>\n                        \n                    </div>\n                    \n                    <br /><br />\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n        );\n\n    }\n\n}","\nimport React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport ShipmentStatusService from '../../api/ShipmentStatusService.js';\nimport * as myConst from '../../Labels.js';\nexport default class ShipmentStatusListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            shipmentStatusList: []\n        }\n        this.editShipmentStatus=this.editShipmentStatus.bind(this);\n        this.addNewShipmentStatus=this.addNewShipmentStatus.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        ShipmentStatusService.getShipmentStatusListAll().then(response => {\n            //console.log(response.data)\n            this.setState({\n                shipmentStatusList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n    }\n\n    addNewShipmentStatus(){\n        if (navigator.onLine) {\n            this.props.history.push(`/addShipmentStatus`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n    }\n\n    editShipmentStatus(shipmentStatus){\n        this.props.history.push({\n            pathname: \"/editShipmentStatus\",\n            state: { shipmentStatus: shipmentStatus }\n        });\n\n    }\n\n    render() {\n        return (\n            <>\n                 <p>{this.props.match.params.message}</p>\n                <div>\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewShipmentStatus}>{myConst.ADD_NEW_SHIPMENT_STATUS}</button><br /><br />\n                </div>\n\n                <div className=\"shipmentStatusList\">\n\n                    <h1>{myConst.SHIPMENT_STATUS_LIST}</h1>\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.SHIPMENTSTATUS_NAME_EN}</th>\n                                <th>{myConst.SHIPMENTSTATUS_NAME_FR}</th>\n                                <th>{myConst.SHIPMENTSTATUS_NAME_SP}</th>\n                                <th>{myConst.SHIPMENTSTATUS_NAME_PO}</th>\n                                <th>{myConst.DATA_SOURCE_TYPE_ACTIVE}</th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.shipmentStatusList.map(shipmentStatus =>\n\n                                    <tr key={shipmentStatus.shipmentStatusId} onClick={() => this.editShipmentStatus(shipmentStatus)}>\n                                        <td>{shipmentStatus.label.label_en}</td>\n                                        <td>{shipmentStatus.label.label_fr}</td>\n                                        <td>{shipmentStatus.label.label_sp}</td>\n                                        <td>{shipmentStatus.label.label_pr}</td>\n                                        <td>{shipmentStatus.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}</td>\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n\n            </>\n\n        );\n\n\n    }\n\n}","import React, { Component } from 'react';\nimport * as myConst from '../../Labels.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport ShipmentStatusService from '../../api/ShipmentStatusService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nexport default class UpdateShipmentStatusComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            shipmentStatus: {\n                //nextShipmentStatusAllowed: [],\n                shipmentStatusId: '',\n                label: {\n                    label_en: ''\n                    // freLabel: '',\n                    // spaLabel: '',\n                    // porLabel: ''\n                },\n                active: ''\n \n            },\n            shipmentStatusList: []\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n        this.cancelClicked=this.cancelClicked.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        //console.log(this.props.location.state.shipmentStatus);\n        //AuthenticationService.setupAxiosInterceptors();\n        ShipmentStatusService.getShipmentStatusListActive().then(response => {\n            //console.log(response.data)\n            this.setState({\n                shipmentStatusList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n        this.setState({\n            shipmentStatus: this.props.location.state.shipmentStatus\n        });\n        $(\"#updateShipmentStatusForm\").validate({\n            ignore: [],\n            rules: {\n                'shipmentStatus.label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                }\n                // 'shipmentStatus.label.freLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'shipmentStatus.label.spaLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // },\n                // 'shipmentStatus.label.porLabel': {\n\n                //     lettersonly: true,\n                //     maxlength: 255\n                // }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n    updateForm() {\n\n        if (navigator.onLine) {\n\n            if ($(\"#updateShipmentStatusForm\").valid()) {\n                //console.log(this.state.shipmentStatus);\n                ShipmentStatusService.editShipmentStatus(this.state.shipmentStatus).then(response => {\n                    //this.props.history.push(`/languageList/${response.data.message}`)\n                    this.props.history.push(`/shipmentStatusListAll/${response.data.message}`)\n                }\n                )\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                            }\n                        }\n                    )\n            }\n        }\n\n    }\n    cancelClicked() {\n        this.props.history.push(`/shipmentStatusListAll/` + \"Action Canceled\") \n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    updateFieldData(event) {\n        let { shipmentStatus } = this.state\n        if (event.target.name === \"shipmentStatus.label.label_en\") {\n            //console.log(\"inside if\")\n            this.state.shipmentStatus.label.label_en = event.target.value\n        }\n        // if (event.target.name === \"shipmentStatus.label.freLabel\") {\n        //     //console.log(\"inside if\")\n        //     this.state.shipmentStatus.label.freLabel = event.target.value\n        // } \n        // if (event.target.name === \"shipmentStatus.label.spaLabel\") {\n        //     //console.log(\"inside if\")\n        //     this.state.shipmentStatus.label.spaLabel = event.target.value\n        // } if (event.target.name === \"shipmentStatus.label.porLabel\") {\n        //     //console.log(\"inside if\")\n        //     this.state.shipmentStatus.label.porLabel = event.target.value\n        // }\n        if (event.target.name === \"shipmentStatus.nextShipmentStatusAllowed\") {\n            this.state.shipmentStatus.nextShipmentStatusAllowed = Array.from(event.target.selectedOptions, (item) => item.value)\n        } \n        else if (event.target.name === \"shipmentStatus.active\") {\n            this.state.shipmentStatus.active = event.target.id === \"shipmentStatus.active2\" ? false : true\n        }\n        this.setState(\n            {\n                shipmentStatus\n            }\n        )\n    }\n\n    render() {\n        const { shipmentStatusList } = this.state;\n        let shipmentStatusItems = shipmentStatusList.length > 0\n            && shipmentStatusList.map((item, i) => {\n                return (\n                    <option key={i} value={item.shipmentStatusId}>{item.label.label_en}</option>\n                )\n            }, this);\n        return (\n            <>\n                <h3>{myConst.UPDATE_SHIPMENT_STATUS}</h3>\n                <form name=\"updateShipmentStatusForm\" id=\"updateShipmentStatusForm\">\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.label_en\" value={this.Capitalize(this.state.shipmentStatus.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/* <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_FR}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.freLabel\" value={this.state.shipmentStatus.label.freLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_SP}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.spaLabel\" value={this.state.shipmentStatus.label.spaLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <label>{myConst.SHIPMENTSTATUS_NAME_PO}:-</label>\n                        <input type=\"text\" name=\"shipmentStatus.label.porLabel\" value={this.state.shipmentStatus.label.porLabel} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br /> */}\n                    <div>\n                        {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"shipmentStatus.active1\" name=\"shipmentStatus.active\" value={true} checked={this.state.shipmentStatus.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"shipmentStatus.active2\" name=\"shipmentStatus.active\" value={false} checked={this.state.shipmentStatus.active === false} onChange={this.updateFieldData} /> Disabled\n                     </div>\n                    <br/><br />\n                        <div>\n                            <label>  {myConst.SELECT_NEXT_SHIPMENT_STATUS} :- </label><select id=\"shipmentStatusId\" name=\"shipmentStatus.nextShipmentStatusAllowed\" multiple=\"true\" value={this.state.shipmentStatus.nextShipmentStatusAllowed} onChange={this.updateFieldData}>\n                                <option value=\"\">-Nothing Selected-</option>\n                                {shipmentStatusItems}\n                            </select>\n                        </div>\n                        <br/><br/>\n                        {/* <input type=\"hidden\" name=\"dataSourceType.labelId\" value={this.state.dataSourceType.labelId} /> */}\n                        <div>\n                            <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                            <button type=\"button\" onClick={this.cancelClicked}>{myConst.BTN_CANCEL}</button><br></br><br></br>\n                        </div>\n                </form>\n\n\n\n            </>\n                );\n            }\n        \n}","import axios from \"axios\"\nimport { API_URL } from '../Constants.js'\n\nclass ProgramService {\n    getProgramData(programId) {\n        console.log(programId)\n        return axios.get(`${API_URL}/api/getProgramData?programId=${programId}`, {\n        });\n    }\n\n    getProgramList() {\n        return axios.get(`${API_URL}/api/getProgramList`, {\n        });\n    }\n}\nexport default new ProgramService()","import React, { Component } from 'react';\nimport { BTN_DOWNLOAD, DOWNLOAD_TITLE, DATA_DOWNLOAD_SUCCESS, PROGRAM, OFFLINE_MSG,ACTION_CANCEL,SAME_PROGRAM_OVERWRITE_MESSAGE } from '../../Labels.js';\nimport ProgramService from '../../api/ProgramService.js';\nimport CryptoJS from 'crypto-js';\nimport { SECRET_KEY } from '../../Constants.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport $ from 'jquery';\nimport 'jquery-validation';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\n\nexport default class DownloadProgramDataComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            programList: [],\n            message: \"\"\n        }\n        this.downloadClicked = this.downloadClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        ProgramService.getProgramList().then(response => {\n            console.log(response.data)\n            this.setState({\n                programList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#downloadForm\").validate({\n            ignore: [],\n            rules: {\n                'programId': {\n                    required: true\n                },\n            }\n        })\n    }\n\n    render() {\n        const { programList } = this.state;\n        let programItems = programList.length > 0\n            && programList.map((item, i) => {\n                return (\n                    <option key={i} value={item.programId}>{item.label.label_en}</option>\n                )\n            }, this);\n        return (\n            <div>\n                <div className=\"page-content-wrap\">\n\n                    <div className=\"row\">\n                        <div className=\"\">\n                            <ul class=\"breadcrumb\"></ul>\n                        </div>\n\n                        <div className=\"col-md-8 col-md-offset-2\">\n                            <div className=\"login mt-2 block\">\n                                <div className=\"panel panel-default\">\n                                    <div className=\"panel-heading\">\n                                        <h3 className=\"panel-title\">Download Program Data</h3>\n                                    </div>\n                                    <div className=\"panel-body\">\n                                        <form name=\"downloadForm\" id=\"downloadForm\">\n\n                                            <div className=\"form-group\">\n                                                <select multiple class=\"form-control\">\n                                                    <option>1</option>\n                                                    <option>2</option>\n                                                    <option>3</option>\n                                                    <option>4</option>\n                                                    <option>5</option>\n                                                </select>\n                                            </div>\n\n                                        </form>\n                                    </div>\n                                    <div className=\"panel-footer\">\n                                        <button ype=\"button\" onClick={this.downloadClicked} className=\"btn btn-success pull-right\">{BTN_DOWNLOAD}</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n\n                <h4>{this.state.message}</h4>\n                <h4>{DOWNLOAD_TITLE}</h4><br></br>\n                <form name=\"downloadForm\" id=\"downloadForm\">\n                    {PROGRAM} : <select id=\"programId\" name=\"programId\" multiple={true}>\n                        {programItems}\n                    </select><br></br><br></br>\n                    <button type=\"button\" onClick={this.downloadClicked}>{BTN_DOWNLOAD}</button>\n                </form>\n            </div>\n        )\n    }\n\n    downloadClicked() {\n        if (navigator.onLine) {\n            if ($(\"#downloadForm\").valid()) {\n                confirmAlert({\n                    title: 'Confirm to submit',\n                    message: `${SAME_PROGRAM_OVERWRITE_MESSAGE}`,\n                    buttons: [\n                        {\n                            label: 'Yes',\n                            onClick: () => {\n                                var programArr = $(\"#programId\").val();\n                                for (var j = 0; j < programArr.length; j++) {\n                                    AuthenticationService.setupAxiosInterceptors();\n                                    ProgramService.getProgramData(programArr[j])\n                                        .then(response => {\n                                            var json = response.data;\n                                            var db1;\n                                            var storeOS;\n                                            var openRequest = indexedDB.open('fasp', 1);\n                                            openRequest.onupgradeneeded = function (e) {\n                                                var db1 = e.target.result;\n                                                if (!db1.objectStoreNames.contains('programData')) {\n                                                    storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('lastSyncDate')) {\n                                                    storeOS = db1.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('language')) {\n                                                    storeOS = db1.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('country')) {\n                                                    storeOS = db1.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('currency')) {\n                                                    storeOS = db1.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('unit')) {\n                                                    storeOS = db1.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('unitType')) {\n                                                    storeOS = db1.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('organisation')) {\n                                                    storeOS = db1.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('healthArea')) {\n                                                    storeOS = db1.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('region')) {\n                                                    storeOS = db1.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('fundingSource')) {\n                                                    storeOS = db1.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('subFundingSource')) {\n                                                    storeOS = db1.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('product')) {\n                                                    storeOS = db1.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('productCategory')) {\n                                                    storeOS = db1.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('dataSource')) {\n                                                    storeOS = db1.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('dataSourceType')) {\n                                                    storeOS = db1.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('shipmentStatus')) {\n                                                    storeOS = db1.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('shipmentStatusAllowed')) {\n                                                    storeOS = db1.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('manufacturer')) {\n                                                    storeOS = db1.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('logisticsUnit')) {\n                                                    storeOS = db1.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n                                                }\n                                                if (!db1.objectStoreNames.contains('planningUnit')) {\n                                                    storeOS = db1.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n                                                }\n                                            };\n                                            openRequest.onsuccess = function (e) {\n                                                console.log('in success')\n                                                db1 = e.target.result;\n                                                var transaction = db1.transaction(['programData'], 'readwrite');\n                                                var program = transaction.objectStore('programData');\n                                                var encryptedText = CryptoJS.AES.encrypt(JSON.stringify(json), SECRET_KEY);\n                                                var userBytes = CryptoJS.AES.decrypt(localStorage.getItem('curUser'), SECRET_KEY);\n                                                var userId = userBytes.toString(CryptoJS.enc.Utf8);\n                                                var item = {\n                                                    id: json.programId + \"_v\" + json.programVersion + \"_uId_\" + userId,\n                                                    programId: json.programId,\n                                                    version: json.programVersion,\n                                                    programName: (CryptoJS.AES.encrypt((json.label.labelEn), SECRET_KEY)).toString(),\n                                                    programData: encryptedText.toString(),\n                                                    userId: userId\n                                                };\n                                                console.log(item)\n                                                var putRequest = program.put(item);\n\n                                                putRequest.onerror = function (event) {\n                                                    // Handle errors!\n                                                };\n                                                putRequest.onsuccess = function (event) {\n                                                    this.setState({\n                                                        message: `${DATA_DOWNLOAD_SUCCESS}`\n                                                    })\n                                                }.bind(this);\n                                            }.bind(this)\n                                        })\n                                        .catch(\n                                            error => {\n                                                switch (error.message) {\n                                                    case \"Network Error\":\n                                                        this.setState({\n                                                            message: error.message\n                                                        })\n                                                        break\n                                                    default:\n                                                        this.setState({\n                                                            message: error.response.data.message\n                                                        })\n                                                        break\n                                                }\n                                            }\n                                        );\n                                }\n                            }\n                        },\n                        {\n                            label: 'No',\n                            onClick: () => {\n                                this.setState({\n                                    message: `${ACTION_CANCEL}`\n                                })\n                            }\n                        }\n                    ]\n                });\n            }\n        } else {\n            alert(`${OFFLINE_MSG}`);\n        }\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport { IMPORT_TITLE, BTN_IMPORT, DATA_IMPORT_SUCCESS, IMPORT_PROGRAM, BTN_SUBMIT, SELECT_FILE, SELECT_ZIP_FILE,ACTION_CANCEL,SAME_PROGRAM_OVERWRITE_MESSAGE  } from '../../Labels.js';\nimport { SECRET_KEY } from '../../Constants.js';\nimport JSZip from 'jszip';\nimport CryptoJS from 'crypto-js';\nimport $ from 'jquery';\nimport 'jquery-validation';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\n\nexport default class ImportProgramDataComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\",\n            programList: []\n        }\n        this.importClicked = this.importClicked.bind(this);\n        this.programSubmitClicked = this.programSubmitClicked.bind(this);\n    }\n\n    componentDidMount() {\n        $(\"#programDiv\").hide();\n        $(\"#importDiv\").show();\n        $(\"#importForm\").validate({\n            ignore: [],\n            rules: {\n                'programId': {\n                    required: true\n                },\n            }\n        })\n    }\n\n    render() {\n        const { programList } = this.state;\n        let programItems = programList.length > 0\n            && programList.map((item, i) => {\n                return (\n                    <option key={i} value={item.id}>{item.name}</option>\n                )\n            }, this);\n        return (\n            <div>\n                <h4>{this.state.message}</h4>\n                <h4>{IMPORT_TITLE}</h4><br></br>\n                <form id=\"importForm\" name=\"importForm\">\n                    <div id=\"importDiv\">\n                        <input type=\"file\" /><br></br><br></br>\n                        <button type=\"button\" onClick={this.importClicked}>{BTN_IMPORT}</button>\n                    </div>\n                    <div id=\"programDiv\">\n                        {IMPORT_PROGRAM} : <select id=\"programId\" name=\"programId\" multiple={true}>\n                            {programItems}\n                        </select><br></br><br></br>\n                        <button type=\"button\" onClick={this.programSubmitClicked}>{BTN_SUBMIT}</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n\n    importClicked() {\n        if (window.File && window.FileReader && window.FileList && window.Blob) {\n            if (document.querySelector('input[type=file]').files[0] == undefined) {\n                alert(`${SELECT_FILE}`);\n            } else {\n                var file = document.querySelector('input[type=file]').files[0];\n                var fileName = file.name;\n                var fileExtenstion = fileName.split(\".\");\n                if (fileExtenstion[1] == \"zip\") {\n                    JSZip.loadAsync(file).then(function (zip) {\n                        var i = 0;\n                        var fileName = []\n                        var size = 0;\n                        Object.keys(zip.files).forEach(function (filename) {\n                            size++;\n                        })\n                        Object.keys(zip.files).forEach(function (filename) {\n                            zip.files[filename].async('string').then(function (fileData) {\n                                i++;\n                                var programDataJson = JSON.parse(fileData);\n                                var bytes = CryptoJS.AES.decrypt(programDataJson.programData, SECRET_KEY);\n                                var plaintext = bytes.toString(CryptoJS.enc.Utf8);\n                                var programDataJsonDecrypted = JSON.parse(plaintext);\n                                fileName[i] = {\n                                    id: filename,\n                                    name: programDataJsonDecrypted.label.labelEn + \"~v\" + programDataJsonDecrypted.programVersion\n                                }\n                                if (i === size) {\n                                    this.setState({\n                                        programList: fileName\n                                    })\n\n                                    $(\"#programDiv\").show();\n                                    $(\"#importDiv\").hide();\n                                }\n                            }.bind(this))\n\n                        }.bind(this))\n\n                    }.bind(this))\n                } else {\n                    alert(`${SELECT_ZIP_FILE}`)\n                }\n            }\n\n        }\n\n    }\n\n    programSubmitClicked() {\n        if ($(\"#importForm\").valid()) {\n            if (window.File && window.FileReader && window.FileList && window.Blob) {\n                if (document.querySelector('input[type=file]').files[0] == undefined) {\n                    alert(`${SELECT_FILE}`);\n                } else {\n                    confirmAlert({\n                        title: 'Confirm to submit',\n                        message: `${SAME_PROGRAM_OVERWRITE_MESSAGE}`,\n                        buttons: [\n                            {\n                                label: 'Yes',\n                                onClick: () => {\n                         \n                                var file = document.querySelector('input[type=file]').files[0];\n                                var db1;\n                                var storeOS;\n                                var openRequest = indexedDB.open('fasp', 1);\n                                var selectedPrgArr = $(\"#programId\").val();\n                                openRequest.onupgradeneeded = function (e) {\n                                    var db1 = e.target.result;\n                                    if (!db1.objectStoreNames.contains('programData')) {\n                                        storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('lastSyncDate')) {\n                                        storeOS = db1.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('language')) {\n                                        storeOS = db1.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('country')) {\n                                        storeOS = db1.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('currency')) {\n                                        storeOS = db1.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('unit')) {\n                                        storeOS = db1.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('unitType')) {\n                                        storeOS = db1.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('organisation')) {\n                                        storeOS = db1.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('healthArea')) {\n                                        storeOS = db1.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('region')) {\n                                        storeOS = db1.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('fundingSource')) {\n                                        storeOS = db1.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('subFundingSource')) {\n                                        storeOS = db1.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('product')) {\n                                        storeOS = db1.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('productCategory')) {\n                                        storeOS = db1.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('dataSource')) {\n                                        storeOS = db1.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('dataSourceType')) {\n                                        storeOS = db1.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('shipmentStatus')) {\n                                        storeOS = db1.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('shipmentStatusAllowed')) {\n                                        storeOS = db1.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('manufacturer')) {\n                                        storeOS = db1.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('logisticsUnit')) {\n                                        storeOS = db1.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n                                    }\n                                    if (!db1.objectStoreNames.contains('planningUnit')) {\n                                        storeOS = db1.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n                                    }\n                                };\n                                openRequest.onsuccess = function (e) {\n                                    db1 = e.target.result;\n                                    var transaction = db1.transaction(['programData'], 'readwrite');\n                                    var program = transaction.objectStore('programData');\n                                    JSZip.loadAsync(file).then(function (zip) {\n                                        Object.keys(zip.files).forEach(function (filename) {\n            \n                                            zip.files[filename].async('string').then(function (fileData) {\n                                                for (var j = 0; j < selectedPrgArr.length; j++) {\n                                                    if (selectedPrgArr[j] == filename) {\n                                                        db1 = e.target.result;\n                                                        var transaction2 = db1.transaction(['programData'], 'readwrite');\n                                                        var program2 = transaction2.objectStore('programData');\n                                                        var json = JSON.parse(fileData);\n                                                        var userBytes = CryptoJS.AES.decrypt(localStorage.getItem('curUser'), SECRET_KEY);\n                                                        var userId = userBytes.toString(CryptoJS.enc.Utf8);\n                                                        json.userId = userId;\n                                                        json.id = json.programId + \"_v\" + json.version + \"_uId_\" + userId\n                                                        var addProgramDataRequest = program2.put(json);\n                                                        addProgramDataRequest.onerror = function (event) {\n                                                        };\n                                                        addProgramDataRequest.onsuccess = function (event) {\n                                                        };\n                                                    }\n            \n                                                }\n                                            })\n                                        })\n                                    })\n                                    this.setState({\n                                        message: `${DATA_IMPORT_SUCCESS}`\n                                    })\n                                    $(\"#programDiv\").hide();\n                                    $(\"#importDiv\").show();\n                                }.bind(this)\n                                }\n                            },\n                            {\n                                label: 'No',\n                                onClick: () => {\n                                    this.setState({\n                                        message: `${ACTION_CANCEL}`\n                                    })\n                                }\n                            }\n                        ]\n                    });\n                }\n            }\n        }\n    }\n}\n","import React, { Component } from 'react';\nimport { BTN_EXPORT, EXPORT_TITLE, PROGRAM, DATA_EXPORT_SUCCESS } from '../../Labels.js';\nimport { SECRET_KEY } from '../../Constants.js';\nimport JSZip from 'jszip';\nimport FileSaver from 'file-saver';\nimport CryptoJS from 'crypto-js';\nimport $ from 'jquery';\nimport 'jquery-validation';\n\nexport default class ExportProgramDataComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            programList: [],\n            message: \"\"\n        }\n        this.exportClicked = this.exportClicked.bind(this);\n    }\n\n    componentDidMount() {\n        var db1;\n        var storeOS;\n        var openRequest = indexedDB.open('fasp', 1);\n        openRequest.onupgradeneeded = function (e) {\n            var db1 = e.target.result;\n            if (!db1.objectStoreNames.contains('programData')) {\n                storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('lastSyncDate')) {\n                storeOS = db1.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('language')) {\n                storeOS = db1.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('country')) {\n                storeOS = db1.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('currency')) {\n                storeOS = db1.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('unit')) {\n                storeOS = db1.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('unitType')) {\n                storeOS = db1.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('organisation')) {\n                storeOS = db1.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('healthArea')) {\n                storeOS = db1.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('region')) {\n                storeOS = db1.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('fundingSource')) {\n                storeOS = db1.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('subFundingSource')) {\n                storeOS = db1.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('product')) {\n                storeOS = db1.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('productCategory')) {\n                storeOS = db1.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('dataSource')) {\n                storeOS = db1.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('dataSourceType')) {\n                storeOS = db1.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('shipmentStatus')) {\n                storeOS = db1.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('shipmentStatusAllowed')) {\n                storeOS = db1.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('manufacturer')) {\n                storeOS = db1.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('logisticsUnit')) {\n                storeOS = db1.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n            }\n            if (!db1.objectStoreNames.contains('planningUnit')) {\n                storeOS = db1.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n            }\n        };\n        openRequest.onsuccess = function (e) {\n            db1 = e.target.result;\n            var transaction = db1.transaction(['programData'], 'readwrite');\n            var program = transaction.objectStore('programData');\n            var getRequest = program.getAll();\n            var proList = []\n            getRequest.onerror = function (event) {\n                // Handle errors!\n            };\n            getRequest.onsuccess = function (event) {\n                var myResult = [];\n                myResult = getRequest.result;\n                var userBytes = CryptoJS.AES.decrypt(localStorage.getItem('curUser'), SECRET_KEY);\n                var userId = userBytes.toString(CryptoJS.enc.Utf8);\n                for (var i = 0; i < myResult.length; i++) {\n                    if (myResult[i].userId == userId) {\n                        var bytes = CryptoJS.AES.decrypt(myResult[i].programName, SECRET_KEY);\n                        var programName = bytes.toString(CryptoJS.enc.Utf8);\n                        var programJson = {\n                            name: programName.toString() + \"~v\" + myResult[i].version,\n                            id: myResult[i].id\n                        }\n                        proList[i] = programJson\n                    }\n                }\n                this.setState({\n                    programList: proList\n                })\n            }.bind(this);\n        }.bind(this)\n        $(\"#exportForm\").validate({\n            ignore: [],\n            rules: {\n                'programId': {\n                    required: true\n                },\n            }\n        })\n\n    }\n\n    render() {\n        const { programList } = this.state;\n        let programItems = programList.length > 0\n            && programList.map((item, i) => {\n                return (\n                    <option key={i} value={item.id}>{item.name}</option>\n                )\n            }, this);\n        return (\n            <div>\n                <h4>{this.state.message}</h4>\n                <h4>{EXPORT_TITLE}</h4><br></br>\n                <form name=\"exportForm\" id=\"exportForm\">\n                    {PROGRAM} : <select id=\"programId\" name=\"programId\" multiple={true}>\n                        {programItems}\n                    </select><br></br><br></br>\n                    <button type=\"button\" onClick={this.exportClicked}>{BTN_EXPORT}</button>\n                </form>\n            </div>\n        )\n    }\n\n    exportClicked() {\n        if ($(\"#exportForm\").valid()) {\n            var zip = new JSZip();\n            var selectedPrgArr = $(\"#programId\").val();\n            var selectedPrgArrText = $('#programId option:selected').toArray().map(item => item.text);\n            var db1;\n            var storeOS;\n            var openRequest = indexedDB.open('fasp', 1);\n            openRequest.onupgradeneeded = function (e) {\n                var db1 = e.target.result;\n                if (!db1.objectStoreNames.contains('programData')) {\n                    storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('lastSyncDate')) {\n                    storeOS = db1.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('language')) {\n                    storeOS = db1.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('country')) {\n                    storeOS = db1.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('currency')) {\n                    storeOS = db1.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('unit')) {\n                    storeOS = db1.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('unitType')) {\n                    storeOS = db1.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('organisation')) {\n                    storeOS = db1.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('healthArea')) {\n                    storeOS = db1.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('region')) {\n                    storeOS = db1.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('fundingSource')) {\n                    storeOS = db1.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('subFundingSource')) {\n                    storeOS = db1.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('product')) {\n                    storeOS = db1.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('productCategory')) {\n                    storeOS = db1.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('dataSource')) {\n                    storeOS = db1.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('dataSourceType')) {\n                    storeOS = db1.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('shipmentStatus')) {\n                    storeOS = db1.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('shipmentStatusAllowed')) {\n                    storeOS = db1.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('manufacturer')) {\n                    storeOS = db1.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('logisticsUnit')) {\n                    storeOS = db1.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('planningUnit')) {\n                    storeOS = db1.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n                }\n            };\n            openRequest.onsuccess = function (e) {\n                db1 = e.target.result;\n                var transaction = db1.transaction(['programData'], 'readwrite');\n                var program = transaction.objectStore('programData');\n                var getRequest = program.getAll();\n                getRequest.onerror = function (event) {\n                    // Handle errors!\n                };\n                getRequest.onsuccess = function (event) {\n                    var myResult = [];\n                    myResult = getRequest.result;\n                    for (var i = 0; i < myResult.length; i++) {\n                        for (var j = 0; j < selectedPrgArr.length; j++) {\n                            if (myResult[i].id == selectedPrgArr[j]) {\n                                var txt = JSON.stringify(myResult[i]);\n                                zip.file(selectedPrgArrText[i] + \"_\" + parseInt(i + 1) + \".txt\", txt);\n\n                            }\n                        }\n                        if (i == myResult.length - 1) {\n                            zip.generateAsync({\n                                type: \"blob\"\n                            }).then(function (content) {\n                                FileSaver.saveAs(content, \"download.zip\");\n                            });\n                            this.setState({\n                                message: `${DATA_EXPORT_SUCCESS}`\n                            })\n                        }\n                    }\n\n\n                }.bind(this);\n            }.bind(this)\n        }\n    }\n}\n\n","import axios from \"axios\"\nimport { API_URL } from '../Constants.js'\n\nclass MasterSyncService {\n    getLanguageListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getLanguageListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getCountryListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getCountryListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getCurrencyListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getCurrencyListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getUnitListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getUnitListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getUnitTypeList() {\n        return axios.get(`${API_URL}/api/getUnitTypeListForSync`, {\n        });\n    }\n\n    getOrganisationListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getOrganisationListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getHealthAreaListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getHealthAreaListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getRegionListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getRegionListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getFundingSourceListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getFundingSourceListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n    getSubFundingSourceListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getSubFundingSourceListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getProductListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getProductListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getProductCategoryListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getProductCategoryListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getDataSourceListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getDataSourceListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getDataSourceTypeListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getDataSourceTypeListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getShipmentStatusListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getShipmentStatusListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getShipmentStatusAllowedListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getShipmentStatusAllowedListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getPlanningUnitListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getPlanningUnitListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getLogisticsUnitListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getLogisticsUnitListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n    getManufacturerListForSync(lastSyncDate) {\n        var lastSyncDate;\n        if (lastSyncDate == null) {\n            lastSyncDate = null\n        } else {\n            lastSyncDate = lastSyncDate.lastSyncDate\n        }\n        return axios.get(`${API_URL}/api/getManufacturerListForSync?lastSyncDate=${lastSyncDate}`, {\n        });\n    }\n\n\n}\nexport default new MasterSyncService()","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport moment from 'moment';\nimport MasterSyncService from '../../api/MasterSyncService.js';\nimport { TITLE_MASTER_DATA_SYNC, MASTERS, OF, SYNCED, BTN_RETRY,MASTER_SYNC_SUCCESS,SYNC_FAILED,OFFLINE_MSG } from '../../Labels.js';\nimport $ from 'jquery';\n\nexport default class SyncMasterDataComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            totalMasters: 19,\n            syncedMasters: 0,\n            syncedPercentage: 0\n        }\n        this.syncMasters = this.syncMasters.bind(this);\n        this.retryClicked = this.retryClicked.bind(this);\n    }\n\n    componentDidMount() {\n        this.syncMasters();\n    }\n\n    render() {\n        return (\n            <>\n                {this.state.message}\n                <div class=\"panel panel-default\">\n                    <div class=\"panel-heading ui-draggable-handle\">\n                        <h3 class=\"panel-title\">{TITLE_MASTER_DATA_SYNC}</h3>\n                    </div>\n                    <div class=\"panel-body\">\n                        <div class=\"progress\">\n                            <div class=\"progress\">\n                                <div class=\"progress-bar progress-bar-success\" role=\"progressbar\" aria-valuenow={this.state.syncedPercentage} aria-valuemin=\"0\" aria-valuemax=\"100\" style={{ 'width': `${this.state.syncedPercentage}%` }}>\n                                    {this.state.syncedPercentage}% ({SYNCED} {this.state.syncedMasters} {OF} {this.state.totalMasters} {MASTERS})\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div id=\"retryButtonDiv\" style={{ 'display': 'none' }}>\n                    <button ype=\"button\" onClick={this.retryClicked} className=\"btn btn-danger pull-right\">{BTN_RETRY}</button>\n                </div>\n            </>\n        );\n    }\n\n    syncMasters() {\n        if (navigator.onLine) {\n            var db1;\n            var storeOS;\n            var openRequest = indexedDB.open('fasp', 1);\n            openRequest.onupgradeneeded = function (e) {\n                var db1 = e.target.result;\n                if (!db1.objectStoreNames.contains('programData')) {\n                    storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('lastSyncDate')) {\n                    storeOS = db1.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('language')) {\n                    storeOS = db1.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('country')) {\n                    storeOS = db1.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('currency')) {\n                    storeOS = db1.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('unit')) {\n                    storeOS = db1.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('unitType')) {\n                    storeOS = db1.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('organisation')) {\n                    storeOS = db1.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('healthArea')) {\n                    storeOS = db1.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('region')) {\n                    storeOS = db1.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('fundingSource')) {\n                    storeOS = db1.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('subFundingSource')) {\n                    storeOS = db1.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('product')) {\n                    storeOS = db1.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('productCategory')) {\n                    storeOS = db1.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('dataSource')) {\n                    storeOS = db1.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('dataSourceType')) {\n                    storeOS = db1.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('shipmentStatus')) {\n                    storeOS = db1.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('shipmentStatusAllowed')) {\n                    storeOS = db1.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('manufacturer')) {\n                    storeOS = db1.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('logisticsUnit')) {\n                    storeOS = db1.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n                }\n                if (!db1.objectStoreNames.contains('planningUnit')) {\n                    storeOS = db1.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n                }\n            };\n            openRequest.onsuccess = function (e) {\n                db1 = e.target.result;\n                var transaction = db1.transaction(['lastSyncDate'], 'readwrite');\n                var lastSyncDateTransaction = transaction.objectStore('lastSyncDate');\n                var updatedSyncDate = ((moment(Date.now()).utcOffset('-0500').format('YYYY-MM-DD HH:mm')));\n                var lastSyncDateRequest = lastSyncDateTransaction.get(1);\n                lastSyncDateRequest.onsuccess = function (event) {\n                    var lastSyncDate = lastSyncDateRequest.result;\n                    if (lastSyncDate == undefined) {\n                        lastSyncDate = null;\n                    }\n                    AuthenticationService.setupAxiosInterceptors();\n\n                    //Code to Sync Country list\n                    MasterSyncService.getCountryListForSync(lastSyncDate)\n                        .then(response => {\n                            var json = response.data;\n                            var countryTransaction = db1.transaction(['country'], 'readwrite');\n                            var countryObjectStore = countryTransaction.objectStore('country');\n                            for (var i = 0; i < json.length; i++) {\n                                countryObjectStore.put(json[i]);\n                            }\n                            this.setState({\n                                syncedMasters: this.state.syncedMasters + 1,\n                                syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                            })\n                            // Code to Sync Currency list\n                            MasterSyncService.getCurrencyListForSync(lastSyncDate)\n                                .then(response => {\n                                    var json = response.data;\n                                    var currencyTransaction = db1.transaction(['currency'], 'readwrite');\n                                    var currencyObjectStore = currencyTransaction.objectStore('currency');\n                                    for (var i = 0; i < json.length; i++) {\n                                        currencyObjectStore.put(json[i]);\n                                    }\n                                    this.setState({\n                                        syncedMasters: this.state.syncedMasters + 1,\n                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                    })\n                                    // Code to sync unit list\n                                    MasterSyncService.getUnitListForSync(lastSyncDate)\n                                        .then(response => {\n                                            var json = response.data;\n                                            var unitTransaction = db1.transaction(['unit'], 'readwrite');\n                                            var unitObjectStore = unitTransaction.objectStore('unit');\n                                            for (var i = 0; i < json.length; i++) {\n                                                unitObjectStore.put(json[i]);\n                                            }\n                                            this.setState({\n                                                syncedMasters: this.state.syncedMasters + 1,\n                                                syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                            })\n                                            //Code to Sync UnitType list\n                                            MasterSyncService.getUnitTypeList()\n                                                .then(response => {\n                                                    var json = response.data;\n                                                    var unitTypeTransaction = db1.transaction(['unitType'], 'readwrite');\n                                                    var unitTypeObjectStore = unitTypeTransaction.objectStore('unitType');\n                                                    for (var i = 0; i < json.length; i++) {\n                                                        unitTypeObjectStore.put(json[i]);\n                                                    }\n                                                    this.setState({\n                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                    })\n                                                    //Code to Sync Organisation list\n                                                    MasterSyncService.getOrganisationListForSync(lastSyncDate)\n                                                        .then(response => {\n                                                            var json = response.data;\n                                                            var organisationTransaction = db1.transaction(['organisation'], 'readwrite');\n                                                            var organisationObjectStore = organisationTransaction.objectStore('organisation');\n                                                            for (var i = 0; i < json.length; i++) {\n                                                                organisationObjectStore.put(json[i]);\n                                                            }\n                                                            this.setState({\n                                                                syncedMasters: this.state.syncedMasters + 1,\n                                                                syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                            })\n                                                            //Code to Sync HealthArea list\n                                                            MasterSyncService.getHealthAreaListForSync(lastSyncDate)\n                                                                .then(response => {\n                                                                    var json = response.data;\n                                                                    var healthAreaTransaction = db1.transaction(['healthArea'], 'readwrite');\n                                                                    var healthAreaObjectStore = healthAreaTransaction.objectStore('healthArea');\n                                                                    for (var i = 0; i < json.length; i++) {\n                                                                        healthAreaObjectStore.put(json[i]);\n                                                                    }\n                                                                    this.setState({\n                                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                    })\n                                                                    //Code to Sync Region list\n                                                                    MasterSyncService.getRegionListForSync(lastSyncDate)\n                                                                        .then(response => {\n                                                                            var json = response.data;\n                                                                            var regionTransaction = db1.transaction(['region'], 'readwrite');\n                                                                            var regionObjectStore = regionTransaction.objectStore('region');\n                                                                            for (var i = 0; i < json.length; i++) {\n                                                                                regionObjectStore.put(json[i]);\n                                                                            }\n                                                                            this.setState({\n                                                                                syncedMasters: this.state.syncedMasters + 1,\n                                                                                syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                            })\n                                                                            //Code to Sync FundingSource list\n                                                                            MasterSyncService.getFundingSourceListForSync(lastSyncDate)\n                                                                                .then(response => {\n                                                                                    var json = response.data;\n                                                                                    var fundingSourceTransaction = db1.transaction(['fundingSource'], 'readwrite');\n                                                                                    var fundingSourceObjectStore = fundingSourceTransaction.objectStore('fundingSource');\n                                                                                    for (var i = 0; i < json.length; i++) {\n                                                                                        fundingSourceObjectStore.put(json[i]);\n                                                                                    }\n                                                                                    this.setState({\n                                                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                    })\n                                                                                    //Code to Sync SubFundingSource list\n                                                                                    MasterSyncService.getSubFundingSourceListForSync(lastSyncDate)\n                                                                                        .then(response => {\n                                                                                            var json = response.data;\n                                                                                            var subFundingSourceTransaction = db1.transaction(['subFundingSource'], 'readwrite');\n                                                                                            var subFundingSourceObjectStore = subFundingSourceTransaction.objectStore('subFundingSource');\n                                                                                            for (var i = 0; i < json.length; i++) {\n                                                                                                subFundingSourceObjectStore.put(json[i]);\n                                                                                            }\n                                                                                            this.setState({\n                                                                                                syncedMasters: this.state.syncedMasters + 1,\n                                                                                                syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                            })\n                                                                                            //Code to Sync Product list\n                                                                                            MasterSyncService.getProductListForSync(lastSyncDate)\n                                                                                                .then(response => {\n                                                                                                    var json = response.data;\n                                                                                                    var productTransaction = db1.transaction(['product'], 'readwrite');\n                                                                                                    var productObjectStore = productTransaction.objectStore('product');\n                                                                                                    for (var i = 0; i < json.length; i++) {\n                                                                                                        productObjectStore.put(json[i]);\n                                                                                                    }\n                                                                                                    this.setState({\n                                                                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                                    })\n                                                                                                    //Code to Sync ProductCategory list\n                                                                                                    MasterSyncService.getProductCategoryListForSync(lastSyncDate)\n                                                                                                        .then(response => {\n                                                                                                            var json = response.data;\n                                                                                                            var productCategoryTransaction = db1.transaction(['productCategory'], 'readwrite');\n                                                                                                            var productCategoryObjectStore = productCategoryTransaction.objectStore('productCategory');\n                                                                                                            for (var i = 0; i < json.length; i++) {\n                                                                                                                productCategoryObjectStore.put(json[i]);\n                                                                                                            }\n                                                                                                            this.setState({\n                                                                                                                syncedMasters: this.state.syncedMasters + 1,\n                                                                                                                syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                                            })\n                                                                                                            \n                                                                                                            //Code to Sync DataSource list\n                                                                                                            MasterSyncService.getDataSourceListForSync(lastSyncDate)\n                                                                                                                .then(response => {\n                                                                                                                    var json = response.data;\n                                                                                                                    var dataSourceTransaction = db1.transaction(['dataSource'], 'readwrite');\n                                                                                                                    var dataSourceObjectStore = dataSourceTransaction.objectStore('dataSource');\n                                                                                                                    for (var i = 0; i < json.length; i++) {\n                                                                                                                        dataSourceObjectStore.put(json[i]);\n                                                                                                                    }\n                                                                                                                    this.setState({\n                                                                                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                                                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                                                    })\n                                                                                                                    \n                                                                                                                    //Code to Sync DataSourceType list\n                                                                                                                    MasterSyncService.getDataSourceTypeListForSync(lastSyncDate)\n                                                                                                                        .then(response => {\n                                                                                                                            var json = response.data;\n                                                                                                                            var dataSourceTypeTransaction = db1.transaction(['dataSourceType'], 'readwrite');\n                                                                                                                            var dataSourceTypeObjectStore = dataSourceTypeTransaction.objectStore('dataSourceType');\n                                                                                                                            for (var i = 0; i < json.length; i++) {\n                                                                                                                                dataSourceTypeObjectStore.put(json[i]);\n                                                                                                                            }\n                                                                                                                            this.setState({\n                                                                                                                                syncedMasters: this.state.syncedMasters + 1,\n                                                                                                                                syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                                                            })\n                                                                                                                            \n                                                                                                                            //Code to Sync ShipmentStatus list\n                                                                                                                            MasterSyncService.getShipmentStatusListForSync(lastSyncDate)\n                                                                                                                                .then(response => {\n                                                                                                                                    var json = response.data;\n                                                                                                                                    var shipmentStatusTransaction = db1.transaction(['shipmentStatus'], 'readwrite');\n                                                                                                                                    var shipmentStatusObjectStore = shipmentStatusTransaction.objectStore('shipmentStatus');\n                                                                                                                                    for (var i = 0; i < json.length; i++) {\n                                                                                                                                        shipmentStatusObjectStore.put(json[i]);\n                                                                                                                                    }\n                                                                                                                                    this.setState({\n                                                                                                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                                                                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                                                                    })\n                                                                                                                                    \n                                                                                                                                    //Code to Sync ShipmentStatusAllowed list\n                                                                                                                                    MasterSyncService.getShipmentStatusAllowedListForSync(lastSyncDate)\n                                                                                                                                        .then(response => {\n                                                                                                                                            var json = response.data;\n                                                                                                                                            var shipmentStatusAllowedTransaction = db1.transaction(['shipmentStatusAllowed'], 'readwrite');\n                                                                                                                                            var shipmentStatusAllowedObjectStore = shipmentStatusAllowedTransaction.objectStore('shipmentStatusAllowed');\n                                                                                                                                            for (var i = 0; i < json.length; i++) {\n                                                                                                                                                shipmentStatusAllowedObjectStore.put(json[i]);\n                                                                                                                                            }\n                                                                                                                                            this.setState({\n                                                                                                                                                syncedMasters: this.state.syncedMasters + 1,\n                                                                                                                                                syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                                                                            })\n                                                                                                                                            \n                                                                                                                                            //Code to Sync LogisticsUnit list\n                                                                                                                                            MasterSyncService.getLogisticsUnitListForSync(lastSyncDate)\n                                                                                                                                                .then(response => {\n                                                                                                                                                    var json = response.data;\n                                                                                                                                                    var logisticsUnitTransaction = db1.transaction(['logisticsUnit'], 'readwrite');\n                                                                                                                                                    var logisticsUnitObjectStore = logisticsUnitTransaction.objectStore('logisticsUnit');\n                                                                                                                                                    for (var i = 0; i < json.length; i++) {\n                                                                                                                                                        logisticsUnitObjectStore.put(json[i]);\n                                                                                                                                                    }\n                                                                                                                                                    this.setState({\n                                                                                                                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                                                                                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                                                                                    })\n                                                                                                                                                    \n                                                                                                                                                    //Code to Sync PlanningUnit list\n                                                                                                                                                    MasterSyncService.getPlanningUnitListForSync(lastSyncDate)\n                                                                                                                                                        .then(response => {\n                                                                                                                                                            var json = response.data;\n                                                                                                                                                            var planningUnitTransaction = db1.transaction(['planningUnit'], 'readwrite');\n                                                                                                                                                            var planningUnitObjectStore = planningUnitTransaction.objectStore('planningUnit');\n                                                                                                                                                            for (var i = 0; i < json.length; i++) {\n                                                                                                                                                                planningUnitObjectStore.put(json[i]);\n                                                                                                                                                            }\n                                                                                                                                                            this.setState({\n                                                                                                                                                                syncedMasters: this.state.syncedMasters + 1,\n                                                                                                                                                                syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                                                                                            })\n                                                                                                                                                            \n                                                                                                                                                            //Code to Sync Manufacturer list\n                                                                                                                                                            MasterSyncService.getManufacturerListForSync(lastSyncDate)\n                                                                                                                                                                .then(response => {\n                                                                                                                                                                    var json = response.data;\n                                                                                                                                                                    var manufacturerTransaction = db1.transaction(['manufacturer'], 'readwrite');\n                                                                                                                                                                    var manufacturerObjectStore = manufacturerTransaction.objectStore('manufacturer');\n                                                                                                                                                                    for (var i = 0; i < json.length; i++) {\n                                                                                                                                                                        manufacturerObjectStore.put(json[i]);\n                                                                                                                                                                    }\n                                                                                                                                                                    this.setState({\n                                                                                                                                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                                                                                                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                                                                                                    })\n                                                                                                                                                                    \n                                                                                                                                                                    MasterSyncService.getLanguageListForSync(lastSyncDate)\n                                                                                                                                                                        .then(response => {\n                                                                                                                                                                            var json = response.data;\n                                                                                                                                                                            var languageTransaction = db1.transaction(['language'], 'readwrite');\n                                                                                                                                                                            var languageObjectStore = languageTransaction.objectStore('language');\n                                                                                                                                                                            for (var i = 0; i < json.length; i++) {\n                                                                                                                                                                                languageObjectStore.put(json[i]);\n                                                                                                                                                                            }\n\n\n                                                                                                                                                                            this.setState({\n                                                                                                                                                                                syncedMasters: this.state.syncedMasters + 1,\n                                                                                                                                                                                syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                                                                                                            })\n                                                                                                                                                                            \n                                                                                                                                                                            if (this.state.syncedMasters === this.state.totalMasters) {\n                                                                                                                                                                                var transaction = db1.transaction(['lastSyncDate'], 'readwrite');\n                                                                                                                                                                                var lastSyncDateTransaction = transaction.objectStore('lastSyncDate');\n                                                                                                                                                                                var updatedLastSyncDateJson = {\n                                                                                                                                                                                    lastSyncDate: updatedSyncDate,\n                                                                                                                                                                                    id: 1\n                                                                                                                                                                                }\n                                                                                                                                                                                var updateLastSyncDate = lastSyncDateTransaction.put(updatedLastSyncDateJson)\n                                                                                                                                                                                updateLastSyncDate.onsuccess = function (event) {\n                                                                                                                                                                                    $(\"#retryButtonDiv\").hide();\n                                                                                                                                                                                    this.setState({\n                                                                                                                                                                                        message: `${MASTER_SYNC_SUCCESS}`\n                                                                                                                                                                                    })\n                                                                                                                                                                                }.bind(this)\n                                                                                                                                                                            } else {\n                                                                                                                                                                                this.setState({\n                                                                                                                                                                                    message: `${SYNC_FAILED}`\n                                                                                                                                                                                })\n                                                                                                                                                                            }\n                                                                                                                                                                        })\n                                                                                                                                                                        .catch(\n                                                                                                                                                                            error => {\n                                                                                                                                                                                $(\"#retryButtonDiv\").show();\n                                                                                                                                                                                this.setState({\n                                                                                                                                                                                    message: `${SYNC_FAILED}`\n                                                                                                                                                                                })\n                                                                                                                                                                            }\n                                                                                                                                                                        );\n                                                                                                                                                                })\n                                                                                                                                                                .catch(\n                                                                                                                                                                    error => {\n                                                                                                                                                                        $(\"#retryButtonDiv\").show();\n                                                                                                                                                                        this.setState({\n                                                                                                                                                                            message: `${SYNC_FAILED}`\n                                                                                                                                                                        })\n                                                                                                                                                                    });\n                                                                                                                                                        })\n                                                                                                                                                        .catch(\n                                                                                                                                                            error => {\n                                                                                                                                                                $(\"#retryButtonDiv\").show();\n                                                                                                                                                                this.setState({\n                                                                                                                                                                    message: `${SYNC_FAILED}`\n                                                                                                                                                                })\n                                                                                                                                                            });\n                                                                                                                                                })\n                                                                                                                                                .catch(\n                                                                                                                                                    error => {\n                                                                                                                                                        $(\"#retryButtonDiv\").show();\n                                                                                                                                                        this.setState({\n                                                                                                                                                            message: `${SYNC_FAILED}`\n                                                                                                                                                        })\n                                                                                                                                                    });\n                                                                                                                                        })\n                                                                                                                                        .catch(\n                                                                                                                                            error => {\n                                                                                                                                                $(\"#retryButtonDiv\").show();\n                                                                                                                                                this.setState({\n                                                                                                                                                    message: `${SYNC_FAILED}`\n                                                                                                                                                })\n                                                                                                                                            });\n                                                                                                                                })\n                                                                                                                                .catch(\n                                                                                                                                    error => {\n                                                                                                                                        $(\"#retryButtonDiv\").show();\n                                                                                                                                        this.setState({\n                                                                                                                                            message: `${SYNC_FAILED}`\n                                                                                                                                        })\n                                                                                                                                    });\n                                                                                                                        })\n                                                                                                                        .catch(\n                                                                                                                            error => {\n                                                                                                                                $(\"#retryButtonDiv\").show();\n                                                                                                                                this.setState({\n                                                                                                                                    message: `${SYNC_FAILED}`\n                                                                                                                                })\n                                                                                                                            });\n                                                                                                                })\n                                                                                                                .catch(\n                                                                                                                    error => {\n                                                                                                                        $(\"#retryButtonDiv\").show();\n                                                                                                                        this.setState({\n                                                                                                                            message: `${SYNC_FAILED}`\n                                                                                                                        })\n                                                                                                                    });\n                                                                                                        })\n                                                                                                        .catch(\n                                                                                                            error => {\n                                                                                                                $(\"#retryButtonDiv\").show();\n                                                                                                                this.setState({\n                                                                                                                    message: `${SYNC_FAILED}`\n                                                                                                                })\n                                                                                                            });\n                                                                                                })\n                                                                                                .catch(\n                                                                                                    error => {\n                                                                                                        $(\"#retryButtonDiv\").show();\n                                                                                                        this.setState({\n                                                                                                            message: `${SYNC_FAILED}`\n                                                                                                        })\n                                                                                                    });\n                                                                                        })\n                                                                                        .catch(\n                                                                                            error => {\n                                                                                                $(\"#retryButtonDiv\").show();\n                                                                                                this.setState({\n                                                                                                    message: `${SYNC_FAILED}`\n                                                                                                })\n                                                                                            });\n                                                                                })\n                                                                                .catch(\n                                                                                    error => {\n                                                                                        $(\"#retryButtonDiv\").show();\n                                                                                        this.setState({\n                                                                                            message: `${SYNC_FAILED}`\n                                                                                        })\n                                                                                    });\n                                                                        })\n                                                                        .catch(\n                                                                            error => {\n                                                                                $(\"#retryButtonDiv\").show();\n                                                                                this.setState({\n                                                                                    message: `${SYNC_FAILED}`\n                                                                                })\n                                                                            });\n                                                                })\n                                                                .catch(\n                                                                    error => {\n                                                                        $(\"#retryButtonDiv\").show();\n                                                                        this.setState({\n                                                                            message: `${SYNC_FAILED}`\n                                                                        })\n                                                                    });\n                                                        })\n                                                        .catch(\n                                                            error => {\n                                                                $(\"#retryButtonDiv\").show();\n                                                                this.setState({\n                                                                    message: `${SYNC_FAILED}`\n                                                                })\n                                                            });\n                                                })\n                                                .catch(\n                                                    error => {\n                                                        $(\"#retryButtonDiv\").show();\n                                                        this.setState({\n                                                            message: `${SYNC_FAILED}`\n                                                        })\n                                                    });\n                                        })\n                                        .catch(\n                                            error => {\n                                                $(\"#retryButtonDiv\").show();\n                                                this.setState({\n                                                    message: `${SYNC_FAILED}`\n                                                })\n                                            });\n                                })\n                                .catch(\n                                    error => {\n                                        $(\"#retryButtonDiv\").show();\n                                        this.setState({\n                                            message: `${SYNC_FAILED}`\n                                        })\n                                    });\n                        })\n                        .catch(\n                            error => {\n                                $(\"#retryButtonDiv\").show();\n                                this.setState({\n                                    message: `${SYNC_FAILED}`\n                                })\n                            });\n                }.bind(this)\n            }.bind(this)\n        } else {\n            alert(`${OFFLINE_MSG}`);\n        }\n    }\n\n    retryClicked() {\n        this.syncMasters();\n    }\n}","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass RegionService {\n\n    addRegion(json) {\n        console.log(json);\n        return axios.put(`${API_URL}/api/addRegion/`, json, {}\n        );\n    }\n\n    getRegionList() {\n        return axios.get(`${API_URL}/api/getRegionList/`, {\n        });\n    }\n    editRegion(json) {\n        return axios.put(`${API_URL}/api/editRegion/`, json, {}\n        );\n    }\n\n}\nexport default new RegionService();","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport CountryService from \"../../api/CountryService\";\nimport RegionService from \"../../api/RegionService\";\nimport UserService from \"../../api/UserService\";\nimport * as labels from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class AddRegionComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            countries: [],\n            realms: [],\n            region: {\n                label: {\n\n                },\n                realmCountry: {\n\n                }\n            },\n            selCountries:[],\n            message: ''\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n        this.getCountryListByRealmId = this.getCountryListByRealmId.bind(this);\n    }\n    dataChange(event) {\n        let { region } = this.state\n        if (event.target.name === \"region.label.label_en\") {\n            region.label.label_en = event.target.value\n        } else if (event.target.name === \"region.realmCountry.realmCountryId\") {\n            region.realmCountry.realmCountryId = event.target.value\n        }\n        this.setState({\n            region\n        }, (\n        ) => {\n            console.log(\"state after update---\", this.state.region)\n        })\n    }\n\n\n    componentDidMount() {\n        console.log(\"check---\" + AuthenticationService.checkTypeOfSession());\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        CountryService.getRealmCountryList()\n            .then(response => {\n                console.log(\"country list---\", response.data);\n                this.setState({\n                    countries: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRealmList()\n            .then(response => {\n                console.log(\"realm list---\", response.data);\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#regionForm\").validate({\n            ignore: [],\n            rules: {\n                'region.label.label_en': {\n                    required: true\n                },\n                'region.realmCountry.realmCountryId': {\n                    required: true\n                },\n                'region.realm.realmId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { selCountries } = this.state;\n        const { realms } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.label_pr !== null && item.label.label_pr !== \"\" ? item.label.label_pr : item.label.label_en);\n                                case 3: return (item.label.label_fr !== null && item.label.label_fr !== \"\" ? item.label.label_fr : item.label.label_en);\n                                case 4: return (item.label.label_sp !== null && item.label.label_sp !== \"\" ? item.label.label_sp : item.label.label_en);\n                                default: return item.label.label_en;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n\n        let countryList = selCountries.length > 0\n            && selCountries.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmCountryId}>\n                        {item.country.label.label_en}\n                    </option>\n                )\n            }, this);\n        return (\n            <div class=\"page-container page-navigation-toggled page-container-wide\">\n                <div class=\"page-content\">\n                    <ul class=\"breadcrumb\">\n                        <li><a href=\"#\">Home</a></li>\n                        <li><a href=\"#\">Admin</a></li>\n                        <li><a href=\"#\">Region</a></li>\n                        <li><a href=\"#\">Add Region</a></li>\n                    </ul>\n                    <div class=\"page-content-wrap\">\n                        <div><h5>{this.state.message}</h5></div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n\n                                <form name=\"regionForm\" id=\"regionForm\" class=\"form-horizontal\">\n                                    <div class=\"panel panel-default\">\n                                        <div class=\"panel-heading\">\n                                            <h3 class=\"panel-title\">{labels.TITLE_ADD_REGION}</h3>\n                                        </div>\n                                        <div class=\"panel-body\">\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.REALM}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"region.realm.realmId\" class=\"form-control select\" data-live-search=\"true\" name=\"region.realm.realmId\" onChange={this.dataChange, this.getCountryListByRealmId}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {realmList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.COUNTRY}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"region.realmCountry.realmCountryId\" class=\"form-control select\" data-live-search=\"true\" name=\"region.realmCountry.realmCountryId\" onChange={this.dataChange}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {countryList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.REGION_NAME_ENG}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"region.label.label_en\" class=\"form-control\" name=\"region.label.label_en\" onChange={this.dataChange} />\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"panel-footer\">\n                                            <div class=\"pull-right\">\n                                                <button type=\"button\" className=\"btn btn-success\" onClick={this.submitClicked}>{labels.BTN_SUBMIT}</button>\n                                                <button type=\"button\" className=\"btn btn-danger\" onClick={this.cancelClicked}>{labels.BTN_CANCEL}</button><br></br><br></br>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    getCountryListByRealmId(event) {\n        console.log(\"realm id---\" + event.target.value);\n        console.log(this.state.countries);\n        let realmId = event.target.value;\n        const selCountries = this.state.countries.filter(c => c.realm.realmId == realmId)\n        console.log(\"selCountries---\", selCountries);\n\n        this.setState({\n            selCountries:selCountries\n        });\n    }\n    submitClicked() {\n        console.log($(\"#countryIds\").val())\n        if (navigator.onLine) {\n            console.log(\"check---\" + AuthenticationService.checkTypeOfSession());\n            if (AuthenticationService.checkTypeOfSession()) {\n                console.log(\"state---\" + this.state.region);\n                if ($(\"#regionForm\").valid()) {\n                    // var json = {\n                    //     label: {\n                    //         label_en: $(\"#region\\\\.label\\\\.label_en\").val()\n                    //     },\n                    //     country: $(\"#roles\").val(),\n                    //     language: {\n                    //         languageId: $(\"#languageId\").val()\n                    //     },\n                    //     countryIds: $(\"#countryIds\").val()\n                    // }\n                    console.log(this.state.region);\n                    RegionService.addRegion(this.state.region)\n                        .then(response => {\n                            this.props.history.push(`/regionList/${response.data.message}`)\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline or vice versa.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/regionList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport CountryService from \"../../api/CountryService\";\nimport RegionService from \"../../api/RegionService\";\nimport UserService from \"../../api/UserService\";\nimport * as labels from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class EditRegionComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            countries: [],\n            realms: [],\n            region: this.props.location.state.region,\n            message: ''\n        }\n        this.updateClicked = this.updateClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n        this.getCountryListByRealmId = this.getCountryListByRealmId.bind(this);\n        this.realmOnChangeEvent = this.realmOnChangeEvent.bind(this);\n    }\n\n    realmOnChangeEvent(event) {\n        this.dataChange(event);\n        this.getCountryListByRealmId(event.target.value);\n    }\n    dataChange(event) {\n        let { region } = this.state\n        if (event.target.name === \"region.label.label_en\") {\n            region.label.label_en = event.target.value\n        } else if (event.target.name === \"region.realmCountry.realmCountryId\") {\n            region.realmCountry.realmCountryId = event.target.value\n        }\n        else if (event.target.name === \"region.realmCountry.realm.realmId\") {\n            region.realmCountry.realm.realmId = event.target.value\n        }\n        else if (event.target.name === \"region.active\") {\n            region.active = event.target.id === \"region.active2\" ? false : true\n        }\n        this.setState({\n            region\n        }, (\n        ) => {\n            console.log(\"state after update---\", this.state.region)\n        })\n    }\n\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        CountryService.getRealmCountryList()\n            .then(response => {\n                console.log(\"country list---\", response.data);\n                this.setState({\n                    countries: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRealmList()\n            .then(response => {\n                console.log(\"realm list---\", response.data);\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#regionForm\").validate({\n            ignore: [],\n            rules: {\n                'region.label.label_en': {\n                    required: true\n                },\n                'region.realmCountry.realmCountryId': {\n                    required: true\n                },\n                'region.realmCountry.realm.realmId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { countries } = this.state;\n        const { realms } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.label_pr !== null && item.label.label_pr !== \"\" ? item.label.label_pr : item.label.label_en);\n                                case 3: return (item.label.label_fr !== null && item.label.label_fr !== \"\" ? item.label.label_fr : item.label.label_en);\n                                case 4: return (item.label.label_sp !== null && item.label.label_sp !== \"\" ? item.label.label_sp : item.label.label_en);\n                                default: return item.label.label_en;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n\n        let countryList = countries.length > 0\n            && countries.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmCountryId}>\n                        {item.country.label.label_en}\n                    </option>\n                )\n            }, this);\n        return (\n            <div class=\"page-container page-navigation-toggled page-container-wide\">\n                <div class=\"page-content\">\n                    <ul class=\"breadcrumb\">\n                        <li><a href=\"#\">Home</a></li>\n                        <li><a href=\"#\">Admin</a></li>\n                        <li><a href=\"#\">Region</a></li>\n                        <li><a href=\"#\">Update Region</a></li>\n                    </ul>\n                    <div class=\"page-content-wrap\">\n                        <div><h5>{this.state.message}</h5></div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n\n                                <form name=\"regionForm\" id=\"regionForm\" class=\"form-horizontal\">\n                                    <div class=\"panel panel-default\">\n                                        <div class=\"panel-heading\">\n                                            <h3 class=\"panel-title\">{labels.TITLE_EDIT_REGION}</h3>\n                                        </div>\n                                        <div class=\"panel-body\">\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.REALM}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"region.realmCountry.realm.realmId\" class=\"form-control select\" data-live-search=\"true\" name=\"region.realmCountry.realm.realmId\" onChange={this.realmOnChangeEvent} value={this.state.region.realmCountry.realm.realmId}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {realmList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.COUNTRY}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"region.realmCountry.realmCountryId\" class=\"form-control select\" data-live-search=\"true\" name=\"region.realmCountry.realmCountryId\" onChange={this.dataChange} value={this.state.region.realmCountry.realmCountryId}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {countryList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.REGION_NAME_ENG}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"region.label.label_en\" class=\"form-control\" name=\"region.label.label_en\" onChange={this.dataChange} value={this.state.region.label.label_en} />\n                                                </div>\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ACTIVE}</label>\n                                                <div class=\"col-md-1 col-xs-12\">\n                                                    <input type=\"radio\" id=\"region.active1\" name=\"region.active\" value={true} checked={this.state.region.active === true} onChange={this.dataChange} /> Active\n                                                    <input type=\"radio\" id=\"region.active2\" name=\"region.active\" value={false} checked={this.state.region.active === false} onChange={this.dataChange} /> Disabled\n                                            </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"panel-footer\">\n                                            <div class=\"pull-right\">\n                                                <button type=\"button\" className=\"btn btn-success\" onClick={this.updateClicked}>{labels.BTN_UPDATE}</button>\n                                                <button type=\"button\" className=\"btn btn-danger\" onClick={this.cancelClicked}>{labels.BTN_CANCEL}</button><br></br><br></br>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    getCountryListByRealmId(realmId) {\n        CountryService.getRealmCountryListByRealmId(realmId !== \"\" ? realmId : 0)\n            .then(response => {\n                this.setState({\n                    countries: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n    }\n    updateClicked() {\n        console.log($(\"#countryIds\").val())\n        if (navigator.onLine) {\n            console.log(\"check---\" + AuthenticationService.checkTypeOfSession());\n            if (AuthenticationService.checkTypeOfSession()) {\n                console.log(\"state---\" + this.state.region);\n                if ($(\"#regionForm\").valid()) {\n                    console.log(this.state.region);\n                    RegionService.editRegion(this.state.region)\n                        .then(response => {\n                            this.props.history.push(`/regionList/${response.data.message}`)\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline or vice versa.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/regionList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport UserService from \"../../api/UserService.js\";\nimport RegionService from \"../../api/RegionService.js\";\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as labels from '../../Labels.js'\n\n\nexport default class RegionListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            regions: [],\n            message: \"\"\n        }\n        this.editRegion = this.editRegion.bind(this);\n        this.addRegion = this.addRegion.bind(this);\n    }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        RegionService.getRegionList()\n            .then(response => {\n                console.log(\"rol list---\" + response.data);\n                this.setState({\n                    regions: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    render() {\n        return (\n            <div className=\"regionList\">\n                <p>{this.props.match.params.message}</p>\n                <h3>{this.state.message}</h3>\n                <div>{labels.TITLE_REGION_LIST}</div>\n                <button className=\"btn btn-add\" type=\"button\" style={{ marginLeft: '-736px' }} onClick={this.addRegion}>{labels.TITLE_ADD_REGION}</button><br /><br />\n                <table border=\"1\" align=\"center\">\n                    <thead>\n                        <tr>\n                            <th>Region</th>\n                            <th>Country</th>\n                            <th>Realm</th>\n                            <th>Status</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.regions.map(region =>\n                                <tr key={region.regionId} onClick={() => this.editRegion(region)}>\n                                    <td>{region.label.label_en}</td>\n                                    <td>{region.realmCountry.country.label.label_en}</td>\n                                    <td>{region.realmCountry.realm.label.label_en}</td>\n                                    <td>{region.active.toString() === \"true\" ? \"Active\" : \"Disabled\"}</td>\n                                </tr>)\n                        }\n                    </tbody>\n                </table>\n                <br />\n            </div>\n        );\n    }\n    editRegion(region) {\n        this.props.history.push({\n            pathname: \"/editRegion\",\n            state: { region: region }\n        });\n    }\n    addRegion() {\n        if (navigator.onLine) {\n            this.props.history.push(`/addRegion`);\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n\n}","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass LabelsService {\n    getLabelsListAll() {\n        return axios.get(`${API_URL}/api/getLabelsListAll/`, {\n        });\n    } \n\n    updateLabels(json) {\n        return axios.put(`${API_URL}/api/updateLabels/`, json, {}\n        );\n    }\n\n}\nexport default new LabelsService();","import React, { Component } from 'react';\nimport { Offline, Online } from \"react-detect-offline\";\nimport LabelsService from '../../api/LabelService.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class UpdateLabelsComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            label: {\n                labelId: '',\n                label_sp: '',\n                label_pr: '',\n                label_fr: '',\n                label_en: ''\n            },\n            // labelList: []\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.Capitalize=this.Capitalize.bind(this);\n    }\n\n    componentDidMount() {\n\n        AuthenticationService.setupAxiosInterceptors();\n        this.setState({\n            label: this.props.location.state.label\n        });\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                'label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n                'label.label_fr': {\n                    \n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n                'label.label_sp': {\n                   \n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n                'label.label_pr': {\n                    \n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                }\n\n            }\n        });\n\n    }\n    updateFieldData(event) {\n        let { label } = this.state\n        if (event.target.name === \"label.label_en\") {\n            label.label_en = event.target.value\n        }\n        if (event.target.name === \"label.label_fr\") {\n            label.label_fr = event.target.value\n        } if (event.target.name === \"label.label_sp\") {\n            label.label_sp = event.target.value\n        } else if (event.target.name === \"label.label_pr\") {\n            label.label_pr = event.target.value\n        }\n\n\n        this.setState(\n            {\n                label\n            }\n        )\n\n    }\n\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    submitForm() {\n\n        if ($(\"#form1\").valid()) {\n            delete (this.state.label[\"createdDate\"]);\n            delete (this.state.label[\"lastModifiedDate\"]);\n            LabelsService.updateLabels(this.state.label).then(response => {\n                this.props.history.push(`/labelList/${response.data.message}`)\n            }\n            )\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                        }\n                    }\n                )\n        }\n\n\n    }\n    render() {\n\n\n        return (\n            <>\n                <div className=\"page-content-wrap\">\n                    <div className=\"row\">\n                        <div>\n                            <ul className=\"breadcrumb\">\n                                <li><a href=\"#\">Home</a></li>\n                                <li><a href=\"#\">Forms Stuff</a></li>\n                                <li className=\"active\">Form Wizards</li>\n                            </ul>\n                        </div>\n\n                        <div className=\"col-md-8 col-md-offset-2\">\n                            <div className=\"login mt-2 block\">\n                                <div className=\"panel panel-default\">\n                                    <div className=\"panel-heading\">\n                                        <h3 className=\"panel-title\">Label</h3>\n                                    </div>\n                                    <div className=\"panel-body\">\n                                        <div className=\"col-md-6 col-md-offset-3\">\n                                            <div className=\"block\">\n\n                                                <form className=\"form-horizontal\" name=\"form1\" id=\"form1\">\n\n\n                                                    {/* <div className=\"form-group\">\n                                                        <label className=\"col-md-5 control-label \">Label :</label>\n                                                        <div className=\"col-md-7\">\n                                                            <select name=\"label.labelId\" className=\"validate[required] form-control select\" id=\"formGender\" onChange={this.updateFieldData}>\n                                                                <option value=\"\">Choose option</option>\n                                                                {labelItems}\n                                                            </select>\n                                                            <span className=\"help-block\"></span>\n                                                        </div>\n                                                    </div> */}\n\n                                                    <input type=\"hidden\" id=\"oldPassword\" name=\"label.labelId\" value={this.state.label.labelId} className=\"form-control\" onChange={this.updateFieldData}></input>\n\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-5 control-label\">English  Label :</label>\n                                                        <div className=\"col-md-7\">\n                                                            <input type=\"text\" id=\"oldPassword\" name=\"label.label_en\" value={this.Capitalize(this.state.label.label_en)} className=\"form-control\" onChange={this.updateFieldData}></input>\n                                                            <span className=\"help-block\"></span>\n                                                        </div>\n                                                    </div>\n\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-5 control-label\">French Label :</label>\n                                                        <div className=\"col-md-7\">\n                                                            <input type=\"text\" id=\"oldPassword\" name=\"label.label_fr\" value={this.Capitalize(this.state.label.label_fr)} className=\"form-control\" onChange={this.updateFieldData}></input>\n                                                            <span className=\"help-block\"></span>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-5 control-label \">Spanish Label  :</label>\n                                                        <div className=\"col-md-7\">\n                                                            <input type=\"text\" id=\"oldPassword\" name=\"label.label_sp\" value={this.Capitalize(this.state.label.label_sp)} className=\"form-control\" onChange={this.updateFieldData}></input>\n                                                            <span className=\"help-block\"></span>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"form-group\">\n                                                        <label className=\"col-md-5 control-label \">Portuguese Label :</label>\n                                                        <div className=\"col-md-7\">\n                                                            <input type=\"text\" id=\"oldPassword\" name=\"label.label_pr\" value={this.Capitalize(this.state.label.label_pr)} className=\"form-control\" onChange={this.updateFieldData}></input>\n                                                            <span className=\"help-block\"></span>\n                                                        </div>\n                                                    </div>\n\n\n                                                </form>\n\n                                            </div>\n                                        </div>\n\n                                    </div>\n                                    <div className=\"panel-footer\">\n\n                                        <Online>\n                                            <button type=\"button\" className=\"btn btn-primary pull-right ml-1\">cancel</button>\n                                        </Online>\n                                        <Online>\n                                            <button type=\"button\" onClick={this.submitForm} className=\"btn btn-success pull-right\">Submit</button>\n                                        </Online>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div></div></div>\n\n            </>\n        );\n\n    }\n\n\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport LabelsService from '../../api/LabelService.js';\n\nexport default class LabelListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            labelList: []\n        }\n        this.editLabel=this.editLabel.bind(this);\n    }\n    componentDidMount() {\n\n        AuthenticationService.setupAxiosInterceptors();\n        LabelsService.getLabelsListAll().then(response => {\n            //console.log(response.data)\n            this.setState({\n                labelList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n\n    }\n\n    editLabel(label){\n        this.props.history.push({\n            pathname: \"/editLabels\",\n            state: { label: label }\n        });\n\n    }\n    render() {\n\n        return (\n\n            <div className=\"page-content-wrap\">\n\n\n                <div className=\"row\">\n                    <div>\n                        <ul class=\"breadcrumb\">\n                            <li><a href=\"#\">Home</a></li>\n                            <li><a href=\"#\">Forms Stuff</a></li>\n                            <li class=\"active\">Form Wizards</li>\n\n\n                        </ul>\n                    </div>\n\n                    <div className=\"col-md-8 col-md-offset-2\">\n\n                        <div className=\"mt-2\">\n\n\n                            <div className=\"panel panel-default\">\n\n\n                                <div className=\"panel-heading\">\n                                    <h3 className=\"panel-title\">Label List</h3>\n                                </div>\n                                <div className=\"panel-body\">\n                                    <div className=\"col-md-12\">\n\n\n\n                                        <div className=\"table-responsive\">\n                                            <table className=\"table datatable\">\n                                                <thead>\n                                                    <tr>\n                                                        <th>LABEL_EN</th>\n                                                        <th>LABEL_FR</th>\n                                                        <th>LABEL_PR</th>\n                                                        <th>LABEL_SP</th>\n                                                        {/* <th>ACTIVE</th> */}\n                                                        <th>CREATED DATE</th>\n                                                         <th>MODIFIED DATE</th>\n\n\n\n                                                    </tr>\n                                                </thead>\n                                                <tbody>\n                                                    {\n                                                        this.state.labelList.map(label =>\n\n                                                            <tr key={label.labelId} onClick={() => this.editLabel(label)}>\n                                                                <td>{label.label_en}</td>\n                                                                <td>{label.label_fr}</td>\n                                                                <td>{label.label_pr}</td>\n                                                                <td>{label.label_sp}</td>\n                                                                \n                                                                {/* <td>{label.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}</td> */}\n                                                                <td>{label.createdDate}</td> \n                                                                 <td>{label.lastModifiedDate}</td>\n                                                            </tr>\n                                                        )\n\n                                                    }\n                                                </tbody>\n                                            </table>\n                                        </div>\n\n                                    </div>\n\n                                </div>\n\n\n\n                            </div>\n\n\n                        </div>\n\n\n                    </div>\n\n\n                </div>\n\n\n            </div>\n\n        );\n\n    }\n\n}","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass UnitTypeSerice {\n\n    addUniType(json) {\n        return axios.put(`${API_URL}/api/addUnitType/`, json, {\n        });\n    }\n\n    getUnitTypeListAll() {\n        return axios.get(`${API_URL}/api/unitTypeList/`, {\n        });\n    } \n\n    updateUnitType(json) {\n        return axios.put(`${API_URL}/api/editUnitType/`, json, {\n        });\n    }\n}\n\nexport default new UnitTypeSerice()","import React, { Component } from 'react';\nimport * as myConst from '../../Labels.js';\nimport UnitTypeService from '../../api/UnitTypeService.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\nexport default class AddUnitTypeComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            unitType: {\n                label: {\n                    label_en: ''\n                }\n            }\n        }\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.Capitalize = this.Capitalize.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        $(\"#unitTypeForm\").validate({\n            ignore: [],\n            rules: {\n                'label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n    }\n    updateFieldData(event) {\n        let { unitType } = this.state\n        if (event.target.name === \"label.label_en\") {\n            //console.log(\"inside if\")\n            unitType.label.label_en = event.target.value\n        }\n        this.setState(\n            {\n                unitType\n            }\n        )\n    }\n\n    submitForm() {\n        if ($(\"#unitTypeForm\").valid()) {\n            UnitTypeService.addUniType(this.state.unitType).then(response => {\n                this.props.history.push(`/unitTypeList/${response.data.message}`)\n                console.log(\"success\");\n            }\n            )\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.response.data.message\n                                })\n                                break\n                        }\n                    }\n                )\n        }\n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    render() {\n        return (\n            <>\n                <h3>Add Unit Type</h3>\n                <form name=\"unitTypeForm\" id=\"unitTypeForm\">\n                    <div>\n                        <label>Unit Type:-</label>\n                        <input type=\"text\" name=\"label.label_en\" value={this.Capitalize(this.state.unitType.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        <button type=\"button\" onClick={this.submitForm}>{myConst.SUBMIT_BUTTON}</button>\n                    </div>\n                </form>\n            </>\n        );\n    }\n} ","import React, { Component } from 'react';\nimport UnitTypeService from '../../api/UnitTypeService.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\n\n\nexport default class UnitTypeListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            unitTypeList: []\n        }\n        this.addNewUnitType = this.addNewUnitType.bind(this);\n        this.editUnitType = this.editUnitType.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        UnitTypeService.getUnitTypeListAll().then(response => {\n            console.log(response.data)\n            this.setState({\n                unitTypeList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    editUnitType(unitType) {\n        this.props.history.push({\n            pathname: \"/editUnitType\",\n            state: { unitType: unitType }\n        });\n    }\n\n    addNewUnitType() {\n        if (navigator.onLine) {\n            this.props.history.push(`/addUnitType`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n    }\n    render() {\n\n        return (\n            <>\n                <p>{this.props.match.params.message}</p>\n                <div>\n                    <button type=\"button\" style={{ marginLeft: '-999px' }} onClick={this.addNewUnitType}>{myConst.ADD_NEW_UNIT_TYPE}</button><br /><br />\n                </div>\n\n                <div className=\"unitTypeList\">\n\n                    <h1>{myConst.UNIT_TYPE_LIST}</h1>\n                    <table border=\"1\" align=\"center\">\n                        <thead>\n                            <tr>\n                                <th>{myConst.UNIT_TYPE_NAME_EN}</th>\n                                <th>{myConst.UNIT_TYPE_NAME_FR}</th>\n                                <th>{myConst.UNIT_TYPE_NAME_SP}</th>\n                                <th>{myConst.UNIT_TYPE_NAME_PO}</th>\n                                {/* <th>{myConst.CREATED_DATE}</th> */}\n                                {/* <th>{myConst.LAST_MODIFIED_DATE}</th> */}\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.unitTypeList.map(unityType =>\n\n                                    <tr key={unityType.unitTypeId} onClick={() => this.editUnitType(unityType)}>\n                                        <td>{unityType.label.label_en}</td>\n                                        <td>{unityType.label.label_fr}</td>\n                                        <td>{unityType.label.label_sp}</td>\n                                        <td>{unityType.label.label_pr}</td>\n                                        {/* <td>{unityType.createdDate}</td> */}\n                                        {/* <td>{unityType.lastModifiedDate}</td> */}\n                                        {/* <td>{dataSourceType.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}</td> */}\n                                    </tr>\n                                )\n\n                            }\n                        </tbody>\n                    </table>\n                </div>\n\n\n            </>\n        );\n    }\n}","import React, { Component } from 'react';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as myConst from '../../Labels.js';\nimport UnitTypeService from '../../api/UnitTypeService.js';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\n\n\nexport default class UpdateUnitTypeComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            unitType: {\n                unitTypeId: '',\n                label: {\n                    labelId: '',\n                    label_en: ''\n                }\n            }\n        }\n        this.Capitalize = this.Capitalize.bind(this);\n        this.updateFieldData = this.updateFieldData.bind(this);\n        this.updateForm = this.updateForm.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        console.log(this.props.location.state.unitType);\n        this.setState({\n            unitType: this.props.location.state.unitType\n        });\n        $(\"#updateUnitTypeForm\").validate({\n            ignore: [],\n            rules: {\n                'unitType.label.label_en': {\n                    required: true,\n                    lettersonlywhitespace: true,\n                    maxlength: 255\n                },\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    updateFieldData(event) {\n        let { unitType } = this.state\n        if (event.target.name === \"unitType.label.label_en\") {\n            //console.log(\"inside if\")\n            unitType.label.label_en = event.target.value\n        }\n        this.setState(\n            {\n                unitType\n            }\n        )\n\n    }\n\n    updateForm() {\n        if ($(\"#updateUnitTypeForm\").valid()) {\n            // delete (this.state.unitType[\"createdDate\"]);\n            // delete (this.state.unitType[\"lastModifiedDate\"]);\n            console.log(this.state);\n            UnitTypeService.updateUnitType(this.state.unitType).then(response => {\n                this.props.history.push(`/unitTypeList/${response.data.message}`)\n                console.log(\"success\");\n            }\n            )\n                .catch(\n                    error => {\n                        switch (error.message) {\n                            case \"Network Error\":\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                            default:\n                                this.setState({\n                                    message: error.message\n                                })\n                                break\n                        }\n                    }\n                )\n        }\n    }\n\n    cancelClicked() {\n        this.props.history.push(`/unitTypeList/` + \"Action Canceled\")\n    }\n\n    render() {\n\n        return (\n            <>\n                <h3>{myConst.UPDATE_UNIT_TYPE}</h3>\n                <form name=\"updateUnitTypeForm\" id=\"updateUnitTypeForm\">\n                    <div>\n                        <label>{myConst.UNIT_TYPE_NAME_EN}:-</label>\n                        <input type=\"text\" name=\"unitType.label.label_en\" value={this.Capitalize(this.state.unitType.label.label_en)} onChange={this.updateFieldData} />\n                    </div>\n                    <br /><br />\n                    {/*                   \n                    <div>\n                        {myConst.ACTIVE}:\n                    <input type=\"radio\" id=\"dataSourceType.active1\" name=\"dataSourceType.active\" value={true} checked={this.state.dataSourceType.active === true} onChange={this.updateFieldData} /> Active\n                    <input type=\"radio\" id=\"dataSourceType.active2\" name=\"dataSourceType.active\" value={false} checked={this.state.dataSourceType.active === false} onChange={this.updateFieldData} /> Disabled\n                     </div> */}\n\n                    <div>\n                        <button type=\"button\" onClick={this.updateForm}>{myConst.UPDATE_BUTTON}</button>\n                        <button type=\"button\" onClick={this.cancelClicked}>{myConst.BTN_CANCEL}</button><br></br><br></br>\n                    </div>\n                </form>\n\n\n            </>\n\n        );\n    }\n}","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass HealthAreaService {\n\n    addHealthArea(json) {\n        console.log(json);\n        return axios.post(`${API_URL}/api/healthArea/`, json, {}\n        );\n    }\n\n    getHealthAreaList() {\n        return axios.get(`${API_URL}/api/healthArea/`, {\n        });\n    }\n    editHealthArea(json) {\n        return axios.put(`${API_URL}/api/healthArea/`, json, {}\n        );\n    }\n\n}\nexport default new HealthAreaService();","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport CountryService from \"../../api/CountryService\";\nimport HealthAreaService from \"../../api/HealthAreaService\";\nimport UserService from \"../../api/UserService\";\nimport * as labels from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class AddHealthAreaComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            countries: [],\n            realms: [],\n            healthArea: {\n                label: {\n\n                },\n                realm :{\n\n                },\n                realmCountryArray: {\n\n                }\n            },\n            selCountries: [],\n            message: ''\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n        this.getCountryListByRealmId = this.getCountryListByRealmId.bind(this);\n    }\n    dataChange(event) {\n        let { healthArea } = this.state\n        console.log(event.target.name)\n        console.log(event.target.value)\n        if (event.target.name === \"healthArea.label.label_en\") {\n            healthArea.label.label_en = event.target.value\n        } else if (event.target.name === \"healthArea.realmCountryArray\") {\n            healthArea.realmCountryArray = Array.from(event.target.selectedOptions, (item) => item.value)\n        } else if (event.target.name === \"healthArea.realm.realmId\") {\n            this.getCountryListByRealmId(event);\n            healthArea.realm.realmId = event.target.value\n        }\n        this.setState({\n            healthArea\n        }, (\n        ) => {\n            console.log(\"state after update---\", this.state.healthArea)\n        })\n    }\n\n\n    componentDidMount() {\n        console.log(\"check---\" + AuthenticationService.checkTypeOfSession());\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        CountryService.getRealmCountryList()\n            .then(response => {\n                console.log(\"country list---\", response.data);\n                this.setState({\n                    countries: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRealmList()\n            .then(response => {\n                console.log(\"realm list---\", response.data);\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#healthAreaForm\").validate({\n            ignore: [],\n            rules: {\n                'healthArea.label.label_en': {\n                    required: true\n                },\n                'healthArea.realmCountryArray': {\n                    required: true\n                },\n                'healthArea.realm.realmId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { selCountries } = this.state;\n        const { realms } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.label_pr !== null && item.label.label_pr !== \"\" ? item.label.label_pr : item.label.label_en);\n                                case 3: return (item.label.label_fr !== null && item.label.label_fr !== \"\" ? item.label.label_fr : item.label.label_en);\n                                case 4: return (item.label.label_sp !== null && item.label.label_sp !== \"\" ? item.label.label_sp : item.label.label_en);\n                                default: return item.label.label_en;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n\n        let countryList = selCountries.length > 0\n            && selCountries.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmCountryId}>\n                        {item.country.label.label_en}\n                    </option>\n                )\n            }, this);\n        return (\n            <div class=\"page-container page-navigation-toggled page-container-wide\">\n                <div class=\"page-content\">\n                    <ul class=\"breadcrumb\">\n                        <li><a href=\"#\">Home</a></li>\n                        <li><a href=\"#\">Admin</a></li>\n                        <li><a href=\"#\">Health Area</a></li>\n                        <li><a href=\"#\">Add Health Area</a></li>\n                    </ul>\n                    <div class=\"page-content-wrap\">\n                        <div><h5>{this.state.message}</h5></div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n\n                                <form name=\"healthAreaForm\" id=\"healthAreaForm\" class=\"form-horizontal\">\n                                    <div class=\"panel panel-default\">\n                                        <div class=\"panel-heading\">\n                                            <h3 class=\"panel-title\">{labels.TITLE_ADD_HEALTH_AREA}</h3>\n                                        </div>\n                                        <div class=\"panel-body\">\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.REALM}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"healthArea.realm.realmId\" class=\"form-control select\" data-live-search=\"true\" name=\"healthArea.realm.realmId\" onChange={this.dataChange}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {realmList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.COUNTRY}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"healthArea.realmCountryArray\" class=\"form-control select\" data-live-search=\"true\" name=\"healthArea.realmCountryArray\" onChange={this.dataChange} multiple={true}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {countryList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.HEALTH_AREA_NAME_ENG}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"healthArea.label.label_en\" class=\"form-control\" name=\"healthArea.label.label_en\" onChange={this.dataChange} />\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"panel-footer\">\n                                            <div class=\"pull-right\">\n                                                <button type=\"button\" className=\"btn btn-success\" onClick={this.submitClicked}>{labels.BTN_SUBMIT}</button>\n                                                <button type=\"button\" className=\"btn btn-danger\" onClick={this.cancelClicked}>{labels.BTN_CANCEL}</button><br></br><br></br>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    getCountryListByRealmId(event) {\n        let realmId = event.target.value;\n        const selCountries = this.state.countries.filter(c => c.realm.realmId == realmId)\n        this.setState({\n            selCountries: selCountries\n        });\n    }\n    submitClicked() {\n        if (navigator.onLine) {\n            if (AuthenticationService.checkTypeOfSession()) {\n                if ($(\"#healthAreaForm\").valid()) {\n                    HealthAreaService.addHealthArea(this.state.healthArea)\n                        .then(response => {\n                            if (response.data.message != \"Failed\") {\n                                this.props.history.push(`/healthAreaList/${response.data.message}`)\n                            } else {\n                                this.setState({\n                                    message: response.data.message\n                                })\n                            }\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline or vice versa.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/healthAreaList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport UserService from \"../../api/UserService.js\";\nimport HealthAreaService from \"../../api/HealthAreaService.js\";\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as labels from '../../Labels.js'\n\n\nexport default class HealthAreaListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            healthAreas: [],\n            message: \"\"\n        }\n        this.editHealthArea = this.editHealthArea.bind(this);\n        this.addHealthArea = this.addHealthArea.bind(this);\n    }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        HealthAreaService.getHealthAreaList()\n            .then(response => {\n                console.log(\"response---\", response);\n                if (response.data.status != \"Failed\") {\n                    this.setState({\n                        healthAreas: response.data.data\n                    })\n                } else {\n                    this.setState({\n                        message: response.data.message\n                    })\n                }\n\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    render() {\n        return (\n            <div className=\"healthAreaList\">\n                <p>{this.props.match.params.message}</p>\n                <h3>{this.state.message}</h3>\n                <div>{labels.TITLE_HEALTH_AREA_LIST}</div>\n                <button className=\"btn btn-add\" type=\"button\" style={{ marginLeft: '-736px' }} onClick={this.addHealthArea}>{labels.TITLE_ADD_HEALTH_AREA}</button><br /><br />\n                <table border=\"1\" align=\"center\">\n                    <thead>\n                        <tr>\n                            <th>Health Area</th>\n                            <th>Realm</th>\n                            {/* <th>Country</th> */}\n                            <th>Status</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.healthAreas.map(healthArea =>\n                                <tr key={healthArea.organisationId} onClick={() => this.editHealthArea(healthArea)}>\n                                    <td>{healthArea.label.label_en}</td>\n                                    <td>{healthArea.realm.label.label_en}</td>\n                                    {/* <td>\n                                        {\n                                            organisation.realmCountryList.map(realmCountry => realmCountry.country.label.label_en)\n                                        }\n                                    </td> */}\n                                    <td>{healthArea.active.toString() === \"true\" ? \"Active\" : \"Disabled\"}</td>\n                                </tr>)\n                        }\n                    </tbody>\n                </table>\n                <br />\n            </div>\n        );\n    }\n    editHealthArea(healthArea) {\n        this.props.history.push({\n            pathname: \"/editHealthArea\",\n            state: { healthArea: healthArea }\n        });\n    }\n    addHealthArea() {\n        if (navigator.onLine) {\n            this.props.history.push(`/addHealthArea`);\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n\n}","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport CountryService from \"../../api/CountryService\";\nimport HealthAreaService from \"../../api/HealthAreaService\";\nimport UserService from \"../../api/UserService\";\nimport * as labels from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class EditHealthAreaComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            countries: [],\n            realms: [],\n            healthArea: this.props.location.state.healthArea,\n            message: ''\n        }\n        this.updateClicked = this.updateClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n        this.getCountryListByRealmId = this.getCountryListByRealmId.bind(this);\n    }\n    dataChange(event) {\n        let { healthArea } = this.state\n        console.log(event.target.name);\n        console.log(event.target.value);\n        if (event.target.name === \"healthArea.label.label_en\") {\n            healthArea.label.label_en = event.target.value\n        } else if (event.target.name === \"healthArea.realmCountryArray\") {\n            healthArea.realmCountryArray = Array.from(event.target.selectedOptions, (item) => item.value)\n        } else if (event.target.name === \"healthArea.realm.realmId\") {\n            this.getCountryListByRealmId(event.target.value);\n            healthArea.realm.realmId = event.target.value\n        } else if (event.target.name === \"healthArea.active\") {\n            healthArea.active = event.target.id === \"healthArea.active2\" ? false : true\n        }\n        this.setState({\n            healthArea\n        }, (\n        ) => {\n            console.log(\"state after update---\", this.state.healthArea)\n        })\n    }\n\n\n    componentDidMount() {\n        console.log(\"check---\", this.state.healthArea);\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        var realmId = parseInt(this.state.healthArea.realm.realmId);\n        this.getCountryListByRealmId(realmId);\n        UserService.getRealmList()\n            .then(response => {\n                console.log(\"realm list---\", response.data);\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#healthAreaForm\").validate({\n            ignore: [],\n            rules: {\n                'healthArea.label.label_en': {\n                    required: true\n                },\n                'healthArea.realmCountryArray': {\n                    required: true\n                },\n                'healthArea.realm.realmId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { countries } = this.state;\n        const { realms } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.label_pr !== null && item.label.label_pr !== \"\" ? item.label.label_pr : item.label.label_en);\n                                case 3: return (item.label.label_fr !== null && item.label.label_fr !== \"\" ? item.label.label_fr : item.label.label_en);\n                                case 4: return (item.label.label_sp !== null && item.label.label_sp !== \"\" ? item.label.label_sp : item.label.label_en);\n                                default: return item.label.label_en;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n\n        let countryList = countries.length > 0\n            && countries.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmCountryId}>\n                        {item.country.label.label_en}\n                    </option>\n                )\n            }, this);\n        return (\n            <div class=\"page-container page-navigation-toggled page-container-wide\">\n                <div class=\"page-content\">\n                    <ul class=\"breadcrumb\">\n                        <li><a href=\"#\">Home</a></li>\n                        <li><a href=\"#\">Admin</a></li>\n                        <li><a href=\"#\">Health Area</a></li>\n                        <li><a href=\"#\">Update Health Area</a></li>\n                    </ul>\n                    <div class=\"page-content-wrap\">\n                        <div><h5>{this.state.message}</h5></div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n\n                                <form name=\"healthAreaForm\" id=\"healthAreaForm\" class=\"form-horizontal\">\n                                    <div class=\"panel panel-default\">\n                                        <div class=\"panel-heading\">\n                                            <h3 class=\"panel-title\">{labels.TITLE_EDIT_HEALTH_AREA}</h3>\n                                        </div>\n                                        <div class=\"panel-body\">\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.REALM}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"healthArea.realm.realmId\" class=\"form-control select\" data-live-search=\"true\" name=\"healthArea.realm.realmId\" onChange={this.dataChange} value={this.state.healthArea.realm.realmId} disabled={true}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {realmList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.COUNTRY}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"healthArea.realmCountryArray\" class=\"form-control select\" data-live-search=\"true\" name=\"healthArea.realmCountryArray\" onChange={this.dataChange} multiple={true} value={this.state.healthArea.realmCountryArray}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {countryList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.HEALTH_AREA_NAME_ENG}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"healthArea.label.label_en\" class=\"form-control\" name=\"healthArea.label.label_en\" onChange={this.dataChange} value={this.state.healthArea.label.label_en} readOnly={true} />\n                                                </div>\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ACTIVE}</label>\n                                                <div class=\"col-md-1 col-xs-12\">\n                                                    <input type=\"radio\" id=\"healthArea.active1\" name=\"healthArea.active\" value={true} checked={this.state.healthArea.active === true} onChange={this.dataChange} /> Active\n                                                    <input type=\"radio\" id=\"healthArea.active2\" name=\"healthArea.active\" value={false} checked={this.state.healthArea.active === false} onChange={this.dataChange} /> Disabled\n                                            </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"panel-footer\">\n                                            <div class=\"pull-right\">\n                                                <button type=\"button\" className=\"btn btn-success\" onClick={this.updateClicked}>{labels.BTN_UPDATE}</button>\n                                                <button type=\"button\" className=\"btn btn-danger\" onClick={this.cancelClicked}>{labels.BTN_CANCEL}</button><br></br><br></br>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    getCountryListByRealmId(realmId) {\n        console.log(\"realmId---\" + realmId);\n        CountryService.getRealmCountryListByRealmId(realmId !== \"\" ? realmId : 0)\n            .then(response => {\n                console.log(\"response---\", response.data);\n                this.setState({\n                    countries: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n    }\n    updateClicked() {\n        if (navigator.onLine) {\n            if (AuthenticationService.checkTypeOfSession()) {\n                if ($(\"#healthAreaForm\").valid()) {\n                    HealthAreaService.editHealthArea(this.state.healthArea)\n                        .then(response => {\n                            console.log(\"response edit---\", response);\n                            if (response.data.message != \"Failed\") {\n                                this.props.history.push(`/healthAreaList/${response.data.message}`)\n                            } else {\n                                this.setState({\n                                    message: response.data.message\n                                })\n                            }\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline or vice versa.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/healthAreaList/` + \"Action Canceled\")\n    }\n\n}\n\n","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass OrganisationService {\n\n    addOrganisation(json) {\n        console.log(json);\n        return axios.post(`${API_URL}/api/organisation/`, json, {}\n        );\n    }\n\n    getOrganisationList() {\n        return axios.get(`${API_URL}/api/organisation/`, {\n        });\n    }\n    editOrganisation(json) {\n        return axios.put(`${API_URL}/api/organisation/`, json, {}\n        );\n    }\n\n}\nexport default new OrganisationService();","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport CountryService from \"../../api/CountryService\";\nimport OrganisationService from \"../../api/OrganisationService\";\nimport UserService from \"../../api/UserService\";\nimport * as labels from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class AddOrganisationComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            countries: [],\n            realms: [],\n            organisation: {\n                label: {\n\n                },\n                realm: {\n                    realmId: \"\"\n                },\n                realmCountryArray: {\n\n                }\n            },\n            selCountries: [],\n            message: ''\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n        this.getCountryListByRealmId = this.getCountryListByRealmId.bind(this);\n    }\n    dataChange(event) {\n        let { organisation } = this.state\n        console.log(event.target.name);\n        console.log(event.target.value);\n        if (event.target.name === \"organisation.label.label_en\") {\n            organisation.label.label_en = event.target.value\n        } else if (event.target.name === \"organisation.organisationCode\") {\n            organisation.organisationCode = event.target.value\n        } else if (event.target.name === \"organisation.realmCountryArray\") {\n            organisation.realmCountryArray = Array.from(event.target.selectedOptions, (item) => item.value)\n        } else if (event.target.name === \"organisation.realm.realmId\") {\n            this.getCountryListByRealmId(event);\n            console.log(event.target.value);\n            organisation.realm.realmId = event.target.value\n        }\n        this.setState({\n            organisation\n        }, (\n        ) => {\n            console.log(\"state after update---\", this.state.organisation)\n        })\n    }\n\n\n    componentDidMount() {\n        console.log(\"check---\" + AuthenticationService.checkTypeOfSession());\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        CountryService.getRealmCountryList()\n            .then(response => {\n                console.log(\"country list---\", response.data);\n                this.setState({\n                    countries: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        UserService.getRealmList()\n            .then(response => {\n                console.log(\"realm list---\", response.data);\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#organisationForm\").validate({\n            ignore: [],\n            rules: {\n                'organisation.label.label_en': {\n                    required: true\n                },\n                'organisation.organisationCode': {\n                    required: true\n                },\n                'organisation.realmCountryArray': {\n                    required: true\n                },\n                'organisation.realm.realmId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { selCountries } = this.state;\n        const { realms } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.label_pr !== null && item.label.label_pr !== \"\" ? item.label.label_pr : item.label.label_en);\n                                case 3: return (item.label.label_fr !== null && item.label.label_fr !== \"\" ? item.label.label_fr : item.label.label_en);\n                                case 4: return (item.label.label_sp !== null && item.label.label_sp !== \"\" ? item.label.label_sp : item.label.label_en);\n                                default: return item.label.label_en;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n\n        let countryList = selCountries.length > 0\n            && selCountries.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmCountryId}>\n                        {item.country.label.label_en}\n                    </option>\n                )\n            }, this);\n        return (\n            <div class=\"page-container page-navigation-toggled page-container-wide\">\n                <div class=\"page-content\">\n                    <ul class=\"breadcrumb\">\n                        <li><a href=\"#\">Home</a></li>\n                        <li><a href=\"#\">Admin</a></li>\n                        <li><a href=\"#\">Organisation</a></li>\n                        <li><a href=\"#\">Add Organisation</a></li>\n                    </ul>\n                    <div class=\"page-content-wrap\">\n                        <div><h5>{this.state.message}</h5></div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n\n                                <form name=\"organisationForm\" id=\"organisationForm\" class=\"form-horizontal\">\n                                    <div class=\"panel panel-default\">\n                                        <div class=\"panel-heading\">\n                                            <h3 class=\"panel-title\">{labels.TITLE_ADD_ORGANISATION}</h3>\n                                        </div>\n                                        <div class=\"panel-body\">\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.REALM}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"organisation.realm.realmId\" class=\"form-control select\" data-live-search=\"true\" name=\"organisation.realm.realmId\" onChange={this.dataChange}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {realmList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.COUNTRY}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"organisation.realmCountryArray\" class=\"form-control select\" data-live-search=\"true\" name=\"organisation.realmCountryArray\" onChange={this.dataChange} multiple={true}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {countryList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ORGANISATION_CODE}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"organisation.organisationCode\" class=\"form-control\" name=\"organisation.organisationCode\" onChange={this.dataChange} />\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ORGANISATION_NAME_ENG}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"organisation.label.label_en\" class=\"form-control\" name=\"organisation.label.label_en\" onChange={this.dataChange} />\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"panel-footer\">\n                                            <div class=\"pull-right\">\n                                                <button type=\"button\" className=\"btn btn-success\" onClick={this.submitClicked}>{labels.BTN_SUBMIT}</button>\n                                                <button type=\"button\" className=\"btn btn-danger\" onClick={this.cancelClicked}>{labels.BTN_CANCEL}</button><br></br><br></br>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    getCountryListByRealmId(event) {\n        let realmId = event.target.value;\n        const selCountries = this.state.countries.filter(c => c.realm.realmId == realmId)\n        this.setState({\n            selCountries: selCountries\n        });\n    }\n    submitClicked() {\n        if (navigator.onLine) {\n            if (AuthenticationService.checkTypeOfSession()) {\n                if ($(\"#organisationForm\").valid()) {\n                    OrganisationService.addOrganisation(this.state.organisation)\n                        .then(response => {\n                            if (response.data.message != \"Failed\") {\n                                this.props.history.push(`/organisationList/${response.data.message}`)\n                            } else {\n                                this.setState({\n                                    message: response.data.message\n                                })\n                            }\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline or vice versa.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/organisationList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport UserService from \"../../api/UserService.js\";\nimport OrganisationService from \"../../api/OrganisationService.js\";\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport * as labels from '../../Labels.js'\n\n\nexport default class OrganisationListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            organisations: [],\n            message: \"\"\n        }\n        this.editOrganisation = this.editOrganisation.bind(this);\n        this.addOrganisation = this.addOrganisation.bind(this);\n    }\n\n    componentDidMount() {\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        OrganisationService.getOrganisationList()\n            .then(response => {\n                console.log(\"response---\", response);\n                if (response.data.status != \"Failed\") {\n                    this.setState({\n                        organisations: response.data.data\n                    })\n                } else {\n                    this.setState({\n                        message: response.data.message\n                    })\n                }\n\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    render() {\n        return (\n            <div className=\"organisationList\">\n                <p>{this.props.match.params.message}</p>\n                <h3>{this.state.message}</h3>\n                <div>{labels.TITLE_ORGANISATION_LIST}</div>\n                <button className=\"btn btn-add\" type=\"button\" style={{ marginLeft: '-736px' }} onClick={this.addOrganisation}>{labels.TITLE_ADD_ORGANISATION}</button><br /><br />\n                <table border=\"1\" align=\"center\">\n                    <thead>\n                        <tr>\n                            <th>Organisation Code</th>\n                            <th>Organisation Name</th>\n                            <th>Realm</th>\n                            {/* <th>Country</th> */}\n                            <th>Status</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.organisations.map(organisation =>\n                                <tr key={organisation.organisationId} onClick={() => this.editOrganisation(organisation)}>\n                                    <td>{organisation.organisationCode}</td>\n                                    <td>{organisation.label.label_en}</td>\n                                    <td>{organisation.realm.label.label_en}</td>\n                                    {/* <td>\n                                        {\n                                            organisation.realmCountryList.map(realmCountry => realmCountry.country.label.label_en)\n                                        }\n                                    </td> */}\n                                    <td>{organisation.active.toString() === \"true\" ? \"Active\" : \"Disabled\"}</td>\n                                </tr>)\n                        }\n                    </tbody>\n                </table>\n                <br />\n            </div>\n        );\n    }\n    editOrganisation(organisation) {\n        this.props.history.push({\n            pathname: \"/editOrganisation\",\n            state: { organisation: organisation }\n        });\n    }\n    addOrganisation() {\n        if (navigator.onLine) {\n            this.props.history.push(`/addOrganisation`);\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n\n}","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport CountryService from \"../../api/CountryService\";\nimport OrganisationService from \"../../api/OrganisationService\";\nimport UserService from \"../../api/UserService\";\nimport * as labels from '../../Labels.js'\nimport AuthenticationService from '../common/AuthenticationService.js';\n\n\nexport default class EditOrganisationComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            countries: [],\n            realms: [],\n            organisation: this.props.location.state.organisation,\n            message: ''\n        }\n        this.updateClicked = this.updateClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n        this.getCountryListByRealmId = this.getCountryListByRealmId.bind(this);\n    }\n    dataChange(event) {\n        let { organisation } = this.state\n        console.log(event.target.name);\n        console.log(event.target.value);\n        if (event.target.name === \"organisation.label.label_en\") {\n            organisation.label.label_en = event.target.value\n        } else if (event.target.name === \"organisation.organisationCode\") {\n            organisation.organisationCode = event.target.value\n        } else if (event.target.name === \"organisation.realmCountryArray\") {\n            organisation.realmCountryArray = Array.from(event.target.selectedOptions, (item) => item.value)\n        } else if (event.target.name === \"organisation.realm.realmId\") {\n            this.getCountryListByRealmId(event.target.value);\n            organisation.realm.realmId = event.target.value\n        } else if (event.target.name === \"organisation.active\") {\n            organisation.active = event.target.id === \"organisation.active2\" ? false : true\n        }\n        this.setState({\n            organisation\n        }, (\n        ) => {\n            console.log(\"state after update---\", this.state.organisation)\n        })\n    }\n\n\n    componentDidMount() {\n        console.log(\"check---\", this.state.organisation);\n        if (!AuthenticationService.checkTypeOfSession()) {\n            alert(\"You can't change your session from online to offline or vice versa.\");\n            this.props.history.push(`/`)\n        }\n        AuthenticationService.setupAxiosInterceptors();\n        var realmId = parseInt(this.state.organisation.realm.realmId);\n        this.getCountryListByRealmId(realmId);\n        UserService.getRealmList()\n            .then(response => {\n                console.log(\"realm list---\", response.data);\n                this.setState({\n                    realms: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        $(\"#organisationForm\").validate({\n            ignore: [],\n            rules: {\n                'organisation.label.label_en': {\n                    required: true\n                },\n                'organisation.organisationCode': {\n                    required: true\n                },\n                'organisation.realmCountryArray': {\n                    required: true\n                },\n                'organisation.realm.realmId': {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        const { countries } = this.state;\n        const { realms } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>\n                        {(() => {\n                            switch (this.state.languageId) {\n                                case 2: return (item.label.label_pr !== null && item.label.label_pr !== \"\" ? item.label.label_pr : item.label.label_en);\n                                case 3: return (item.label.label_fr !== null && item.label.label_fr !== \"\" ? item.label.label_fr : item.label.label_en);\n                                case 4: return (item.label.label_sp !== null && item.label.label_sp !== \"\" ? item.label.label_sp : item.label.label_en);\n                                default: return item.label.label_en;\n                            }\n                        })()}\n                    </option>\n                )\n            }, this);\n\n        let countryList = countries.length > 0\n            && countries.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmCountryId}>\n                        {item.country.label.label_en}\n                    </option>\n                )\n            }, this);\n        return (\n            <div class=\"page-container page-navigation-toggled page-container-wide\">\n                <div class=\"page-content\">\n                    <ul class=\"breadcrumb\">\n                        <li><a href=\"#\">Home</a></li>\n                        <li><a href=\"#\">Admin</a></li>\n                        <li><a href=\"#\">Organisation</a></li>\n                        <li><a href=\"#\">Update Organisation</a></li>\n                    </ul>\n                    <div class=\"page-content-wrap\">\n                        <div><h5>{this.state.message}</h5></div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n\n                                <form name=\"organisationForm\" id=\"organisationForm\" class=\"form-horizontal\">\n                                    <div class=\"panel panel-default\">\n                                        <div class=\"panel-heading\">\n                                            <h3 class=\"panel-title\">{labels.TITLE_EDIT_ORGANISATION}</h3>\n                                        </div>\n                                        <div class=\"panel-body\">\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.REALM}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"organisation.realm.realmId\" class=\"form-control select\" data-live-search=\"true\" name=\"organisation.realm.realmId\" onChange={this.dataChange} value={this.state.organisation.realm.realmId} disabled={true}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {realmList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.COUNTRY}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <select id=\"organisation.realmCountryArray\" class=\"form-control select\" data-live-search=\"true\" name=\"organisation.realmCountryArray\" onChange={this.dataChange} multiple={true} value={this.state.organisation.realmCountryArray}>\n                                                        <option value=\"\">-Nothing Selected-</option>\n                                                        {countryList}\n                                                    </select>\n\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ORGANISATION_CODE}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"organisation.organisationCode\" class=\"form-control\" name=\"organisation.organisationCode\" onChange={this.dataChange} value={this.state.organisation.organisationCode} maxLength=\"4\" />\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ORGANISATION_NAME_ENG}</label>\n                                                <div class=\"col-md-6 col-xs-12\">\n                                                    <input type=\"text\" id=\"organisation.label.label_en\" class=\"form-control\" name=\"organisation.label.label_en\" onChange={this.dataChange} value={this.state.organisation.label.label_en} readOnly={true} />\n                                                </div>\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label class=\"req col-md-2 col-xs-12 control-label\">{labels.ACTIVE}</label>\n                                                <div class=\"col-md-1 col-xs-12\">\n                                                    <input type=\"radio\" id=\"organisation.active1\" name=\"organisation.active\" value={true} checked={this.state.organisation.active === true} onChange={this.dataChange} /> Active\n                                                    <input type=\"radio\" id=\"organisation.active2\" name=\"organisation.active\" value={false} checked={this.state.organisation.active === false} onChange={this.dataChange} /> Disabled\n                                            </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"panel-footer\">\n                                            <div class=\"pull-right\">\n                                                <button type=\"button\" className=\"btn btn-success\" onClick={this.updateClicked}>{labels.BTN_UPDATE}</button>\n                                                <button type=\"button\" className=\"btn btn-danger\" onClick={this.cancelClicked}>{labels.BTN_CANCEL}</button><br></br><br></br>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    getCountryListByRealmId(realmId) {\n        console.log(\"realmId---\" + realmId);\n        CountryService.getRealmCountryListByRealmId(realmId !== \"\" ? realmId : 0)\n            .then(response => {\n                console.log(\"response---\", response.data);\n                this.setState({\n                    countries: response.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n    }\n    updateClicked() {\n        if (navigator.onLine) {\n            if (AuthenticationService.checkTypeOfSession()) {\n                if ($(\"#organisationForm\").valid()) {\n                    OrganisationService.editOrganisation(this.state.organisation)\n                        .then(response => {\n                            console.log(\"response edit---\", response);\n                            if (response.data.message != \"Failed\") {\n                                this.props.history.push(`/organisationList/${response.data.message}`)\n                            } else {\n                                this.setState({\n                                    message: response.data.message\n                                })\n                            }\n                        })\n                        .catch(\n                            error => {\n                                switch (error.message) {\n                                    case \"Network Error\":\n                                        this.setState({\n                                            message: error.message\n                                        })\n                                        break\n                                    default:\n                                        this.setState({\n                                            message: error.response.data.message\n                                        })\n                                        break\n                                }\n                            }\n                        );\n                }\n            } else {\n                alert(\"You can't change your session from online to offline or vice versa.\");\n            }\n        } else {\n            alert(\"You must be Online.\")\n        }\n    }\n    cancelClicked() {\n        this.props.history.push(`/organisationList/` + \"Action Canceled\")\n    }\n\n}\n\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport IdleTimer from 'react-idle-timer';\nimport WelcomeComponent from \"../home/WelcomeComponent\";\n// import { IdleTimeOutModal } from './IdleModal.js';\nimport PropTypes from 'prop-types';\nimport '../../css/bootstrap/bootstrap.min.css';\nimport '../../css/theme-default.css';\nimport '../../css/custom.css';\n\n\nimport '../../css/mcustomscrollbar/jquery.mCustomScrollbar.css';\n//import  action from '../../Js/actions.js'\nimport '../../App.css'\nimport AddUserComponent from \"../user/AddUserComponent.jsx\";\nimport UserListComponent from \"../user/UserListComponent.jsx\";\nimport EditUserComponent from \"../user/EditUserComponent.jsx\";\nimport ChangePasswordComponent from \"../home/ChangePasswordComponent.jsx\";\nimport LoginComponent from \"../home/LoginComponent.jsx\";\nimport RoleListComponent from \"../user/RoleListComponent.jsx\";\nimport AddRoleComponent from \"../user/AddRoleComponent.jsx\";\nimport EditRoleComponent from \"../user/EditRoleComponent.jsx\";\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport AddLanguageComponent from '../language/AddLanguageComponent'\nimport LanguageListComponent from \"../language/LanguageListComponent.jsx\"\nimport EditLanguageComponent from \"../language/EditLanguageComponent.jsx\"\nimport AddDataSourceTypeComponent from \"../datasourceType/AddDataSourceTypeComponent.jsx\"\nimport DataSourceTypeListComponent from \"../datasourceType/DataSourceTypeListComponent.jsx\"\nimport UpdateDataSourceTypeComponent from \"../datasourceType/UpdateDataSourceTypeComponent.jsx\"\nimport AddDataSource from \"../dataSource/AddDataSource.jsx\"\nimport DataSourceListComponent from \"../dataSource/DataSourceListComponent.jsx\"\nimport UpdateDataSourceComponent from \"../dataSource/UpdateDataSourceComponent.jsx\"\nimport AddCurrencyComponent from \"../currency/AddCurrencyComponent.jsx\"\nimport CurrencyListComponent from \"../currency/CurrencyListComponent.jsx\"\nimport UpdateCurrencyComponent from \"../currency/UpdateCurrencyComponent.jsx\"\nimport AddCountryComponent from \"../country/AddCountryComponent.jsx\"\nimport CountryListComponent from \"../country/CountryListComponent.jsx\"\nimport UpdateCountryComponent from \"../country/UpdateCountryComponent.jsx\"\nimport AddShipmentStatusComponent from \"../shipmentStatus/AddShipmentStatusComponent.jsx\"\nimport ShipmentStatusListComponent from \"../shipmentStatus/ShipmentStatusListComponent.jsx\"\nimport UpdateShipmentStatusComponent from \"../shipmentStatus/UpdateShipmentStatusComponent.jsx\"\nimport DownloadProgramDataComponent from '../program/DownloadProgramDataComponent';\nimport ImportProgramDataComponent from '../program/ImportProgramDataComponent';\nimport ExportProgramDataComponent from '../program/ExportProgramDataComponent';\nimport SyncMasterDataComponent from '../masterSync/SyncMasterDataComponent';\nimport AddRegionComponent from '../region/AddRegionComponent';\nimport EditRegionComponent from '../region/EditRegionComponent';\nimport RegionListComponent from '../region/RegionListComponent';\nimport UpdateLabelsComponent from '../label/UpdateLabelsComponent.jsx';\nimport LabelListComponent from '../label/LabelListComponent.jsx';\nimport AddUnitTypeComponent from '../unitType/AddUnitTypeComponent.jsx';\nimport UnitTypeListComponent from '../unitType/UnitTypeListComponent.jsx';\nimport UpdateUnitTypeComponent from '../unitType/UpdateUnityTypeComponent.jsx';\nimport AddHealthAreaComponent from '../healthArea/AddHealthAreaComponent.jsx';\nimport HealthAreaListComponent from '../healthArea/HealthAreaListComponent.jsx';\nimport EditHealthAreaComponent from '../healthArea/EditHealthAreaComponent.jsx';\nimport AddOrganisationComponent from '../organisation/AddOrganisationComponent.jsx';\nimport OrganisationListComponent from '../organisation/OrganisationListComponent.jsx';\nimport EditOrganisationComponent from '../organisation/EditOrganisationComponent.jsx';\n\n\nclass Layout extends React.Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            timeout: AuthenticationService.checkSessionTimeOut(),\n            showModal: false,\n            userLoggedIn: false,\n            isTimedOut: false\n        }\n\n        this.idleTimer = null\n        this.onAction = this._onAction.bind(this)\n        this.onActive = this._onActive.bind(this)\n        this.onIdle = this._onIdle.bind(this)\n        this.handleClose = this.handleClose.bind(this)\n        this.handleLogout = this.handleLogout.bind(this)\n    }\n\n    _onAction(e) {\n      console.log('user did something', e)\n      this.setState({isTimedOut: false})\n    }\n   \n    _onActive(e) {\n      console.log('user is active', e)\n      this.setState({isTimedOut: false})\n    }\n   \n    _onIdle(e) {\n      console.log('user is idle', e)\n      const isTimedOut = this.state.isTimedOut\n      if (isTimedOut) {\n          this.props.history.push('/')\n      } else {\n        this.setState({showModal: true})\n        this.idleTimer.reset();\n        this.setState({isTimedOut: true})\n      }\n      \n    }\n\n    handleClose() {\n      this.setState({showModal: false})\n    }\n\n    handleLogout() {\n      this.setState({showModal: false})\n      this.props.history.push('/')\n    }\n\n    render(){\n      const { match } = this.props\n      return(\n        <>\n          <IdleTimer\n            ref={ref => { this.idleTimer = ref }}\n            element={document}\n            onActive={this.onActive}\n            onIdle={this.onIdle}\n            onAction={this.onAction}\n            debounce={250}\n            timeout={this.state.timeout} />\n\n            <div className=\"\">\n               \n            {/* {AuthenticationService.setupAxiosInterceptors()} */}\n                <Switch>\n\n                {/* <Route path=\"/\" exact component={LoginComponent} /> */}\n                <Route path=\"/login/:message\" exact component={LoginComponent} />\n                    <Route \n                        exact path={`${match.path}welcome`}\n                        render={(props) => <WelcomeComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}welcome/:message`}\n                        render={(props) => <WelcomeComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}addUser`}\n                        render={(props) => <AddUserComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}userList`}\n                        render={(props) => <UserListComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}userList/:message`}\n                        render={(props) => <UserListComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}editUser`}\n                        render={(props) => <EditUserComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}changePassword`}\n                        render={(props) => <ChangePasswordComponent {...props} /> }/>\n                    />\n                    \n                    <Route \n                        exact path={`${match.path}addRole`}\n                        render={(props) => <AddRoleComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}roleList`}\n                        render={(props) => <RoleListComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}roleList/:message`}\n                        render={(props) => <RoleListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editRole`}\n                        render={(props) => <EditRoleComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}addLanguage`}\n                        render={(props) => <AddLanguageComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editLanguage`}\n                        render={(props) => <EditLanguageComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}languageList/:message`}\n                        render={(props) => <LanguageListComponent {...props} /> }/>\n                    />\n                    \n                    <Route \n                        exact path={`${match.path}addDataSourceType`}\n                        render={(props) => <AddDataSourceTypeComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editDataSourceType`}\n                        render={(props) => <UpdateDataSourceTypeComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}dataSourceTypeList/:message`}\n                        render={(props) => <DataSourceTypeListComponent {...props} /> }/>\n                    />\n\n\n                    <Route \n                        exact path={`${match.path}addDataSource`}\n                        render={(props) => <AddDataSource {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editDataSource`}\n                        render={(props) => <UpdateDataSourceComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}dataSourceList/:message`}\n                        render={(props) => <DataSourceListComponent {...props} /> }/>\n                    />\n\n\n                    <Route \n                        exact path={`${match.path}addCurrency`}\n                        render={(props) => <AddCurrencyComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editCurrency`}\n                        render={(props) => <UpdateCurrencyComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}currencyList/:message`}\n                        render={(props) => <CurrencyListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}downloadProgramData/`}\n                        render={(props) => <DownloadProgramDataComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}importProgramData/`}\n                        render={(props) => <ImportProgramDataComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}exportProgramData/`}\n                        render={(props) => <ExportProgramDataComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}syncMasterData/`}\n                        render={(props) => <SyncMasterDataComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}addCountry`}\n                        render={(props) => <AddCountryComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}countryList/:message`}\n                        render={(props) => <CountryListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editCountry`}\n                        render={(props) => <UpdateCountryComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}addShipmentStatus`}\n                        render={(props) => <AddShipmentStatusComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}shipmentStatusListAll/:message`}\n                        render={(props) => <ShipmentStatusListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editShipmentStatus`}\n                        render={(props) => <UpdateShipmentStatusComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}addRegion`}\n                        render={(props) => <AddRegionComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}regionList`}\n                        render={(props) => <RegionListComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}regionList/:message`}\n                        render={(props) => <RegionListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editRegion`}\n                        render={(props) => <EditRegionComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}addHealthArea`}\n                        render={(props) => <AddHealthAreaComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}healthAreaList`}\n                        render={(props) => <HealthAreaListComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}healthAreaList/:message`}\n                        render={(props) => <HealthAreaListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editHealthArea`}\n                        render={(props) => <EditHealthAreaComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}addOrganisation`}\n                        render={(props) => <AddOrganisationComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}organisationList`}\n                        render={(props) => <OrganisationListComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}organisationList/:message`}\n                        render={(props) => <OrganisationListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editOrganisation`}\n                        render={(props) => <EditOrganisationComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}editLabels`}\n                        render={(props) => <UpdateLabelsComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}labelList/:message`}\n                        render={(props) => <LabelListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}addUnitType`}\n                        render={(props) => <AddUnitTypeComponent {...props} /> }/>\n                    />\n\n                    <Route \n                        exact path={`${match.path}unitTypeList/:message`}\n                        render={(props) => <UnitTypeListComponent {...props} /> }/>\n                    />\n                    <Route \n                        exact path={`${match.path}editUnitType`}\n                        render={(props) => <UpdateUnitTypeComponent {...props} /> }/>\n                    />\n                </Switch>\n                \n              {/*  <IdleTimeOutModal \n                    showModal={this.state.showModal} \n                    handleClose={this.handleClose}\n                    handleLogout={this.handleLogout}\n                />*/}\n            </div>\n        </>\n      )\n   }\n\n }\n\n Layout.propTypes = {\n     match: PropTypes.any.isRequired,\n     history: PropTypes.func.isRequired\n }\n\nexport default Layout","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from '../../api/UserService'\nimport CryptoJS from 'crypto-js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\nimport { SECRET_KEY } from '../../Constants.js'\nimport jwt_decode from 'jwt-decode'\n\n\nexport default class UpdateExpiredPasswordComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\",\n            username: this.props.location.state.username\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.logoutClicked = this.logoutClicked.bind(this);\n    }\n\n\n    componentDidMount() {\n        let username = this.state.username;\n        $.validator.addMethod('checkPassword', function () {\n            if ($('#newPassword').val() === $('#confirmNewPassword').val()) {\n                return true;\n            } else {\n                return false;\n            }\n        }, 'The New passwords do not match.');\n\n        $.validator.addMethod('checkOldPassword', function () {\n            if ($('#newPassword').val() == $('#oldPassword').val()) {\n                console.log(\"same\");\n                return false;\n            } else {\n                console.log(\"different\");\n                return true;\n            }\n        }, \"The new password can't be same as old password.\");\n\n        $.validator.addMethod('strongPassword', function (value) {\n            if (username != value) {\n                return /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*]).{6,15}$/.test(value);\n            } else {\n                return false;\n            }\n        }, 'Password does not match with password policy.');\n\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                oldPassword: {\n                    required: true\n                },\n                newPassword: {\n                    required: true,\n                    checkOldPassword: true,\n                    strongPassword: true\n                },\n                confirmNewPassword: {\n                    required: true,\n                    strongPassword: true,\n                    checkPassword: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"login\">\n                <form name=\"form1\" id=\"form1\">\n                    <h3>Update Password</h3>\n                    Old password : <input type=\"password\" id=\"oldPassword\" name=\"oldPassword\" /><br></br><br></br>\n                    New password : <input type=\"password\" id=\"newPassword\" name=\"newPassword\" /><br></br><br></br>\n                    Confirm new password : <input type=\"password\" id=\"confirmNewPassword\" name=\"confirmNewPassword\" /><br></br><br></br>\n                    <Online><button type=\"button\" onClick={this.submitClicked}>Submit</button></Online>\n                    <Online><button type=\"button\" onClick={this.logoutClicked}>Logout</button><br></br><br></br></Online>\n                    <div><h5>{this.state.message}</h5></div>\n                </form>\n            </div>\n        )\n    }\n\n    submitClicked() {\n        if ($(\"#form1\").valid()) {\n            if (navigator.onLine) {\n                UserService.updateExpiredPassword(this.state.username, $('#oldPassword').val(), $('#newPassword').val())\n                    .then(response => {\n                        var decoded = jwt_decode(response.data.token);\n                        localStorage.setItem('token-' + decoded.userId, CryptoJS.AES.encrypt((response.data.token).toString(), `${SECRET_KEY}`));\n                        localStorage.setItem('username-' + decoded.userId, CryptoJS.AES.encrypt((decoded.user.username).toString(), `${SECRET_KEY}`));\n                        localStorage.setItem('password-' + decoded.userId, CryptoJS.AES.encrypt((decoded.user.password).toString(), `${SECRET_KEY}`));\n                        localStorage.setItem('typeOfSession', \"Online\");\n                        localStorage.setItem('curUser', CryptoJS.AES.encrypt((decoded.userId).toString(), `${SECRET_KEY}`));\n                        this.props.history.push(`/welcome/Password updated successfully.`)\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            } else {\n                alert(\"You must be online to update the password.\")\n            }\n        }\n    }\n\n    logoutClicked() {\n        this.props.history.push(`/login/You are logged out.`)\n    }\n}\n\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from '../../api/UserService'\nimport { Online } from \"react-detect-offline\";\n\nexport default class ForgotPasswordComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                username: {\n                    required: true\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n\n            <div className=\"page-content-wrap\">\n\n    <div className=\"row\">\n        <div className=\"\">\n            <ul class=\"breadcrumb\">\n\n            </ul>\n        </div>\n\n        <div className=\"col-md-6 col-md-offset-3\">\n            <div className=\"login mt-2\">\n                <div className=\"panel panel-default\">\n                    <div className=\"panel-heading\">\n                        <h3 className=\"panel-title\">Forgot Password</h3>\n                    </div>\n                    <div className=\"panel-body\">\n                        <div className=\"col-md-8 col-md-offset-2\">\n                            <div className=\"block login\">\n\n                                <form className=\"form-horizontal\"name=\"form1\" id=\"form1\">\n                                    <div className=\"form-group\">\n                                        <label className=\"col-md-4 control-label\">  Username :</label>\n                                        <div className=\"col-md-8\">\n                                            <input type=\"text\" id=\"username\" name=\"username\" className=\"form-control\"></input>\n                                        </div>\n                                    </div>\n\n                                    <div>\n                                        <h5>{this.state.message}</h5></div>\n                                </form>\n                            </div>\n                        </div>\n\n                    </div>\n                    <div className=\"panel-footer\">\n\n                        <Online>\n                            <button onClick={this.cancelClicked} type=\"button\" className=\"btn btn-primary pull-right ml-1\">cancel</button>\n                        </Online>\n                        <Online>\n                            <button onClick={this.submitClicked} type=\"button\" className=\"btn btn-success pull-right\">Submit</button>\n                        </Online>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n            \n    \n        )\n    }\n\n    submitClicked() {\n        if ($(\"#form1\").valid()) {\n            if (navigator.onLine) {\n                UserService.forgotPassword($('#username').val())\n                    .then(response => {\n                        // console.log(response.statusText)\n                        this.props.history.push(`/login/${response.data.message}`)\n                    })\n                    .catch(\n                        error => {\n                            console.log(error.message);\n                            console.log(error.text);\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            } else {\n                alert(\"You must be Online to update the password.\")\n            }\n        }\n    }\n\n    cancelClicked() {\n        this.props.history.push(`/login/Action Canceled.`)\n    }\n}\n\n","import React, { Component } from 'react';\n\nimport $ from 'jquery';\nimport '../../Js/validation.js';\nimport 'jquery-validation';\nimport UserService from '../../api/UserService'\nimport CryptoJS from 'crypto-js'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\nimport { SECRET_KEY } from '../../Constants.js'\n\n\nexport default class ResetPasswordComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\",\n            username: this.props.match.params.username,\n            token: this.props.match.params.token\n        }\n        this.submitClicked = this.submitClicked.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    componentDidMount() {\n        console.log(\"username---\" + this.state.username);\n        console.log(\"token---\" + this.state.token);\n        AuthenticationService.setupAxiosInterceptors();\n        UserService.confirmForgotPasswordToken(this.state.username, this.state.token)\n            .then(response => {\n                console.log(\"response---\", response);\n                this.setState({\n                    message: response.data.message\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        $.validator.addMethod('checkPassword', function () {\n            if ($('#newPassword').val() === $('#confirmNewPassword').val()) {\n                return true;\n            } else {\n                return false;\n            }\n        }, 'The new password does not match.');\n        $.validator.addMethod('strongPassword', function (value) {\n            return /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*]).{6,15}$/.test(value);\n        }, 'Password does not match with password policy.');\n        $(\"#form1\").validate({\n            ignore: [],\n            rules: {\n                newPassword: {\n                    required: true,\n                    strongPassword: true,\n                    maxlength: 15\n                },\n                confirmNewPassword: {\n                    required: true,\n                    checkPassword: true,\n                    strongPassword: true,\n                    maxlength: 15\n                }\n            },\n            errorPlacement: function (error, element) {\n                error.insertAfter(element);\n            }\n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"page-content-wrap\">\n                <div className=\"row\">\n                    <div className=\"\"><ul class=\"breadcrumb\">\n                    </ul></div>\n                    <div className=\"col-md-8 col-md-offset-2\">\n                        <div className=\"login mt-2\">\n                            <div className=\"panel panel-default Box-shadow\">\n                                <div className=\"panel-heading\">\n                                    <h3 className=\"panel-title\">Update Password</h3>\n                                </div>\n                                <div className=\"panel-body\">\n                                    <div className=\"col-md-8 col-md-offset-2\">\n                                        <div className=\"block\">\n\n                                            <form className=\"form-horizontal\" name=\"form1\" id=\"form1\">\n                                                <div className=\"form-group\">\n                                                    <label className=\"col-md-4 control-label\">New Password :</label>\n                                                    <div className=\"col-md-8\">\n                                                        <input type=\"password\" id=\"newPassword\" name=\"newPassword\" className=\"form-control\" />\n                                                    </div>\n                                                </div>\n                                                <div className=\"form-group\">\n                                                    <label className=\"col-md-4 control-label\">Confirm Password :</label>\n                                                    <div className=\"col-md-8\">\n                                                        <input type=\"password\" id=\"confirmNewPassword\" name=\"confirmNewPassword\" className=\"form-control\" />\n                                                    </div>\n                                                </div>\n\n\n                                                <div><h5>{this.state.message}</h5></div>\n                                            </form>\n                                        </div>\n                                    </div>\n\n\n\n                                </div>\n                                <div className=\"panel-footer\">\n\n                                    <Online><button type=\"button\" onClick={this.cancelClicked} className=\"btn btn-primary pull-right ml-1\">cancel</button></Online>\n                                    <Online>  <button type=\"button\" onClick={this.submitClicked} className=\"btn btn-success pull-right\">Submit</button></Online>\n\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    submitClicked() {\n        if ($(\"#form1\").valid()) {\n            if (navigator.onLine) {\n                UserService.updatePassword(this.state.username, this.state.token, $('#newPassword').val())\n                    .then(response => {\n                        if (response.data.status != \"Failed\") {\n                            this.props.history.push(`/${response.data.message}`)\n                        } else {\n                            this.setState({\n                                message: response.data.message\n                            })\n                        }\n                    })\n                    .catch(\n                        error => {\n                            switch (error.message) {\n                                case \"Network Error\":\n                                    this.setState({\n                                        message: error.message\n                                    })\n                                    break\n                                default:\n                                    this.setState({\n                                        message: error.response.data.message\n                                    })\n                                    break\n                            }\n                        }\n                    );\n            } else {\n                alert(\"You must be online to update the password.\")\n            }\n        }\n    }\n\n    cancelClicked() {\n        this.props.history.push(`/login/Action canceled.`)\n    }\n}\n\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n/*import '../../js/plugins/bootstrap/bootstrap-select';*/\nimport '../../Js/actions';\n\nimport ErrorComponent from \"../common/ErrorComponent\";\nimport LoginComponent from \"../home/LoginComponent.jsx\";\nimport Layout from './Layout.js';\n\n\n\n\nimport UpdateExpiredPasswordComponent from \"../home/UpdateExpiredPasswordComponent.jsx\";\nimport ForgotPasswordComponent from \"../home/ForgotPasswordComponent.jsx\";\nimport ResetPasswordComponent from \"../home/ResetPasswordComponent.jsx\";\n\nclass Sidebar extends Component {\n\n\n    render() {\n        return (\n            <div className=\"Sidebar\">\n\n\n                {/* MESSAGE BOX*/}\n                <div className=\"message-box animated fadeIn\" data-sound=\"alert\" id=\"mb-signout\">\n                    <div className=\"mb-container\">\n                        <div className=\"mb-middle\">\n                            <div className=\"mb-title\"><span className=\"fa fa-sign-out\"></span> Log <strong>Out</strong> ?</div>\n                            <div className=\"mb-content\">\n                                <p>Are you sure you want to log out?</p>\n                                <p>Press No if youwant to continue work. Press Yes to logout current user.</p>\n                            </div>\n                            <div className=\"mb-footer\">\n                                <div className=\"pull-right\">\n                                    <a href=\"/\" className=\"btn btn-success btn-lg\">Yes</a>\n                                    <button className=\"btn btn-default btn-lg mb-control-close\">No</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <Router basename=\"/palashSprint1\">\n\n                    {/* <Router basename=\"/palashSprint1\"> */}\n\n\n                    <>\n                        <Switch>\n                            <Route path=\"/updateExpiredPassword\" exact component={UpdateExpiredPasswordComponent} />\n                            <Route path=\"/forgotPassword\" exact component={ForgotPasswordComponent} />\n                            <Route path=\"/\" exact component={LoginComponent} />\n                            <Route path=\"/login/:message\" component={LoginComponent} />\n                            <Route path=\"/resetPassword/:username/:token\" exact component={ResetPasswordComponent} />\n                            {/* START PAGE CONTAINER */}\n                            <div className=\"page-container page-navigation-toggled page-container-wide\">\n\n                                {/* START PAGE SIDEBAR */}\n                                <div className=\"page-sidebar\">\n                                    {/* START X-NAVIGATION */}\n                                    <ul className=\"x-navigation x-navigation-minimized\">\n                                        <li className=\"xn-logo\">\n                                            <a href=\"index.html\">FASP</a>\n                                            <a href=\"#\" className=\"x-navigation-control\"></a>\n\n                                        </li>\n\n\n                                        <li><a href=\"#\"><span className=\"\"></span> </a></li>\n\n\n                                        <li className=\"active\">\n                                            {<a href=\"welcome\"><span className=\"fa fa-list-alt\"></span> <span className=\"xn-text\">Home</span></a>}\n                                            {/* <ul>\n\n                 <li className=\"\">\n                     <a href=\"consumption.html\"><span className=\"\"></span> Consumption</a>\n\n                 </li>\n\n                 <li><a href=\"pages-messages.html\"><span className=\"\"></span> Shipments</a></li>\n                 <li><a href=\"pages-calendar.html\"><span className=\"\"></span> Stocks</a></li>\n\n             </ul> */}\n                                        </li>\n\n                                        {/*  <li className=\"xn-openable\">\n             <a href=\"#\"><span className=\"fa fa-table\"></span> <span className=\"xn-text\">Commodities Data</span></a>\n             <ul>\n\n                 <li className=\"\">\n                     <a href=\"#\"><span className=\"\"></span> Consumption</a>\n\n                 </li>\n\n                 <li><a href=\"#\"><span className=\"\"></span> Shipments</a></li>\n                 <li><a href=\"#\"><span className=\"\"></span> Stocks</a></li>\n\n             </ul>\n            </li>*/}\n\n                                        <li className=\"xn-openable\">\n                                            <a href=\"\"><span className=\"fa fa-table\"></span> <span className=\"xn-text\">Program data</span></a>\n                                            <ul>\n\n                                                <li className=\"\">\n                                                    <a href=\"../downloadProgramData\"><span className=\"\"></span> Download</a>\n\n                                                </li>\n\n                                                <li><a href=\"../exportProgramData\"><span className=\"\"></span> Export</a></li>\n                                                <li><a href=\"../syncMasterData\"><span className=\"\"></span> Sync Master data</a></li>\n                                                <li><a href=\"../importProgramData\"><span className=\"\"></span> Import</a></li>\n\n                                            </ul>\n                                        </li>\n\n                                        <li className=\"xn-openable\">\n                                            <a href=\"#\"><span className=\"fa fa-file\"></span> <span className=\"xn-text\">Admin</span></a>\n                                            <ul className=\"sidebarUl\">\n\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> User</a>\n                                                    <ul>\n                                                        <li><a href=\"../addUser\"><span className=\"\"></span> Add User</a></li>\n                                                        <li><a href=\"../userList\"><span className=\"\"></span>User List</a></li>\n                                                    </ul>\n                                                </li>\n\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Role</a>\n                                                    <ul>\n                                                        <li><a href=\"../addRole\"><span className=\"\"></span> Add Role</a></li>\n                                                        <li><a href=\"../roleList\"><span className=\"\"></span>Role List</a></li>\n                                                    </ul>\n                                                </li>\n\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Language</a>\n                                                    <ul>\n                                                        <li><a href=\"../addLanguage\"><span className=\"\"></span> Add Language</a></li>\n                                                        <li><a href=\"../languageList/success\"><span className=\"\"></span>Language List</a></li>\n                                                    </ul>\n                                                </li>\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Country</a>\n                                                    <ul>\n                                                        <li><a href=\"../addCountry\"><span className=\"\"></span> Add Country</a></li>\n                                                        <li><a href=\"../countryList/success\"><span className=\"\"></span>Country List</a></li>\n                                                    </ul>\n                                                </li>\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Currency</a>\n                                                    <ul>\n                                                        <li><a href=\"../addCurrency\"><span className=\"\"></span> Add Currency</a></li>\n                                                        <li><a href=\"../currencyList/success\"><span className=\"\"></span>Currency List</a></li>\n                                                    </ul>\n                                                </li>\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> DataSource</a>\n                                                    <ul>\n                                                        <li><a href=\"../addDataSource\"><span className=\"\"></span> Add DataSource</a></li>\n                                                        <li><a href=\"../dataSourceList/success\"><span className=\"\"></span>DataSource List</a></li>\n                                                    </ul>\n                                                </li>\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> DataSource Type</a>\n                                                    <ul>\n                                                        <li><a href=\"../addDataSourceType\"><span className=\"\"></span> Add DataSource Type</a></li>\n                                                        <li><a href=\"../dataSourceTypeList/success\"><span className=\"\"></span>DataSource Type List</a></li>\n                                                    </ul>\n                                                </li>\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Shipment Status</a>\n                                                    <ul>\n                                                        <li><a href=\"../addShipmentStatus\"><span className=\"\"></span> Add Shipment Status</a></li>\n                                                        <li><a href=\"../shipmentStatusListAll/success\"><span className=\"\"></span>Shipment Status List</a></li>\n                                                    </ul>\n                                                </li>\n\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Region</a>\n                                                    <ul>\n                                                        <li><a href=\"../addRegion\"><span className=\"\"></span> Add Region</a></li>\n                                                        <li><a href=\"../regionList/\"><span className=\"\"></span>Region List</a></li>\n                                                    </ul>\n                                                </li>\n\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Health Area</a>\n                                                    <ul>\n                                                        <li><a href=\"../addHealthArea\"><span className=\"\"></span> Add Health Area</a></li>\n                                                        <li><a href=\"../healthAreaList/\"><span className=\"\"></span>Health Area List</a></li>\n                                                    </ul>\n                                                </li>\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Organisation</a>\n                                                    <ul>\n                                                        <li><a href=\"../addOrganisation\"><span className=\"\"></span> Add Organisation</a></li>\n                                                        <li><a href=\"../organisationList/\"><span className=\"\"></span>Organisation List</a></li>\n                                                    </ul>\n                                                </li>\n\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Labels</a>\n                                                    <ul>\n                                                        <li><a href=\"../labelList/success\"><span className=\"\"></span>Labels List</a></li>\n                                                        {/* <li><a href=\"../addLabels\"><span className=\"\"></span> Add Labels</a></li> */}\n                                                    </ul>\n                                                </li>\n                                                <li className=\"xn-openable\">\n                                                    <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Unit Type</a>\n                                                    <ul>\n\n                                                        <li><a href=\"../addUnitType\"><span className=\"\"></span> Add Unit Type</a></li>\n                                                        <li><a href=\"../unitTypeList/success\"><span className=\"\"></span>Unit type List</a></li>\n                                                    </ul>\n                                                </li>\n                                            </ul>\n                                        </li>\n\n                                        {/*   <li className=\"xn-openable\">\n             <a href=\"#\"><span className=\"fa fa-file\"></span> <span className=\"xn-text\">Background Data</span></a>\n             <ul>\n\n                 <li className=\"xn-openable\">\n                     <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Products</a>\n                     <ul>\n                         <li><a href=\"\"><span className=\"\"></span> Case Sizes</a></li>\n                         <li><a href=\"\"><span className=\"\"></span>Costs</a></li>\n                     </ul>\n                 </li>\n                 <li className=\"xn-openable\">\n                     <a href=\"#\"><span className=\"fa fa-clock-o\"></span> Categories</a>\n                     <ul>\n                         <li><a href=\"\"><span className=\"\"></span> View Categories</a></li>\n\n                     </ul>\n                 </li>\n\n                 <li><a href=\"\"><span className=\"\"></span> Suppliers</a></li>\n                 <li><a href=\"\"><span className=\"\"></span> Data Sources</a></li>\n                 <li><a href=\"\"><span className=\"\"></span> Funding Sources</a></li>\n             </ul>\n         </li>\n\n         <li className=\"xn-openable\">\n             <a href=\"#\"><span className=\"fa fa-bar-chart-o\"></span> <span className=\"xn-text\">Graphs    </span></a>\n             <ul>\n\n                 <li className=\"\">\n                     <a href=\"#\"><span className=\"\"></span> Stock Status</a>\n\n                 </li>\n\n                 <li><a href=\"#\"><span className=\"\"></span> Consumption</a></li>\n                 <li><a href=\"#\"><span className=\"\"></span> Trend Analysis</a></li>\n\n                 <li><a href=\"#\"><span className=\"\"></span> Couple Year Protection(CYP)</a></li>\n             </ul>\n         </li>\n\n         <li className=\"xn-openable\">\n             <a href=\"#\"><span className=\"fa fa-files-o\"></span> <span className=\"xn-text\">Reports    </span></a>\n             <ul>\n\n                 <li className=\"\">\n                     <a href=\"#\"><span className=\"\"></span> Stock Status</a>\n\n                 </li>\n\n                 <li><a href=\"#\"><span className=\"\"></span> Stock Status Matrix</a></li>\n                 <li><a href=\"#\"><span className=\"\"></span> Shipment Summary</a></li>\n\n                 <li><a href=\"#\"><span className=\"\"></span> Supply Plans</a></li>\n\n                 <li><a href=\"#\"><span className=\"\"></span> Shipment Orders</a></li>\n\n                 <li><a href=\"#\"><span className=\"\"></span> Annual Shipment Costs</a></li>\n                 <li><a href=\"#\"><span className=\"\"></span> Pipeline Action</a></li>\n                 <li><a href=\"#\"><span className=\"\"></span> Pipeline Problem</a></li>\n                 <li><a href=\"#\"><span className=\"\"></span> Procurement</a></li>\n             </ul>\n         </li>*/}\n                                    </ul>\n                                    {/* END X-NAVIGATION */}\n                                </div>\n                                {/* END PAGE SIDEBAR */}\n\n                                {/* PAGE CONTENT */}\n\n                                <div className=\"page-content\">\n                                    {/* START X-NAVIGATION VERTICAL */}\n                                    <ul className=\"x-navigation x-navigation-horizontal x-navigation-panel\">\n                                        {/* TOGGLE NAVIGATION */}\n                                        <li className=\"xn-icon-button\">\n                                            <a href=\"#\" className=\"x-navigation-minimize\"><span className=\"fa fa-dedent\"></span></a>\n                                        </li>\n                                        {/* END TOGGLE NAVIGATION */}\n                                        {/* SEARCH */}\n                                        {/* <li className=\"xn-search\">\n                 <form role=\"form\">\n                     <input type=\"text\" name=\"search\" placeholder=\"Search...\"/>\n                 </form>\n             </li> */}\n                                        {/* END SEARCH */}\n                                        {/* SIGN OUT */}\n                                        <li className=\"xn-icon-button pull-right\">\n                                            <a href=\"\" className=\"mb-control\" data-box=\"#mb-signout\"><span className=\"fa fa-sign-out\"></span></a>\n                                        </li>\n                                        {/* END SIGN OUT */}\n                                        {/* MESSAGES */}\n                                        <li className=\"xn-icon-button pull-right\">\n                                            <a href=\"#\"><span className=\"fa fa-user\"></span>\n\n                                            </a>\n\n                                            <div className=\"panel panel-primary animated zoomIn xn-drop-left xn-panel-dragging user-panel\" >\n                                                <div className=\"panel-heading\">\n                                                    <div className=\"profile\">\n                                                        <div className=\"profile-image\">\n                                                            <img className=\"profile-img\" src=\"img/noimage.jpg\" alt=\"John Doe\" >\n                                                            </img></div>\n                                                        <div className=\"profile-data\">\n                                                            <div className=\"profile-data-name\">XYZ</div>\n                                                            <div className=\"profile-data-title\">Admin User</div>\n                                                            <div className=\"profile-data-title\"><span>Online</span></div>\n                                                            <div className=\"profile-data-title\"><span>  <span className=\"online\"></span></span>\n                                                            </div>\n\n\n\n\n                                                        </div>\n\n                                                    </div>\n                                                </div>\n\n                                            </div>\n                                        </li>\n                                        <li class=\"xn-icon-button pull-right\">\n                                            <a href=\"../changePassword\" title=\"Change Password\"><span class=\"fa fa-key\"></span> <span class=\"xn-text\"></span></a>\n                                        </li>\n                                        <li className=\"xn-icon-button pull-right Langli\">\n                                            <a href=\"#\" className=\"lang-align\" ><span className=\"\"> Languages</span> <span className=\"fa fa-caret-down lang-caret\"\n                                            ></span></a>\n                                            {/*    <div className=\"informer informer-warning\">3</div> */}\n                                            <div className=\"panel panel-primary animated zoomIn xn-drop-left xn-panel-dragging lang-width\">\n                                                {/*  <div className=\"panel-heading\">\n                         <h3 className=\"panel-title\"><span className=\"fa fa-tasks\"></span> Program Name</h3>                                \n                         <div className=\"pull-right\">\n                             <span className=\"label label-warning\">3 active</span>\n                         </div>\n                     </div> */}\n                                                <div className=\"panel-body list-group scroll lang-box\">\n                                                    <a className=\"list-group-item\" href=\"#\">\n                                                        <strong>Français | FRA</strong>\n                                                        {/*     <div className=\"progress progress-small progress-striped active\">\n                                 <div className=\"progress-bar progress-bar-danger\" role=\"progressbar\" aria-valuenow=\"50\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 50%;\">50%</div>\n                             </div>\n                             <small className=\"text-muted\">John Doe, 25 Sep 2014 / 50%</small> */}\n                                                    </a>\n                                                    <a className=\"list-group-item\" href=\"#\">\n                                                        <strong>Português | PRT</strong>\n                                                        {/*      <div className=\"progress progress-small progress-striped active\">\n                                 <div className=\"progress-bar progress-bar-warning\" role=\"progressbar\" aria-valuenow=\"80\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 80%;\">80%</div>\n                             </div>\n                             <small className=\"text-muted\">Dmitry Ivaniuk, 24 Sep 2014 / 80%</small> */}\n                                                    </a>\n                                                    <a className=\"list-group-item\" href=\"#\">\n                                                        <strong>Español | ESP</strong>\n\n                                                    </a>\n                                                    <a className=\"list-group-item\" href=\"#\">\n                                                        <strong>STiếng Việt | VIE</strong>\n\n                                                    </a>\n                                                </div>\n\n                                            </div>\n                                        </li>\n\n\n                                        {/* END TASKS */}\n                                    </ul>\n                                    {/* END X-NAVIGATION VERTICAL */}\n\n                                    {/* START BREADCRUMB */}\n\n                                    {/* END BREADCRUMB */}\n\n                                    {/* PAGE CONTENT WRAPPER */}\n\n\n                                    <Route path='/' render={(props) => <Layout {...props} />} />\n                                    {/* <Route path=\"/login/:message\" component={LoginComponent} /> */}\n                                    {/* <Route path=\"/addUser\" component={AddUserComponent} /> */}\n                                    {/* <Route path=\"/userList\" exact component={UserListComponent} /> */}\n                                    {/* <Route path=\"/userList/:message\" component={UserListComponent} /> */}\n                                    {/* <Route path=\"/editUser\" component={EditUserComponent} /> */}\n                                    {/* <Route path=\"/addRole\" component={AddRoleComponent} /> */}\n                                    {/* <Route path=\"/roleList\" component={RoleListComponent} /> */}\n                                    {/* <Route path=\"/roleList/:message\" component={RoleListComponent} /> */}\n                                    {/* <Route path=\"/editRole\" component={RoleListComponent} /> */}\n                                    {/* <AuthenticatedRoute path=\"/updateExpiredPassword\" component={UpdateExpiredPasswordComponent} /> */}\n                                    {/* <AuthenticatedRoute path=\"/welcome\" component={WelcomeComponent} /> */}\n                                    {/* <AuthenticatedRoute path=\"/registration\" component={RegistrationComponent} /> */}\n                                    {/* <AuthenticatedRoute path=\"/listUserApproval/:message\" component={UserApprovalComponent} /> */}\n                                    {/* <AuthenticatedRoute path=\"/listUserApproval\" component={UserApprovalComponent} /> */}\n                                    {/* <AuthenticatedRoute path=\"/editUserApproval/:registrationId/:emailId\" component={EditUserApprovalComponent} /> */}\n                                    {/* <Route component={ErrorComponent} /> */}\n\n\n                                    {/* END PAGE CONTENT WRAPPER */}\n                                </div>\n                                {/* END PAGE CONTENT */}\n                            </div>\n                            {/* END PAGE CONTAINER */}\n\n                        </Switch>\n                    </>\n                </Router>\n            </div>\n        );\n    }\n\n}\n\nexport default Sidebar;\n","import React from 'react';\nimport './App.css';\n\n\nimport Sidebar from './components/common/Sidebar';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Sidebar></Sidebar>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// AuthenticationService.setupAxiosInterceptors();\nserviceWorker.register();"],"sourceRoot":""}